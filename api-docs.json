{
    "openapi": "3.0.0",
    "info": {
        "title": "Ezekia",
        "description": "### Software for Search Firms\n\nIntuitive, easy to use, fast and customizable",
        "termsOfService": "https://ezekia.com/#/terms/subscription-agreement",
        "contact": {
            "email": "support@ezekia.com"
        },
        "version": "2.1.1"
    },
    "servers": [
        {
            "url": "https://ezekia.com/api"
        }
    ],
    "paths": {
        "/clients": {
            "get": {
                "tags": [
                    "Clients"
                ],
                "summary": "Fetches all clients.",
                "operationId": "dae31db68821d82fe803b368cb0e5134",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.query"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.filterOn"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.fields"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.exclude"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.counts"
                    },
                    {
                        "$ref": "#/components/parameters/api.sortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/api.count"
                    },
                    {
                        "$ref": "#/components/parameters/api.from"
                    },
                    {
                        "$ref": "#/components/parameters/api.to"
                    },
                    {
                        "$ref": "#/components/parameters/api.since"
                    },
                    {
                        "$ref": "#/components/parameters/api.before"
                    },
                    {
                        "$ref": "#/components/parameters/api.between"
                    },
                    {
                        "$ref": "#/components/parameters/api.view"
                    },
                    {
                        "$ref": "#/components/parameters/api.withArchived"
                    },
                    {
                        "$ref": "#/components/parameters/api.archived"
                    },
                    {
                        "$ref": "#/components/parameters/api.fuzzy"
                    },
                    {
                        "$ref": "#/components/parameters/api.tags"
                    },
                    {
                        "name": "withPinned",
                        "in": "query",
                        "description": "By setting this parameter pinned clients will be returned first in the response.",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.company"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/companies": {
            "get": {
                "tags": [
                    "Companies"
                ],
                "summary": "Fetches all companies.",
                "operationId": "882417607de182c657ba8c3296c4ae1a",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.query"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.filterOn"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.fields"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.exclude"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.counts"
                    },
                    {
                        "$ref": "#/components/parameters/api.sortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/api.page"
                    },
                    {
                        "$ref": "#/components/parameters/api.count"
                    },
                    {
                        "$ref": "#/components/parameters/api.from"
                    },
                    {
                        "$ref": "#/components/parameters/api.to"
                    },
                    {
                        "$ref": "#/components/parameters/api.since"
                    },
                    {
                        "$ref": "#/components/parameters/api.before"
                    },
                    {
                        "$ref": "#/components/parameters/api.between"
                    },
                    {
                        "$ref": "#/components/parameters/api.view"
                    },
                    {
                        "$ref": "#/components/parameters/api.withArchived"
                    },
                    {
                        "$ref": "#/components/parameters/api.archived"
                    },
                    {
                        "$ref": "#/components/parameters/api.fuzzy"
                    },
                    {
                        "$ref": "#/components/parameters/api.tags"
                    },
                    {
                        "name": "withPinned",
                        "in": "query",
                        "description": "By setting this parameter pinned companies will be returned first in the response.",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.company"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Companies"
                ],
                "summary": "Creates a company",
                "operationId": "bb4e3f7cc02c40f867a929e8d8d5ba10",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.company.fields"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.company.storeRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.company"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/companies/{id}": {
            "get": {
                "tags": [
                    "Companies"
                ],
                "summary": "Fetches a company by ID",
                "operationId": "ee80dab80a9a970b1f09b9bf9bb56538",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.company.fields"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The company ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.company"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Company with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that company."
                    }
                }
            },
            "put": {
                "tags": [
                    "Companies"
                ],
                "summary": "Updates a company",
                "operationId": "c36aa16367238c6764533fa7bb9d51d4",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.company.fields"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The company ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.company.updateRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.company"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Company with that ID doesn't exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Company with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that company."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Companies"
                ],
                "summary": "Deletes a company by ID",
                "operationId": "4748102199cb5cb544c744e504fd67d4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The company ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Company with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to delete that company."
                    }
                }
            }
        },
        "/categories": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Fetches all status tags of a particular type.",
                "operationId": "2eb9088f8a869db09d83eaa9c605312f",
                "parameters": [
                    {
                        "name": "lang",
                        "in": "query",
                        "description": "The language that the categories should be translated to.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "en",
                                "de",
                                "fr",
                                "es"
                            ]
                        }
                    },
                    {
                        "name": "include[]",
                        "in": "query",
                        "description": "The categories to be included in the request. To show all categories, do not include this parameter.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "areas",
                                    "careers",
                                    "cities",
                                    "classifications",
                                    "countries",
                                    "companyTypes",
                                    "industries",
                                    "languages",
                                    "nalIndustries",
                                    "nalCareers",
                                    "teamSizes"
                                ]
                            }
                        }
                    },
                    {
                        "name": "exclude[]",
                        "in": "query",
                        "description": "The categories to be excluded from the request",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "areas",
                                    "careers",
                                    "cities",
                                    "classifications",
                                    "countries",
                                    "companyTypes",
                                    "industries",
                                    "languages",
                                    "nalIndustries",
                                    "nalCareers",
                                    "teamSizes"
                                ]
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.category"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/meetings": {
            "get": {
                "tags": [
                    "Meetings"
                ],
                "summary": "Fetches all meetings.",
                "operationId": "b9dd62960330e3b5a30c2caf2e3dc126",
                "parameters": [
                    {
                        "parameter": "api.page",
                        "name": "page",
                        "in": "query",
                        "description": "Specify the page of items to be returned",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "parameter": "api.order",
                        "name": "order",
                        "in": "query",
                        "description": "Sort order to show results",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    },
                    {
                        "parameter": "api.sort",
                        "name": "sort",
                        "in": "query",
                        "description": "Sort field to order results",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "start_date_utc",
                                "created_at",
                                "updated_at",
                                "title"
                            ]
                        }
                    },
                    {
                        "parameter": "api.meeting.fields",
                        "name": "fields",
                        "in": "query",
                        "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down request.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/api.meeting.field"
                            }
                        }
                    },
                    {
                        "parameter": "api.past",
                        "name": "past",
                        "in": "query",
                        "description": "Return only past or upcoming meetings",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "parameter": "api.overdue",
                        "name": "overdue",
                        "in": "query",
                        "description": "Return only overdue or non-overdue meetings",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "parameter": "api.private",
                        "name": "private",
                        "in": "query",
                        "description": "Return only private or non-private meetings",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "parameter": "api.pinned",
                        "name": "pinned",
                        "in": "query",
                        "description": "Return only private or non-pinned meetings",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "parameter": "api.priority",
                        "name": "priority[]",
                        "in": "query",
                        "description": "Filter meetings by specific priorities",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    1,
                                    2,
                                    3,
                                    4
                                ]
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.meeting"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Meetings"
                ],
                "summary": "Creates a meeting.",
                "operationId": "ebfb8b4b446f4a4c9c943079a7e18746",
                "parameters": [
                    {
                        "parameter": "api.meeting.fields",
                        "name": "fields",
                        "in": "query",
                        "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down request.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/api.meeting.field"
                            }
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.meetingRequestStore"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.meeting"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that meeting and they must have the correct 'edit' permissions for any associated context."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/meetings/{id}": {
            "get": {
                "tags": [
                    "Meetings"
                ],
                "summary": "Fetches a meeting by ID.",
                "operationId": "69492a3137553b68587c892d5dd13bb7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The meeting ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "parameter": "api.meeting.fields",
                        "name": "fields",
                        "in": "query",
                        "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down request.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/api.meeting.field"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.meeting"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Meeting with that ID does not exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that meeting and they must have the correct 'edit' permissions for any associated context."
                    }
                }
            },
            "put": {
                "tags": [
                    "Meetings"
                ],
                "summary": "Updates a meeting.",
                "operationId": "513ce17d232ed706d47948eac35999bc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The meeting ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "parameter": "api.meeting.fields",
                        "name": "fields",
                        "in": "query",
                        "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down request.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/api.meeting.field"
                            }
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.meetingRequestUpdate"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.meeting"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that meeting and they must have the correct 'edit' permissions for any associated context."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Meetings"
                ],
                "summary": "Deletes a meeting.",
                "operationId": "883a2c0a68a71346dc6051f2c146d224",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The meeting ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Meeting with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/meetings/{id}/pinned": {
            "put": {
                "tags": [
                    "Meetings"
                ],
                "summary": "Updates a meeting's pinned status.",
                "operationId": "a1a85271940ba9e873bea3965f463e97",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The meeting ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "parameter": "api.meeting.fields",
                        "name": "fields",
                        "in": "query",
                        "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down request.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/api.meeting.field"
                            }
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.meetingRequestUpdatePinned"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.meeting"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that meeting and they must have the correct 'edit' permissions for any associated context."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tasks": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Fetches all tasks.",
                "operationId": "246b81e7c82d0e8ea5cb02e329b41bb4",
                "parameters": [
                    {
                        "parameter": "api.page",
                        "name": "page",
                        "in": "query",
                        "description": "Specify the page of items to be returned",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "parameter": "api.order",
                        "name": "order",
                        "in": "query",
                        "description": "Sort order to show results",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    },
                    {
                        "parameter": "api.sort",
                        "name": "sort",
                        "in": "query",
                        "description": "Sort field to order results",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "start_date_utc",
                                "created_at",
                                "updated_at",
                                "title"
                            ]
                        }
                    },
                    {
                        "parameter": "api.done",
                        "name": "done",
                        "in": "query",
                        "description": "Return only completed or active results",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "parameter": "api.overdue",
                        "name": "overdue",
                        "in": "query",
                        "description": "Return only overdue or non-overdue tasks",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "parameter": "api.private",
                        "name": "private",
                        "in": "query",
                        "description": "Return only private or non-private tasks",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "parameter": "api.pinned",
                        "name": "pinned",
                        "in": "query",
                        "description": "Return only private or non-pinned tasks",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "parameter": "api.priority",
                        "name": "priority[]",
                        "in": "query",
                        "description": "Filter tasks by specific priorities",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    1,
                                    2,
                                    3,
                                    4
                                ]
                            }
                        }
                    },
                    {
                        "parameter": "api.task.fields",
                        "name": "fields",
                        "in": "query",
                        "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down request.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/api.task.field"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.task"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Creates a task.",
                "operationId": "a0238399b7d0d30b25d03ccc7c1d9736",
                "parameters": [
                    {
                        "parameter": "api.task.fields",
                        "name": "fields",
                        "in": "query",
                        "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down request.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/api.task.field"
                            }
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.taskRequestStore"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.task"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that task and they must have the correct 'edit' permissions for any associated context."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tasks/{id}": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Fetches a task by ID.",
                "operationId": "e97836ef0296c760d3f08faa4c94a3d4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The task ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "parameter": "api.task.fields",
                        "name": "fields",
                        "in": "query",
                        "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down request.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/api.task.field"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.task"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Task with that ID does not exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that task and they must have the correct 'edit' permissions for any associated context."
                    }
                }
            },
            "put": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Updates a task.",
                "operationId": "9bf00c8eb8e602c26b97c59e5f1a4fbd",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The task ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "parameter": "api.task.fields",
                        "name": "fields",
                        "in": "query",
                        "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down request.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/api.task.field"
                            }
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.taskRequestUpdate"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.task"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that task and they must have the correct 'edit' permissions for any associated context."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Deletes a task.",
                "operationId": "39f6185639dff05b50a3db8e18285b32",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The task ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Task with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tasks/{id}/done": {
            "put": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Updates a task's completion status.",
                "operationId": "0a43bfd7df71dfac87b96124b3a4a91d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The task ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "parameter": "api.task.fields",
                        "name": "fields",
                        "in": "query",
                        "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down request.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/api.task.field"
                            }
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.taskRequestUpdateDone"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.task"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that task and they must have the correct 'edit' permissions for any associated context."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tasks/{id}/priority": {
            "put": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Updates a task's priority.",
                "operationId": "daa76ea340140022830728054464ce2f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The task ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.taskRequestUpdatePriority"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.task"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that task and they must have the correct 'edit' permissions for any associated context."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tasks/{id}/pinned": {
            "put": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Updates a task's pinned status.",
                "operationId": "3f6f13b0749a03eeced90a3eca919706",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The task ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.taskRequestUpdatePinned"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.task"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that task and they must have the correct 'edit' permissions for any associated context."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/{type}/{id}/additional-info": {
            "get": {
                "tags": [
                    "Custom Values"
                ],
                "summary": "Retrieves all custom values for an item.",
                "operationId": "85132ece7d7cb16f2635c68efaf9806c",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "The type of item query.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "companies",
                                "projects",
                                "people",
                                "opportunities"
                            ]
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The item ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.customValue"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    }
                }
            },
            "put": {
                "tags": [
                    "Custom Values"
                ],
                "summary": "Adds or updates a custom value for an item.",
                "operationId": "53de10aec1fdbfebadda08cb138a13c4",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "The type of item to update.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "companies",
                                "projects",
                                "people",
                                "opportunities"
                            ]
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The item ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.customValue.updateRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.customValue"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Custom Values"
                ],
                "summary": "Deletes a custom value from an item.",
                "operationId": "d2f6818a63199c86233692876be48720",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "The type of item to update.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "companies",
                                "projects",
                                "people",
                                "opportunities"
                            ]
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The item ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The custom value IDs",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "customValues": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "example": 1234
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item or custom value with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/{type}/{id}/documents": {
            "post": {
                "tags": [
                    "Documents"
                ],
                "summary": "Add documents and attachments.",
                "operationId": "01ba71147e711929e3ca168cc5b07356",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "The type of model to add a document to.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "companies",
                                "assignments",
                                "opportunities",
                                "people",
                                "lists"
                            ]
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The item ID of the model.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.documentRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.document"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/projects/{id}/billing": {
            "get": {
                "tags": [
                    "Billing"
                ],
                "summary": "Fetches billing information for an item.",
                "operationId": "dafc246f0020450b4f0c684cc0635be6",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.billing"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    }
                }
            }
        },
        "/people/{personId}/aspirations": {
            "post": {
                "tags": [
                    "People (Aspirations)"
                ],
                "summary": "Sets aspiration details for a person",
                "operationId": "fcc919bf20a2613018870c5c27200776",
                "parameters": [
                    {
                        "name": "personId",
                        "in": "path",
                        "description": "The ID of the person",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The aspiration details body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.aspiration.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.person.aspiration"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/people/{personId}/confidential": {
            "post": {
                "tags": [
                    "People (Confidential Details)"
                ],
                "summary": "Sets confidential details for a person",
                "operationId": "de87df5540c64db1fe8b4008eb6df2d0",
                "parameters": [
                    {
                        "name": "personId",
                        "in": "path",
                        "description": "The ID of the person",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The confidential details body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.confidential.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.person.confidential"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/people/{personId}/current-status": {
            "post": {
                "tags": [
                    "People (Current Status)"
                ],
                "summary": "Sets current status for a person",
                "operationId": "904d54de196b1b32febc56dd3defcdd7",
                "parameters": [
                    {
                        "name": "personId",
                        "in": "path",
                        "description": "The ID of the person",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The current status body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.currentStatus.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v2.person.currentStatus"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/people/{personId}/education": {
            "get": {
                "tags": [
                    "People (Education/Qualifications)"
                ],
                "summary": "Gets all educations for a person",
                "operationId": "18fa324611870dd7704fcb6daf8afca5",
                "parameters": [
                    {
                        "name": "personId",
                        "in": "path",
                        "description": "The ID of the person",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "parameter": "api.person.education.sortBy",
                        "name": "sortBy",
                        "in": "query",
                        "description": "The field that should be used to sort the results.\nThe direction can be specified with the `sortOrder` parameter.",
                        "schema": {
                            "description": "The best match if the `query` parameter is used, otherwise they will be ordered by when they were added to the platform.",
                            "type": "string",
                            "enum": [
                                "createdAt",
                                "updatedAt",
                                "start"
                            ],
                            "example": "createdAt"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.person.education"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    }
                }
            },
            "post": {
                "tags": [
                    "People (Education/Qualifications)"
                ],
                "summary": "Creates a education for a person",
                "operationId": "9976b683dff26e92e94950181350a231",
                "parameters": [
                    {
                        "name": "personId",
                        "in": "path",
                        "description": "The ID of the person",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The Education body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.education.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.person.education"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/people/{personId}/education/{educationId}": {
            "put": {
                "tags": [
                    "People (Education/Qualifications)"
                ],
                "summary": "Updates an education for a person",
                "operationId": "f5e0d4b2169b6201fd0febd679124007",
                "parameters": [
                    {
                        "name": "personId",
                        "in": "path",
                        "description": "The ID of the person",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "educationId",
                        "in": "path",
                        "description": "The ID of the education",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The Education body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.education.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.person.education"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Position with that ID does not exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to update that person."
                    }
                }
            },
            "delete": {
                "tags": [
                    "People (Education/Qualifications)"
                ],
                "summary": "Deletes an education for a person",
                "operationId": "1c919f63903d4377a086cea7a7522e29",
                "parameters": [
                    {
                        "name": "personId",
                        "in": "path",
                        "description": "The person ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "educationId",
                        "in": "path",
                        "description": "The education ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Education with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to delete that education."
                    }
                }
            }
        },
        "/people/notes": {
            "post": {
                "tags": [
                    "People (Notes)",
                    "Notes"
                ],
                "summary": "Adds notes to one or more people.",
                "operationId": "b3e8d2a1a945d140364b85ad2196d443",
                "requestBody": {
                    "description": "The note body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/api.note.storeRequest"
                                    },
                                    {
                                        "properties": {
                                            "people": {
                                                "description": "An array of person IDs that will have the notes added.",
                                                "type": "array",
                                                "items": {
                                                    "type": "integer",
                                                    "example": 1234
                                                }
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.person.notesUpdateResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/people/notes/{id}": {
            "put": {
                "tags": [
                    "People (Notes)",
                    "Notes"
                ],
                "summary": "Updates a note.",
                "operationId": "639e6420cc47544c4061fb89753533d5",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The note ID or the group code.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The note body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.note.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.note"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "People (Notes)",
                    "Notes"
                ],
                "summary": "Deletes a note.",
                "operationId": "09b4c3f9edd258fe0f301a394a679aed",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The note ID or the group code.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Note with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to delete that note."
                    }
                }
            }
        },
        "/people/{personId}/positions": {
            "get": {
                "tags": [
                    "People (Positions)"
                ],
                "summary": "Gets all positions for a person",
                "operationId": "8c677669b21284abe4180996fd26792a",
                "parameters": [
                    {
                        "name": "personId",
                        "in": "path",
                        "description": "The ID of the person",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "parameter": "api.person.position.sortBy",
                        "name": "sortBy",
                        "in": "query",
                        "description": "The field that should be used to sort the results.\nThe direction can be specified with the `sortOrder` parameter.",
                        "schema": {
                            "description": "The best match if the `query` parameter is used, otherwise they will be ordered by when they were added to the platform.",
                            "type": "string",
                            "enum": [
                                "createdAt",
                                "updatedAt",
                                "startDate"
                            ],
                            "example": "createdAt"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.person.position"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    }
                }
            },
            "post": {
                "tags": [
                    "People (Positions)"
                ],
                "summary": "Creates a position for a person",
                "operationId": "039a41475805a7082287d484f05d433c",
                "parameters": [
                    {
                        "name": "personId",
                        "in": "path",
                        "description": "The ID of the person",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The position body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.position.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.person.position"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/people/{personId}/positions/{positionId}": {
            "put": {
                "tags": [
                    "People (Positions)"
                ],
                "summary": "Updates a position for a person",
                "operationId": "55d58cf12dcd192ba44b7e2c7a63b470",
                "parameters": [
                    {
                        "name": "personId",
                        "in": "path",
                        "description": "The ID of the person",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "positionId",
                        "in": "path",
                        "description": "The ID of the position",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The position body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.position.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.person.position"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Position with that ID does not exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to update that person."
                    }
                }
            },
            "delete": {
                "tags": [
                    "People (Positions)"
                ],
                "summary": "Deletes a position for a person",
                "operationId": "10c903f855876c855251211e756d05a4",
                "parameters": [
                    {
                        "name": "personId",
                        "in": "path",
                        "description": "The person ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "positionId",
                        "in": "path",
                        "description": "The position ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Position with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to delete that position."
                    }
                }
            }
        },
        "/people/{id}/links": {
            "post": {
                "tags": [
                    "People (Links)"
                ],
                "summary": "Adds a new link to a person.",
                "operationId": "7de822108f3316afb832c169e94b340f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The person ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The body for creating links.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.person.linkRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.link"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Link with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that person."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/companies/{id}/links": {
            "post": {
                "tags": [
                    "Companies (Links)"
                ],
                "summary": "Adds a new link to a company.",
                "operationId": "454e7189c2bde42ce6650890f5b82c15",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The company ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The body for creating links.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.client.linkRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.link"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Link with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that company."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/people/{id}/links/{linkId}": {
            "put": {
                "tags": [
                    "People (Links)"
                ],
                "summary": "Updates a link on a person.",
                "operationId": "7e0342ff00d4b2b955fa84c9625d0aba",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The person ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "linkId",
                        "in": "path",
                        "description": "The ID of the link to be updated.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The body for creating links.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.person.linkRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.link"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Link with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to update that person."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "People (Links)"
                ],
                "summary": "Deletes a link on a person.",
                "operationId": "cbc3768b7e2775bb3dff3cf79e8faad8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The person ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "linkId",
                        "in": "path",
                        "description": "The ID of the link to be deleted.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Link with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to update that person."
                    }
                }
            }
        },
        "/companies/{id}/links/{linkId}": {
            "put": {
                "tags": [
                    "Companies (Links)"
                ],
                "summary": "Updates a link on a company.",
                "operationId": "e7d5ce058621cc0afb81fcd0f4c58f43",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The company ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "linkId",
                        "in": "path",
                        "description": "The ID of the link to be updated.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The body for updating links.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.client.linkRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.link"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Link with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to update that company."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Companies (Links)"
                ],
                "summary": "Deletes a link on a company.",
                "operationId": "e83c2d960688a2d824cce2b5ac9d5646",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The company ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "linkId",
                        "in": "path",
                        "description": "The ID of the link to be deleted.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Link with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to update that person."
                    }
                }
            }
        },
        "/{type}/{id}/meetings": {
            "get": {
                "tags": [
                    "Meetings"
                ],
                "summary": "Retrieves all meetings for an item.",
                "operationId": "17fb08851b908a62e209277716c78d8e",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "The type of item query.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "companies",
                                "projects",
                                "people"
                            ]
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The item ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "parameter": "api.meeting.fields",
                        "name": "fields",
                        "in": "query",
                        "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down request.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/api.meeting.field"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.meeting"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    }
                }
            }
        },
        "/{type}/{id}/notes": {
            "get": {
                "tags": [
                    "Notes"
                ],
                "summary": "Retrieves all notes for an item.",
                "operationId": "d71e5719a26c8050b446cb46a3760c0c",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "The type of item query.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "companies",
                                "projects",
                                "people",
                                "lists"
                            ]
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The item ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.note"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    }
                }
            },
            "post": {
                "tags": [
                    "Notes"
                ],
                "summary": "Adds notes to an item.",
                "operationId": "8330d8192bd994058b13dddb118c7170",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "The type of item to update.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "companies",
                                "projects",
                                "people",
                                "lists"
                            ]
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The item ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The note body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.note.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.note"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/notes": {
            "get": {
                "tags": [
                    "Notes"
                ],
                "summary": "Fetches all notes",
                "operationId": "8384ee7e5209d1b05b3f88296c9c19a0",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type of the item",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "companies",
                                "projects",
                                "people",
                                "lists"
                            ]
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "The ID of the item",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "noteType",
                        "in": "query",
                        "description": "The type of the note",
                        "schema": {
                            "type": "string",
                            "default": "user",
                            "enum": [
                                "system",
                                "user",
                                "compliance"
                            ]
                        },
                        "example": "user"
                    },
                    {
                        "$ref": "#/components/parameters/api.note.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.note.sortOrder"
                    },
                    {
                        "parameter": "api.page",
                        "name": "page",
                        "in": "query",
                        "description": "Specify the page of items to be returned",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "parameter": "api.count",
                        "name": "count",
                        "in": "query",
                        "description": "Specify how many records to be returned per page.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.note"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    }
                }
            }
        },
        "/{type}/{id}/notes/{noteId}": {
            "put": {
                "tags": [
                    "Notes"
                ],
                "summary": "Updates a note on an item.",
                "operationId": "af7c988703fd05332bb45e9b5fe8c5e9",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "The type of item to update.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "companies",
                                "projects",
                                "people",
                                "lists"
                            ]
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The item ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "noteId",
                        "in": "path",
                        "description": "The note ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The note body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.note.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.note"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Notes"
                ],
                "summary": "Deletes a note from an item.",
                "operationId": "43d9a3858c50d804c746f8bac8758745",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "The type of item.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "companies",
                                "projects",
                                "people",
                                "lists"
                            ]
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The item ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "noteId",
                        "in": "path",
                        "description": "The note ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.note"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item or note with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/off-limits/agreements/{modelType}": {
            "get": {
                "tags": [
                    "Off-Limits"
                ],
                "summary": "Retrieves all off-limits agreements for people or companies",
                "operationId": "dff41c7d160a51300431d66333136eca",
                "parameters": [
                    {
                        "name": "modelType",
                        "in": "path",
                        "description": "The model type",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "companies",
                                "people"
                            ]
                        }
                    },
                    {
                        "parameter": "api.offLimits.agreement.sortBy",
                        "name": "sortBy",
                        "in": "query",
                        "description": "The field that should be used to sort the results.\nThe direction can be specified with the `sortOrder` parameter.",
                        "schema": {
                            "description": "The best match if the `query` parameter is used, otherwise they will be ordered by when they were added to the platform.",
                            "type": "string",
                            "enum": [
                                "createdAt",
                                "updatedAt"
                            ],
                            "example": "createdAt"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.offLimits.agreement"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    }
                }
            },
            "post": {
                "tags": [
                    "Off-Limits"
                ],
                "summary": "Creates an off-limits agreement for a person or a company",
                "operationId": "8c20fcc1c25e86b5e7c96792bc86d90f",
                "parameters": [
                    {
                        "name": "modelType",
                        "in": "path",
                        "description": "The model type",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "companies",
                                "people"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "description": "The body for creating an off-limits agreement",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.offlimits.agreement.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.offLimits.agreement"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/off-limits/agreements/{type}/{id}": {
            "get": {
                "tags": [
                    "Off-Limits"
                ],
                "summary": "Retrieves all off-limits agreements for a specific person or a company",
                "operationId": "fcd4f0dd1d2dc7cdf1180026175e20a0",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "The model type",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "companies",
                                "people"
                            ]
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The company or person ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "parameter": "api.offLimits.agreement.sortBy",
                        "name": "sortBy",
                        "in": "query",
                        "description": "The field that should be used to sort the results.\nThe direction can be specified with the `sortOrder` parameter.",
                        "schema": {
                            "description": "The best match if the `query` parameter is used, otherwise they will be ordered by when they were added to the platform.",
                            "type": "string",
                            "enum": [
                                "createdAt",
                                "updatedAt"
                            ],
                            "example": "createdAt"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.offLimits.agreement"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    }
                }
            }
        },
        "/off-limits/agreements/{modelType}/{agreementId}": {
            "put": {
                "tags": [
                    "Off-Limits"
                ],
                "summary": "Updates an off-limits agreement for a person or a company",
                "operationId": "ee769827004ed3555a30f8057902b698",
                "parameters": [
                    {
                        "name": "modelType",
                        "in": "path",
                        "description": "The model type",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "companies",
                                "people"
                            ]
                        }
                    },
                    {
                        "name": "agreementId",
                        "in": "path",
                        "description": "The off-limits agreement id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The body for updating an off-limits agreement",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.offlimits.agreement.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.offLimits.agreement"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Off-Limits"
                ],
                "summary": "Deletes an off-limits agreement for a person or a company",
                "operationId": "794d4b161f8bd1d39a59c092e2bd1459",
                "parameters": [
                    {
                        "name": "modelType",
                        "in": "path",
                        "description": "The model type",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "companies",
                                "people"
                            ]
                        }
                    },
                    {
                        "name": "agreementId",
                        "in": "path",
                        "description": "The off-limits agreement id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    }
                }
            }
        },
        "/people": {
            "get": {
                "tags": [
                    "People (Profile)"
                ],
                "summary": "Fetches all people.",
                "operationId": "f12101006735fc173967034fecec26d1",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.query"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.filterOn"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.fields"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.exclude"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.counts"
                    },
                    {
                        "$ref": "#/components/parameters/api.page"
                    },
                    {
                        "$ref": "#/components/parameters/api.from"
                    },
                    {
                        "$ref": "#/components/parameters/api.to"
                    },
                    {
                        "$ref": "#/components/parameters/api.count"
                    },
                    {
                        "$ref": "#/components/parameters/api.sortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.since"
                    },
                    {
                        "$ref": "#/components/parameters/api.before"
                    },
                    {
                        "$ref": "#/components/parameters/api.between"
                    },
                    {
                        "$ref": "#/components/parameters/api.view"
                    },
                    {
                        "$ref": "#/components/parameters/api.fuzzy"
                    },
                    {
                        "$ref": "#/components/parameters/api.tags"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.isCandidate"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.onCompanies"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.person"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "People (Profile)"
                ],
                "summary": "Creates a person.",
                "operationId": "5f09389f22dc2c1836629cb583c67087",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.person.fields"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.person.storeRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.person"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/people/{id}": {
            "get": {
                "tags": [
                    "People (Profile)"
                ],
                "summary": "Fetches a person by ID.",
                "operationId": "10593296ed81819c9d28b5baf18fcb7b",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.person.fields"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The person ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.person"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Person with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that person."
                    }
                }
            },
            "put": {
                "tags": [
                    "People (Profile)"
                ],
                "summary": "Updates a person.",
                "operationId": "58bf02d758fb600fbc5b9029cdb3bcd3",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.person.fields"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The person ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.person.updateRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.person"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Person with that ID doesn't exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Person with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that person."
                    }
                }
            },
            "delete": {
                "tags": [
                    "People (Profile)"
                ],
                "summary": "Deletes a person by ID.",
                "operationId": "9846d4415227b82da2f508aa159c24ff",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The person ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Person with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to delete that person."
                    }
                }
            }
        },
        "/people/{id}/import-email": {
            "post": {
                "tags": [
                    "People (Import Emails)"
                ],
                "summary": "Imports people email.",
                "operationId": "93a526a88a10f7fefbfeeeaae5cf1de7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The person ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.importEmailRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.importEmailResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/people/{id}/emails": {
            "post": {
                "tags": [
                    "People (Emails)"
                ],
                "summary": "Adds a new email address to a person.",
                "operationId": "e52173829e2714445fcc5e0ddb305550",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The person ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The body for creating emails.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.person.emailStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.email"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item or note with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that person."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/people/{id}/emails/{emailId}": {
            "put": {
                "tags": [
                    "People (Emails)"
                ],
                "summary": "Updates an email address on a person.",
                "operationId": "82e04953cfdba7fb72c5591febc81e99",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The person ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "emailId",
                        "in": "path",
                        "description": "The ID of the email to be updated.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "The old email that should be changed. Can be used instead of the `emailId` in the url.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "me@example.com"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The body for creating emails.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.person.emailStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.email"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item or note with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to update that person."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "People (Emails)"
                ],
                "summary": "Deletes an email address from a person.",
                "operationId": "b9c9ccbd8894c16c94ad8cbe0a5ced55",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The person ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "emailId",
                        "in": "path",
                        "description": "The ID of the email to be deleted.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "The old email that should be removed. Can be used instead of the `emailId` in the url.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "me@example.com"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "successful operation."
                    },
                    "404": {
                        "description": "Item or note with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to update that person."
                    }
                }
            }
        },
        "/people/{id}/phones": {
            "post": {
                "tags": [
                    "People (Phones)"
                ],
                "summary": "Adds a new phone number to a person.",
                "operationId": "e74093fd6540f411916f0f473561023a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The person ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The body for creating phone numbers.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.person.phoneStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.phone"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item or note with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that person."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/people/{id}/phones/{phoneId}": {
            "put": {
                "tags": [
                    "People (Phones)"
                ],
                "summary": "Updates an phone number on a person.",
                "operationId": "a0dbe824e67a8911564ace222a57df25",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The person ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "phoneId",
                        "in": "path",
                        "description": "The ID of the phone number to be updated.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The body for creating phone numbers.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.person.phoneStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.phone"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item or note with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to update that person."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "People (Phones)"
                ],
                "summary": "Deletes an phone number from a person.",
                "operationId": "a027e34bf266d59025bbeff83a6e9b36",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The person ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "phoneId",
                        "in": "path",
                        "description": "The ID of the phone number to be deleted.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item or note with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to update that person."
                    }
                }
            }
        },
        "/assignments/{id}/candidates/statuses": {
            "post": {
                "tags": [
                    "Projects (Candidates)"
                ],
                "summary": "Adds pipeline tags to candidates.",
                "operationId": "c3fd24521152419a14bbac0e0eac4d3a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The assignment ID.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The body for adding pipeline tags to candidates.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.person.pipelineUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.person.pipelineUpdateResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The assignment, people, or tags specified do not exist."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Projects (Candidates)"
                ],
                "summary": "Removes pipeline tags from candidates.",
                "operationId": "ec44db33b7e03b4361486a4b230be37b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The assignment ID.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The body for removing pipeline tags from candidates.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.person.pipelineUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.person.pipelineUpdateResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The assignment, people, or tags specified do not exist."
                    }
                }
            }
        },
        "/relationships": {
            "get": {
                "tags": [
                    "Relationships"
                ],
                "summary": "Fetches relationships for a particular type.",
                "description": "Display a listing of the resource.",
                "operationId": "4c5e5cb00b6235feb92f873bb8491e15",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "The id of the model type to get relationships for.",
                        "schema": {
                            "type": "integer"
                        },
                        "example": "123"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The model type to get relationships for.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "person",
                                "company",
                                "assignment",
                                "opportunity",
                                "list"
                            ]
                        },
                        "example": "person"
                    },
                    {
                        "name": "relatedType",
                        "in": "query",
                        "description": "The relationship type to be returned. Exclude to return all relationship types",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "person",
                                "company",
                                "assignment",
                                "opportunity",
                                "list"
                            ]
                        },
                        "example": "company"
                    },
                    {
                        "$ref": "#/components/parameters/api.page"
                    },
                    {
                        "$ref": "#/components/parameters/api.count"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.relationships"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Relationships"
                ],
                "summary": "Creates a new relationship",
                "description": "Store a newly created resource in storage.",
                "operationId": "ff5cad1d0efd5c88ffec8072edd77491",
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.relationships.storeDeleteRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.relationships.single"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that project."
                    }
                }
            }
        },
        "/relationships/{id}": {
            "put": {
                "tags": [
                    "Relationships"
                ],
                "summary": "Updates a relationship",
                "description": "Update the specified resource in storage.",
                "operationId": "7a9bff3fd5e77c345dd66ac4f28e88ed",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The relationship ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.relationships.updateRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.relationships.single"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that project."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Relationships"
                ],
                "summary": "Deletes a relationship",
                "description": "Remove the specified resource from storage.",
                "operationId": "cafc51f99f6f0cbd946ba943df4b385a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The relationship ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.relationships.storeDeleteRequest"
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that project."
                    }
                }
            }
        },
        "/statuses/{type}": {
            "get": {
                "tags": [
                    "Status tags"
                ],
                "summary": "Fetches all status tags of a particular type.",
                "description": "The authorization is done in the methods as the actions are shared\nbetween the different model types.",
                "operationId": "cef4171f8c4988ab6dc473881c071e5b",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "The type of tag.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "assignment",
                                "list",
                                "candidate",
                                "lead",
                                "person",
                                "opportunity",
                                "client",
                                "task",
                                "meeting",
                                "revenue",
                                "invoice",
                                "note"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.status"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/people/tags": {
            "post": {
                "tags": [
                    "People (Status tags)",
                    "Status tags"
                ],
                "summary": "Adds tags to people.",
                "operationId": "3e15d8c0842370746915ce99385e90bc",
                "requestBody": {
                    "description": "The body for adding tags to people.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.person.tagsUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.person.tagsUpdateResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The people or tags specified do not exist."
                    }
                }
            },
            "delete": {
                "tags": [
                    "People (Status tags)",
                    "Status tags"
                ],
                "summary": "Removes tags from people.",
                "operationId": "1ae5175ea760ef89d5432a3c411ae29f",
                "requestBody": {
                    "description": "The body for removing tags from people.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.person.tagsUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.person.tagsUpdateResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The people or tags specified do not exist."
                    }
                }
            }
        },
        "/{type}/{id}/tasks": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Retrieves all tasks for an item.",
                "operationId": "bff4453c4eeb9aa5fbf1597df171f672",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "The type of item query.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "companies",
                                "projects",
                                "people"
                            ]
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The item ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "parameter": "api.task.fields",
                        "name": "fields",
                        "in": "query",
                        "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down request.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/api.task.field"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.task"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    }
                }
            }
        },
        "/graph/connected": {
            "get": {
                "tags": [
                    "Meetings"
                ],
                "summary": "Fetches Microsoft Graph details on connected accounts.",
                "operationId": "cf3907536737745db990863ab052666c",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.graph"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/projects/{id}/candidates": {
            "get": {
                "tags": [
                    "Projects (Candidates)"
                ],
                "summary": "Fetches candidates from a specific assignment.",
                "operationId": "82a8a8a78e03de2a594d778429f6af84",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The assignment ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/api.query"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.filterOn"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.fieldsWithCandidate"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.exclude"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.counts"
                    },
                    {
                        "$ref": "#/components/parameters/api.page"
                    },
                    {
                        "$ref": "#/components/parameters/api.from"
                    },
                    {
                        "$ref": "#/components/parameters/api.to"
                    },
                    {
                        "$ref": "#/components/parameters/api.count"
                    },
                    {
                        "$ref": "#/components/parameters/api.sortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.since"
                    },
                    {
                        "$ref": "#/components/parameters/api.before"
                    },
                    {
                        "$ref": "#/components/parameters/api.between"
                    },
                    {
                        "$ref": "#/components/parameters/api.fuzzy"
                    },
                    {
                        "$ref": "#/components/parameters/api.tags"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.onCompanies"
                    },
                    {
                        "name": "withPinned",
                        "in": "query",
                        "description": "By setting this parameter pinned lists will be returned first in the response.",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.person"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/assignments/candidates": {
            "post": {
                "tags": [
                    "Projects (Candidates)"
                ],
                "summary": "Adds a person as a candidate to an assignment.",
                "operationId": "f385f1fd2044ed4a60e5475e9294dc3b",
                "requestBody": {
                    "description": "The body for adding candidates to assignments.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.person.candidatesUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.person.candidatesUpdateResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The people or the assignment cannot be found."
                    }
                }
            }
        },
        "/lists/{id}/people": {
            "get": {
                "tags": [
                    "Lists",
                    "People (Lists)"
                ],
                "summary": "Fetches all people in a list.",
                "operationId": "b64b1a9828aa24d27ec77db7827ed52f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the list.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "$ref": "#/components/parameters/api.query"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.filterOn"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.fields"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.exclude"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.counts"
                    },
                    {
                        "$ref": "#/components/parameters/api.page"
                    },
                    {
                        "$ref": "#/components/parameters/api.from"
                    },
                    {
                        "$ref": "#/components/parameters/api.to"
                    },
                    {
                        "$ref": "#/components/parameters/api.count"
                    },
                    {
                        "$ref": "#/components/parameters/api.sortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/api.list.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.since"
                    },
                    {
                        "$ref": "#/components/parameters/api.before"
                    },
                    {
                        "$ref": "#/components/parameters/api.between"
                    },
                    {
                        "$ref": "#/components/parameters/api.view"
                    },
                    {
                        "$ref": "#/components/parameters/api.withArchived"
                    },
                    {
                        "$ref": "#/components/parameters/api.archived"
                    },
                    {
                        "$ref": "#/components/parameters/api.fuzzy"
                    },
                    {
                        "$ref": "#/components/parameters/api.tags"
                    },
                    {
                        "$ref": "#/components/parameters/api.lead.status"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.person"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/lists/{listId}/people/{personId}": {
            "put": {
                "tags": [
                    "Lists",
                    "People (Lists)"
                ],
                "summary": "Add a person to a list.",
                "operationId": "590ff0de00979a4537499a27783133d5",
                "parameters": [
                    {
                        "name": "listId",
                        "in": "path",
                        "description": "The ID of the list.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "personId",
                        "in": "path",
                        "description": "The person ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.list"
                                        },
                                        "meta": {
                                            "properties": {
                                                "person": {
                                                    "$ref": "#/components/schemas/api.person"
                                                },
                                                "updated": {
                                                    "$ref": "#/components/schemas/api.listPeopleUpdateResponse"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Lists",
                    "People (Lists)"
                ],
                "summary": "Remove a person from a list.",
                "operationId": "7dea12747cd06ac8c92fd42b8b09f0d8",
                "parameters": [
                    {
                        "name": "listId",
                        "in": "path",
                        "description": "The ID of the list.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "personId",
                        "in": "path",
                        "description": "The person ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.list"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    }
                }
            }
        },
        "/opportunities/{id}/completion": {
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Adds a completion percentage to an opportunity",
                "operationId": "ef9688d0320fa821a05c4e479d488bde",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The opportunity ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The body for adding a completion percentage to an opportunity",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.opportunities.completion.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.project.default"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Opportunity with that ID does not exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to update that opportunity."
                    }
                }
            }
        },
        "/projects": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches all projects.",
                "operationId": "3d82da016414ce1c0fe1b20a5bcc95b1",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.query"
                    },
                    {
                        "$ref": "#/components/parameters/api.project.filterOn"
                    },
                    {
                        "$ref": "#/components/parameters/api.project.fields"
                    },
                    {
                        "$ref": "#/components/parameters/api.project.exclude"
                    },
                    {
                        "$ref": "#/components/parameters/api.project.counts"
                    },
                    {
                        "$ref": "#/components/parameters/api.page"
                    },
                    {
                        "$ref": "#/components/parameters/api.from"
                    },
                    {
                        "$ref": "#/components/parameters/api.to"
                    },
                    {
                        "$ref": "#/components/parameters/api.count"
                    },
                    {
                        "$ref": "#/components/parameters/api.sortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/api.project.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.since"
                    },
                    {
                        "$ref": "#/components/parameters/api.before"
                    },
                    {
                        "$ref": "#/components/parameters/api.between"
                    },
                    {
                        "$ref": "#/components/parameters/api.view"
                    },
                    {
                        "$ref": "#/components/parameters/api.withArchived"
                    },
                    {
                        "$ref": "#/components/parameters/api.archived"
                    },
                    {
                        "$ref": "#/components/parameters/api.fuzzy"
                    },
                    {
                        "$ref": "#/components/parameters/api.tags"
                    },
                    {
                        "name": "withPinned",
                        "in": "query",
                        "description": "By setting this parameter pinned lists will be returned first in the response.",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "isAssignment",
                        "in": "query",
                        "description": "By setting this parameter only assignments will be returned in the response.",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "isOpportunity",
                        "in": "query",
                        "description": "By setting this parameter only opportunities will be returned in the response.",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.project.default"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Creates a project",
                "description": "Store a newly created resource in storage.",
                "operationId": "ba9671c3857516158e750d3962336da4",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.project.fields"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.project.storeRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.project.default"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/projects/{id}": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches a project by ID",
                "operationId": "cb6f217e02c38c6e46a8271fabd15be9",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.project.fields"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.project.default"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project with that ID does not exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that project."
                    }
                }
            },
            "put": {
                "tags": [
                    "Projects"
                ],
                "summary": "Updates a project",
                "description": "Update the specified resource in storage.",
                "operationId": "9c96ac03d303330802163d0d6cc97807",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.project.fields"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.project.updateRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.project.default"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Company with that ID doesn't exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project with that ID does not exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that project."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Projects"
                ],
                "summary": "Deletes a project by ID",
                "description": "Remove the specified resource from storage.",
                "operationId": "68019086fa8a55cf0b38cdf6e76ca611",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to delete that project."
                    }
                }
            }
        },
        "/lists": {
            "get": {
                "tags": [
                    "Lists"
                ],
                "summary": "Fetches all lists.",
                "operationId": "c43dc9001e7c98e5236e626a04f0b372",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.query"
                    },
                    {
                        "$ref": "#/components/parameters/api.list.fields"
                    },
                    {
                        "$ref": "#/components/parameters/api.page"
                    },
                    {
                        "$ref": "#/components/parameters/api.from"
                    },
                    {
                        "$ref": "#/components/parameters/api.to"
                    },
                    {
                        "$ref": "#/components/parameters/api.count"
                    },
                    {
                        "$ref": "#/components/parameters/api.sortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/api.list.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.since"
                    },
                    {
                        "$ref": "#/components/parameters/api.before"
                    },
                    {
                        "$ref": "#/components/parameters/api.between"
                    },
                    {
                        "$ref": "#/components/parameters/api.view"
                    },
                    {
                        "$ref": "#/components/parameters/api.withArchived"
                    },
                    {
                        "$ref": "#/components/parameters/api.archived"
                    },
                    {
                        "$ref": "#/components/parameters/api.fuzzy"
                    },
                    {
                        "name": "withPinned",
                        "in": "query",
                        "description": "By setting this parameter pinned lists will be returned first in the response.",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.list"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Lists"
                ],
                "summary": "Creates a list",
                "operationId": "7701183af636b02505008493a6d28dd3",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.list.fields"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.list.storeRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.list"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/lists/{id}": {
            "get": {
                "tags": [
                    "Lists"
                ],
                "summary": "Fetches a list by ID",
                "operationId": "89c7fe31a498ee660836c9aeaa306572",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.list.fields"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The list ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.list"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "List with that ID does not exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that list."
                    }
                }
            },
            "put": {
                "tags": [
                    "Lists"
                ],
                "summary": "Updates a list",
                "operationId": "09449ad0f757b2598d1f58ca31de9d8b",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.list.fields"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The list ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.list.storeRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.list"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "List with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that list."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Lists"
                ],
                "summary": "Deletes a list by ID",
                "description": "Remove the specified resource from storage.",
                "operationId": "c757502c81743d33604a170d9adcee48",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The list ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "404": {
                        "description": "List with that ID doesn't exist."
                    }
                }
            }
        },
        "/relationship-labels": {
            "get": {
                "tags": [
                    "Relationships"
                ],
                "summary": "Fetches relationship labels.",
                "description": "Display a listing of the resource.",
                "operationId": "2086cedcc8284184ba16add2318c9c8a",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.relationshipLabel"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/projects/{projectId}/billing/contact": {
            "get": {
                "tags": [
                    "Billing"
                ],
                "summary": "Fetches the project billing contact",
                "operationId": "aba4e4ef3a884738216ad772e7d25ea5",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.person.default"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project with that ID does not exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that project or that project's billing information."
                    }
                }
            }
        },
        "/projects/{id}/billing/contact": {
            "post": {
                "tags": [
                    "Billing"
                ],
                "summary": "Adds the contact to a project billing.",
                "operationId": "ca8123c80a3dbd1f11436d1920470cb5",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The billing contact body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.billing.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.person.full"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/projects/{id}/billing/contact/{personId}": {
            "delete": {
                "tags": [
                    "Billing"
                ],
                "summary": "Removes the contact from project billing.",
                "operationId": "02424f11bb733713e164754f9be893c2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "personId",
                        "in": "path",
                        "description": "The person ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/fixed-fees": {
            "get": {
                "tags": [
                    "Billing (Fixed Fees)"
                ],
                "summary": "Fetches all fixed fees.",
                "operationId": "7d725054f7b43b73975940a4202fef7a",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.query"
                    },
                    {
                        "$ref": "#/components/parameters/api.feeSplits.filterOn"
                    },
                    {
                        "$ref": "#/components/parameters/api.page"
                    },
                    {
                        "$ref": "#/components/parameters/api.from"
                    },
                    {
                        "$ref": "#/components/parameters/api.to"
                    },
                    {
                        "$ref": "#/components/parameters/api.count"
                    },
                    {
                        "$ref": "#/components/parameters/api.sortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/api.feeSplits.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.since"
                    },
                    {
                        "$ref": "#/components/parameters/api.before"
                    },
                    {
                        "$ref": "#/components/parameters/api.between"
                    },
                    {
                        "$ref": "#/components/parameters/api.tags"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.billing.feeSplit"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/projects/{id}/fixed-fees": {
            "get": {
                "tags": [
                    "Billing (Fixed Fees)"
                ],
                "summary": "Fetches all fixed fees by project ID.",
                "description": "Display a listing of the resource.",
                "operationId": "6c3a645be81b4eecd3cb1352a0bd2f1c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.billing.feeSplit"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Revenue with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that revenue."
                    }
                }
            },
            "post": {
                "tags": [
                    "Billing (Fixed Fees)"
                ],
                "summary": "Adds new fixed fee to billing.",
                "operationId": "7625faeba4e0a507f4a6b37deca2158a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The fixed fee body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.fixedFee.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.billing.feeSplit"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/fixed-fees/{fixedFeeId}": {
            "get": {
                "tags": [
                    "Billing (Fixed Fees)"
                ],
                "summary": "Fetches a fixed fee by ID.",
                "description": "Display the specified resource.",
                "operationId": "68eb8e545acec8db539e6397e1621609",
                "parameters": [
                    {
                        "name": "fixedFeeId",
                        "in": "path",
                        "description": "The fixed fee ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.billing.feeSplit"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Revenue with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that revenue."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Billing (Fixed Fees)"
                ],
                "summary": "Deletes fixed fee item.",
                "operationId": "c17c3813bd58ab9cd8874ce02ed9c3d9",
                "parameters": [
                    {
                        "name": "fixedFeeId",
                        "in": "path",
                        "description": "The fixed fee ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Fixed fee with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/projects/{id}/fixed-fees/{fixedFeeId}": {
            "put": {
                "tags": [
                    "Billing (Fixed Fees)"
                ],
                "summary": "Updates a fixed fee.",
                "operationId": "8861242e38a85990576d8644ad1925ee",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "fixedFeeId",
                        "in": "path",
                        "description": "The fixed fee ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The invoice body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.fixedFee.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.billing.feeSplit"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/fixed-fees/{fixedFeeId}/lock": {
            "put": {
                "tags": [
                    "Billing (Fixed Fees)"
                ],
                "summary": "Locks a fixed fee.",
                "description": "Lock fixed fee",
                "operationId": "14e2bd826e23d3c031ebd482d2d8197c",
                "parameters": [
                    {
                        "name": "fixedFeeId",
                        "in": "path",
                        "description": "The fixed fee ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The invoice body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.fixedFee.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.billing.feeSplit"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    }
                }
            }
        },
        "/fixed-fees/{fixedFeeId}/unlock": {
            "put": {
                "tags": [
                    "Billing (Fixed Fees)"
                ],
                "summary": "Unlocks a fixed fee.",
                "description": "Update the specified resource in storage.",
                "operationId": "ba0424cad93c9b5e263b64e7d9d90e5d",
                "parameters": [
                    {
                        "name": "fixedFeeId",
                        "in": "path",
                        "description": "The fixed fee ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The invoice body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.fixedFee.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.billing.feeSplit"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    }
                }
            }
        },
        "/invoices": {
            "get": {
                "tags": [
                    "Billing (Invoices)"
                ],
                "summary": "Fetches all invoices.",
                "operationId": "4ab17e72650e9da129cab8b753f1e578",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.query"
                    },
                    {
                        "$ref": "#/components/parameters/api.invoice.filterOn"
                    },
                    {
                        "$ref": "#/components/parameters/api.page"
                    },
                    {
                        "$ref": "#/components/parameters/api.from"
                    },
                    {
                        "$ref": "#/components/parameters/api.to"
                    },
                    {
                        "$ref": "#/components/parameters/api.count"
                    },
                    {
                        "$ref": "#/components/parameters/api.sortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/api.invoice.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.since"
                    },
                    {
                        "$ref": "#/components/parameters/api.before"
                    },
                    {
                        "$ref": "#/components/parameters/api.between"
                    },
                    {
                        "$ref": "#/components/parameters/api.tags"
                    },
                    {
                        "$ref": "#/components/parameters/api.invoice.fields"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.invoice.default"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/invoices/{id}": {
            "get": {
                "tags": [
                    "Billing (Invoices)"
                ],
                "summary": "Fetches a invoice by ID.",
                "description": "Display the specified resource.",
                "operationId": "6cba6798e72ac072a736ee1e72823890",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The invoice ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "$ref": "#/components/parameters/api.invoice.fields"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.invoice.default"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invoice with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that invoice."
                    }
                }
            }
        },
        "/projects/{id}/invoices": {
            "post": {
                "tags": [
                    "Billing (Invoices)"
                ],
                "summary": "Adds invoice to billing.",
                "operationId": "8101eac0a334a357fdc6e1bafe189acc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The item ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The invoice body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.invoice.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.invoice.default"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/projects/{id}/invoices/{invoiceId}": {
            "put": {
                "tags": [
                    "Billing (Invoices)"
                ],
                "summary": "Updates an invoice.",
                "description": "Update the specified resource in storage.",
                "operationId": "9207f94807bf50ad1dee6dd972d7fbbc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The item ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "invoiceId",
                        "in": "path",
                        "description": "The ID of the invoice.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The invoice body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.invoice.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.invoice.default"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/invoices/{invoiceId}": {
            "delete": {
                "tags": [
                    "Billing (Invoices)"
                ],
                "summary": "Deletes an invoice by ID.",
                "operationId": "b7d4f8adacfd94a4945471502e45b300",
                "parameters": [
                    {
                        "name": "invoiceId",
                        "in": "path",
                        "description": "The ID of the invoice.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invoice with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/invoices/{invoiceId}/lock": {
            "put": {
                "tags": [
                    "Billing (Invoices)"
                ],
                "summary": "Locks an invoice.",
                "operationId": "23e59676dc5829f9f4c4441ce7c3f777",
                "parameters": [
                    {
                        "name": "invoiceId",
                        "in": "path",
                        "description": "The ID of the invoice.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.lockInvoice"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.invoice.default"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/invoices/{invoiceId}/unlock": {
            "put": {
                "tags": [
                    "Billing (Invoices)"
                ],
                "summary": "Unlocks an invoice.",
                "operationId": "d25b17ff6f7b214d0268323ebf1ba5dc",
                "parameters": [
                    {
                        "name": "invoiceId",
                        "in": "path",
                        "description": "The ID of the invoice.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.invoice.default"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/percent-splits": {
            "get": {
                "tags": [
                    "Billing (Percent Splits)"
                ],
                "summary": "Fetches all percent splits.",
                "operationId": "769b01272f5f014d1f61fd7f8b415844",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.query"
                    },
                    {
                        "$ref": "#/components/parameters/api.feeSplits.filterOn"
                    },
                    {
                        "$ref": "#/components/parameters/api.page"
                    },
                    {
                        "$ref": "#/components/parameters/api.from"
                    },
                    {
                        "$ref": "#/components/parameters/api.to"
                    },
                    {
                        "$ref": "#/components/parameters/api.count"
                    },
                    {
                        "$ref": "#/components/parameters/api.sortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/api.feeSplits.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.since"
                    },
                    {
                        "$ref": "#/components/parameters/api.before"
                    },
                    {
                        "$ref": "#/components/parameters/api.between"
                    },
                    {
                        "$ref": "#/components/parameters/api.tags"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.billing.feeSplit"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/revenues": {
            "get": {
                "tags": [
                    "Billing (Revenues)"
                ],
                "summary": "Fetches all revenues.",
                "operationId": "679e776ae4b1d5676bc22be65c2ba536",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.query"
                    },
                    {
                        "$ref": "#/components/parameters/api.revenue.filterOn"
                    },
                    {
                        "$ref": "#/components/parameters/api.page"
                    },
                    {
                        "$ref": "#/components/parameters/api.from"
                    },
                    {
                        "$ref": "#/components/parameters/api.to"
                    },
                    {
                        "$ref": "#/components/parameters/api.count"
                    },
                    {
                        "$ref": "#/components/parameters/api.sortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/api.revenue.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.since"
                    },
                    {
                        "$ref": "#/components/parameters/api.before"
                    },
                    {
                        "$ref": "#/components/parameters/api.between"
                    },
                    {
                        "$ref": "#/components/parameters/api.tags"
                    },
                    {
                        "$ref": "#/components/parameters/api.revenue.fields"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.billing.revenue"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/revenues/{id}": {
            "get": {
                "tags": [
                    "Billing (Revenues)"
                ],
                "summary": "Fetches a revenue by ID.",
                "description": "Display the specified resource.",
                "operationId": "fc2a226c98096ee6348be2d305db2d2d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The revenue ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "$ref": "#/components/parameters/api.revenue.fields"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.billing.revenue"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Revenue with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that revenue."
                    }
                }
            }
        },
        "/projects/{projectId}/revenues": {
            "post": {
                "tags": [
                    "Billing (Revenues)"
                ],
                "summary": "Creates a revenue.",
                "operationId": "dc578efbb785f66dcd9c2ac4e793fbb9",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The ID of the project",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.revenueStore"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.billing.revenue"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/projects/{projectId}/revenues/{revenueId}": {
            "put": {
                "tags": [
                    "Billing (Revenues)"
                ],
                "summary": "Updates a revenue",
                "operationId": "c34bba2c7ab4015ffbdf252458c847ee",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The ID of the project",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "revenueId",
                        "in": "path",
                        "description": "The ID of the revenue",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.revenueStore"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.billing.revenue"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/revenues/{revenueId}": {
            "delete": {
                "tags": [
                    "Billing (Revenues)"
                ],
                "summary": "Deletes revenue item.",
                "operationId": "20f61b584e80543f3c1e283872189eba",
                "parameters": [
                    {
                        "name": "revenueId",
                        "in": "path",
                        "description": "The revenue ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item or note with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/revenues/{revenueId}/lock": {
            "put": {
                "tags": [
                    "Billing (Revenues)"
                ],
                "summary": "Locks a revenue.",
                "description": "Lock revenue",
                "operationId": "163fa29bd60a19f7565f02a6a93405cd",
                "parameters": [
                    {
                        "name": "revenueId",
                        "in": "path",
                        "description": "The ID of the revenue.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.billing.revenue"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/revenues/{revenueId}/unlock": {
            "put": {
                "tags": [
                    "Billing (Revenues)"
                ],
                "summary": "Unlocks a revenue.",
                "description": "Unlock revenue",
                "operationId": "32c06d5b43fe61d903d1e6111c20b4cb",
                "parameters": [
                    {
                        "name": "revenueId",
                        "in": "path",
                        "description": "The ID of the revenue.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.billing.revenue"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/invoice-templates": {
            "get": {
                "tags": [
                    "Billing (Invoices)"
                ],
                "summary": "Fetches all the invoice templates.",
                "description": "Display a listing of the resource.",
                "operationId": "bf57e995d94bdb0228e92a0814623e0b",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.query"
                    },
                    {
                        "$ref": "#/components/parameters/api.revenue.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.sortOrder"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.invoiceTemplate"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/search-users": {
            "get": {
                "tags": [
                    "Search Firm Users"
                ],
                "summary": "Fetches all users for the search firm",
                "operationId": "cd8dd5192b5dba083d60c194397d209e",
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "description": "A query string to filter the results by name or email.",
                        "schema": {
                            "type": "string"
                        },
                        "example": "Jane Doe"
                    },
                    {
                        "parameter": "api.page",
                        "name": "page",
                        "in": "query",
                        "description": "Specify the page of items to be returned",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "parameter": "api.count",
                        "name": "count",
                        "in": "query",
                        "description": "Specify how many records to be returned per page.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.researcher"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/custom-fields/{type}/": {
            "get": {
                "tags": [
                    "Custom Fields"
                ],
                "summary": "Retrieves all custom fields of a particular type",
                "operationId": "94b3019d1dd549c55ad09c0ac0e2d42d",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "The type of item query.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "companies",
                                "projects",
                                "people"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.searchFirmCustomField"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    }
                }
            }
        },
        "/custom-fields/{type}/{fieldId}": {
            "get": {
                "tags": [
                    "Custom Fields"
                ],
                "summary": "Retrieves a custom field by ID",
                "operationId": "c5cbcf595e6a1b7bdcf57a4805e2f667",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "The type of item query.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "companies",
                                "projects",
                                "people"
                            ]
                        }
                    },
                    {
                        "name": "fieldId",
                        "in": "path",
                        "description": "The custom field ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.searchFirmCustomField"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    }
                }
            }
        },
        "/{type}/{id}/status/{statusId}": {
            "post": {
                "tags": [
                    "Status tags"
                ],
                "summary": "Adds or updates a status for an item.",
                "operationId": "dccacbadd43f297af6d301e11d72f52f",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "The type of model to update.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "projects",
                                "assignments",
                                "opportunities",
                                "companies"
                            ]
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The item ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "statusId",
                        "in": "path",
                        "description": "The ID of the status to be updated",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Item or status with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to update that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/clients": {
            "get": {
                "tags": [
                    "Clients"
                ],
                "summary": "Fetches all clients.",
                "operationId": "1c8b1f7fc55996a47d9447f7c8b050ae",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.query"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.filterOn"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.fields"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.exclude"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.counts"
                    },
                    {
                        "$ref": "#/components/parameters/api.sortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/api.count"
                    },
                    {
                        "$ref": "#/components/parameters/api.from"
                    },
                    {
                        "$ref": "#/components/parameters/api.to"
                    },
                    {
                        "$ref": "#/components/parameters/api.since"
                    },
                    {
                        "$ref": "#/components/parameters/api.before"
                    },
                    {
                        "$ref": "#/components/parameters/api.between"
                    },
                    {
                        "$ref": "#/components/parameters/api.view"
                    },
                    {
                        "$ref": "#/components/parameters/api.withArchived"
                    },
                    {
                        "$ref": "#/components/parameters/api.archived"
                    },
                    {
                        "$ref": "#/components/parameters/api.fuzzy"
                    },
                    {
                        "$ref": "#/components/parameters/api.tags"
                    },
                    {
                        "name": "withPinned",
                        "in": "query",
                        "description": "By setting this parameter pinned clients will be returned first in the response.",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.company"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/companies": {
            "get": {
                "tags": [
                    "Companies"
                ],
                "summary": "Fetches all companies.",
                "operationId": "489d7330cd4e19f84b5a34475957b1c7",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.query"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.filterOn"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.fields"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.exclude"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.counts"
                    },
                    {
                        "$ref": "#/components/parameters/api.sortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/api.page"
                    },
                    {
                        "$ref": "#/components/parameters/api.count"
                    },
                    {
                        "$ref": "#/components/parameters/api.from"
                    },
                    {
                        "$ref": "#/components/parameters/api.to"
                    },
                    {
                        "$ref": "#/components/parameters/api.since"
                    },
                    {
                        "$ref": "#/components/parameters/api.before"
                    },
                    {
                        "$ref": "#/components/parameters/api.between"
                    },
                    {
                        "$ref": "#/components/parameters/api.view"
                    },
                    {
                        "$ref": "#/components/parameters/api.withArchived"
                    },
                    {
                        "$ref": "#/components/parameters/api.archived"
                    },
                    {
                        "$ref": "#/components/parameters/api.fuzzy"
                    },
                    {
                        "$ref": "#/components/parameters/api.tags"
                    },
                    {
                        "name": "withPinned",
                        "in": "query",
                        "description": "By setting this parameter pinned companies will be returned first in the response.",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.company"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Companies"
                ],
                "summary": "Creates a company",
                "operationId": "beafc7eae26fbcbc9ef0916edc9985f3",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.company.fields"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.v2.company.storeRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.company"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/companies/{id}": {
            "get": {
                "tags": [
                    "Companies"
                ],
                "summary": "Fetches a company by ID",
                "operationId": "bf73d34cfdea3ce3e55331bd4cf9dc40",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.company.fields"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The company ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.company"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Company with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that company."
                    }
                }
            },
            "put": {
                "tags": [
                    "Companies"
                ],
                "summary": "Updates a company",
                "operationId": "211aca6588b6970df81fa71299d4af57",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.company.fields"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The company ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.v2.company.updateRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.company"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Company with that ID doesn't exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Company with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that company."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Companies"
                ],
                "summary": "Deletes a company by ID",
                "operationId": "30847a881be25f200d8cfdb2b65b3456",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The company ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Company with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to delete that company."
                    }
                }
            }
        },
        "/v2/lists/{id}/people": {
            "get": {
                "tags": [
                    "Lists",
                    "People (Lists)"
                ],
                "summary": "Fetches all people in a list.",
                "operationId": "46ad47be3166f21937b41be6d834a77e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the list.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "$ref": "#/components/parameters/api.query"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.filterOn"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.fields"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.exclude"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.counts"
                    },
                    {
                        "$ref": "#/components/parameters/api.page"
                    },
                    {
                        "$ref": "#/components/parameters/api.from"
                    },
                    {
                        "$ref": "#/components/parameters/api.to"
                    },
                    {
                        "$ref": "#/components/parameters/api.count"
                    },
                    {
                        "$ref": "#/components/parameters/api.sortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/api.list.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.since"
                    },
                    {
                        "$ref": "#/components/parameters/api.before"
                    },
                    {
                        "$ref": "#/components/parameters/api.between"
                    },
                    {
                        "$ref": "#/components/parameters/api.view"
                    },
                    {
                        "$ref": "#/components/parameters/api.withArchived"
                    },
                    {
                        "$ref": "#/components/parameters/api.archived"
                    },
                    {
                        "$ref": "#/components/parameters/api.fuzzy"
                    },
                    {
                        "$ref": "#/components/parameters/api.tags"
                    },
                    {
                        "$ref": "#/components/parameters/api.lead.status"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.isCandidate"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.onCompanies"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.v2.person"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/lists/{listId}/people/{personId}": {
            "put": {
                "tags": [
                    "Lists",
                    "People (Lists)"
                ],
                "summary": "Add a person to a list.",
                "operationId": "0867ca8fc41337221329d19896e90df2",
                "parameters": [
                    {
                        "name": "listId",
                        "in": "path",
                        "description": "The ID of the list.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "personId",
                        "in": "path",
                        "description": "The person ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.list"
                                        },
                                        "meta": {
                                            "properties": {
                                                "person": {
                                                    "$ref": "#/components/schemas/api.v2.person"
                                                },
                                                "updated": {
                                                    "$ref": "#/components/schemas/api.listPeopleUpdateResponse"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Lists",
                    "People (Lists)"
                ],
                "summary": "Remove a person from a list.",
                "operationId": "5c0f62863def83cd4ceda8b3d3d25db2",
                "parameters": [
                    {
                        "name": "listId",
                        "in": "path",
                        "description": "The ID of the list.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "personId",
                        "in": "path",
                        "description": "The person ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.list"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    }
                }
            }
        },
        "/v2/categories/{category}": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Fetches category values of a particular type by id or search term.",
                "operationId": "103fc3201b59f08e5ba2215153d811d7",
                "parameters": [
                    {
                        "name": "category",
                        "in": "path",
                        "description": "The category type.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "careers",
                                "industries",
                                "locations"
                            ]
                        }
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "description": "The category value search term.",
                        "schema": {
                            "type": "string",
                            "example": "Chief Technology Officer"
                        }
                    },
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "A list of comma separated IDs.",
                        "schema": {
                            "type": "string",
                            "example": "1,2,3,4"
                        }
                    },
                    {
                        "name": "levels",
                        "in": "query",
                        "description": "Available on locations only. 0=Continent, 1=Country, 2=State, 3=City.",
                        "schema": {
                            "type": "integer",
                            "example": "3"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.category"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/projects/{id}/candidates": {
            "get": {
                "tags": [
                    "Projects (Candidates)"
                ],
                "summary": "Fetches candidates from a specific project.",
                "operationId": "0c3fd8e67a16136f4da4eac4a7fef613",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/api.query"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.filterOn"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.fieldsWithCandidate"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.exclude"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.counts"
                    },
                    {
                        "$ref": "#/components/parameters/api.page"
                    },
                    {
                        "$ref": "#/components/parameters/api.from"
                    },
                    {
                        "$ref": "#/components/parameters/api.to"
                    },
                    {
                        "$ref": "#/components/parameters/api.count"
                    },
                    {
                        "$ref": "#/components/parameters/api.sortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.since"
                    },
                    {
                        "$ref": "#/components/parameters/api.before"
                    },
                    {
                        "$ref": "#/components/parameters/api.between"
                    },
                    {
                        "$ref": "#/components/parameters/api.fuzzy"
                    },
                    {
                        "$ref": "#/components/parameters/api.tags"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.onCompanies"
                    },
                    {
                        "name": "withPinned",
                        "in": "query",
                        "description": "By setting this parameter pinned lists will be returned first in the response.",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.v2.person"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/assignments/candidates": {
            "post": {
                "tags": [
                    "Projects (Candidates)"
                ],
                "summary": "Adds a person as a candidate to an assignment.",
                "operationId": "c503455f822d8e60a8645a3e8fa17258",
                "requestBody": {
                    "description": "The body for adding candidates to assignments.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.v2.person.candidatesUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.person.candidatesUpdateResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The people or the assignment cannot be found."
                    }
                }
            }
        },
        "/v2/{type}/{id}/documents/{documentId}": {
            "get": {
                "tags": [
                    "Documents"
                ],
                "summary": "Download documents and attachments.",
                "operationId": "798063f61baca6fb41da0b46ca7f97ff",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "The type of model belonging to the document.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "companies",
                                "assignments",
                                "opportunities",
                                "people",
                                "lists"
                            ]
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The item ID of the model.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "documentId",
                        "in": "path",
                        "description": "The document ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    }
                }
            }
        },
        "/v2/people/{personId}/positions": {
            "get": {
                "tags": [
                    "People (Positions)"
                ],
                "summary": "Gets all positions for a person",
                "operationId": "3cb228d531ac4d9abd3de747e2a55757",
                "parameters": [
                    {
                        "name": "personId",
                        "in": "path",
                        "description": "The ID of the person",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "parameter": "api.person.position.sortBy",
                        "name": "sortBy",
                        "in": "query",
                        "description": "The field that should be used to sort the results.\n    The direction can be specified with the `sortOrder` parameter.",
                        "schema": {
                            "description": "The best match if the `query` parameter is used, otherwise they will be ordered by when they were added to the platform.",
                            "type": "string",
                            "enum": [
                                "createdAt",
                                "updatedAt",
                                "startDate"
                            ],
                            "example": "createdAt"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.v2.person.position"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    }
                }
            },
            "post": {
                "tags": [
                    "People (Positions)"
                ],
                "summary": "Creates a position for a person",
                "operationId": "f172429bffdc0d713f3078aad42e2b09",
                "parameters": [
                    {
                        "name": "personId",
                        "in": "path",
                        "description": "The ID of the person",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The position body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.position.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v2.person.position"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/people/{personId}/positions/{positionId}": {
            "put": {
                "tags": [
                    "People (Positions)"
                ],
                "summary": "Updates a position for a person",
                "operationId": "6f37f12546c20dfa365a5fe8efd94f02",
                "parameters": [
                    {
                        "name": "personId",
                        "in": "path",
                        "description": "The ID of the person",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "positionId",
                        "in": "path",
                        "description": "The ID of the position",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The position body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.position.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v2.person.position"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Position with that ID does not exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to update that person."
                    }
                }
            },
            "delete": {
                "tags": [
                    "People (Positions)"
                ],
                "summary": "Deletes a position for a person",
                "operationId": "ed6449dc29a6a3ee73d888f8bcf619e8",
                "parameters": [
                    {
                        "name": "personId",
                        "in": "path",
                        "description": "The person ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "positionId",
                        "in": "path",
                        "description": "The position ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Position with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to delete that position."
                    }
                }
            }
        },
        "/v2/people": {
            "get": {
                "tags": [
                    "People (Profile)"
                ],
                "summary": "Fetches all people.",
                "operationId": "dab9e6bdf0f460becacf62fc50049e59",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.query"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.filterOn"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.fields"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.exclude"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.counts"
                    },
                    {
                        "$ref": "#/components/parameters/api.page"
                    },
                    {
                        "$ref": "#/components/parameters/api.from"
                    },
                    {
                        "$ref": "#/components/parameters/api.to"
                    },
                    {
                        "$ref": "#/components/parameters/api.count"
                    },
                    {
                        "$ref": "#/components/parameters/api.sortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.since"
                    },
                    {
                        "$ref": "#/components/parameters/api.before"
                    },
                    {
                        "$ref": "#/components/parameters/api.between"
                    },
                    {
                        "$ref": "#/components/parameters/api.view"
                    },
                    {
                        "$ref": "#/components/parameters/api.fuzzy"
                    },
                    {
                        "$ref": "#/components/parameters/api.tags"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.isCandidate"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.onCompanies"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.v2.person"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "People (Profile)"
                ],
                "summary": "Creates a person.",
                "operationId": "be95fc1479e95254a0792bea58530520",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.person.fields"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.v2.person.storeRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v2.person"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/people/{id}": {
            "get": {
                "tags": [
                    "People (Profile)"
                ],
                "summary": "Fetches a person by ID.",
                "operationId": "8036bee02e23da6ebf42888d3c89a445",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.person.fields"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The person ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v2.person"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Person with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that person."
                    }
                }
            },
            "put": {
                "tags": [
                    "People (Profile)"
                ],
                "summary": "Updates a person.",
                "operationId": "d3ae2dab6224b8ff6b93a7697402d7fb",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.person.fields"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The person ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.v2.person.updateRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v2.person"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Person with that ID doesn't exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Person with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that person."
                    }
                }
            },
            "delete": {
                "tags": [
                    "People (Profile)"
                ],
                "summary": "Deletes a person by ID.",
                "operationId": "86d73f463aae883075c7d58bd83d3ecb",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The person ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Person with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to delete that person."
                    }
                }
            }
        },
        "/v2/projects/{projectId}/billing/contact": {
            "get": {
                "tags": [
                    "Billing"
                ],
                "summary": "Fetches the project billing contact",
                "operationId": "c5e4ac85e0577140867410b46b74ee8a",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v2.person.default"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project with that ID does not exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that project or that project's billing information."
                    }
                }
            }
        },
        "/v2/projects/{id}/billing/contact": {
            "post": {
                "tags": [
                    "Billing"
                ],
                "summary": "Adds the contact to a project billing.",
                "operationId": "628553d0a7e9221d6adbf4b227f541d4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The billing contact body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.billing.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.v2.person.full"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/projects/{id}/billing/contact/{personId}": {
            "delete": {
                "tags": [
                    "Billing"
                ],
                "summary": "Removes the contact from project billing.",
                "operationId": "64433b0eb27666dd264d3e24dcc5c5bb",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "personId",
                        "in": "path",
                        "description": "The person ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/clients": {
            "get": {
                "tags": [
                    "Clients"
                ],
                "summary": "Fetches all clients.",
                "operationId": "b978c0ba8537c0d760a087b39eea3289",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.query"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.filterOn"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.fields"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.exclude"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.counts"
                    },
                    {
                        "$ref": "#/components/parameters/api.sortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/api.count"
                    },
                    {
                        "$ref": "#/components/parameters/api.from"
                    },
                    {
                        "$ref": "#/components/parameters/api.to"
                    },
                    {
                        "$ref": "#/components/parameters/api.ids"
                    },
                    {
                        "$ref": "#/components/parameters/api.since"
                    },
                    {
                        "$ref": "#/components/parameters/api.before"
                    },
                    {
                        "$ref": "#/components/parameters/api.between"
                    },
                    {
                        "$ref": "#/components/parameters/api.view"
                    },
                    {
                        "$ref": "#/components/parameters/api.withArchived"
                    },
                    {
                        "$ref": "#/components/parameters/api.archived"
                    },
                    {
                        "$ref": "#/components/parameters/api.fuzzy"
                    },
                    {
                        "$ref": "#/components/parameters/api.tags"
                    },
                    {
                        "name": "withPinned",
                        "in": "query",
                        "description": "By setting this parameter pinned clients will be returned first in the response.",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.company"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/companies": {
            "get": {
                "tags": [
                    "Companies"
                ],
                "summary": "Fetches all companies.",
                "operationId": "2b00404f8a646c08b9272bbd240ba388",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.query"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.filterOn"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.fields"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.exclude"
                    },
                    {
                        "$ref": "#/components/parameters/api.company.counts"
                    },
                    {
                        "$ref": "#/components/parameters/api.sortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/api.page"
                    },
                    {
                        "$ref": "#/components/parameters/api.count"
                    },
                    {
                        "$ref": "#/components/parameters/api.from"
                    },
                    {
                        "$ref": "#/components/parameters/api.to"
                    },
                    {
                        "$ref": "#/components/parameters/api.ids"
                    },
                    {
                        "$ref": "#/components/parameters/api.since"
                    },
                    {
                        "$ref": "#/components/parameters/api.before"
                    },
                    {
                        "$ref": "#/components/parameters/api.between"
                    },
                    {
                        "$ref": "#/components/parameters/api.view"
                    },
                    {
                        "$ref": "#/components/parameters/api.withArchived"
                    },
                    {
                        "$ref": "#/components/parameters/api.archived"
                    },
                    {
                        "$ref": "#/components/parameters/api.fuzzy"
                    },
                    {
                        "$ref": "#/components/parameters/api.tags"
                    },
                    {
                        "name": "withPinned",
                        "in": "query",
                        "description": "By setting this parameter pinned companies will be returned first in the response.",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.company"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Companies"
                ],
                "summary": "Creates a company",
                "operationId": "4dddc139bac9d0aa85c375fcc323a455",
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.v3.company.storeRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.company"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/companies/{id}": {
            "get": {
                "tags": [
                    "Companies"
                ],
                "summary": "Fetches a company by ID",
                "operationId": "23a26286bc6ba6bd438f82ca44479d8d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The company ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.company"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Company with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that company."
                    }
                }
            },
            "put": {
                "tags": [
                    "Companies"
                ],
                "summary": "Updates a company",
                "operationId": "0c4be9c3ebd518b20bcbd0abe61c600d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The company ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.v3.company.updateRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.company"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Company with that ID doesn't exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Company with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that company."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Companies"
                ],
                "summary": "Deletes a company by ID",
                "operationId": "4f04909b40e976865705925e1c95ee5e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The company ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Company with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to delete that company."
                    }
                }
            }
        },
        "/v3/projects/{id}/actions": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches all Actions from a particular Project.",
                "operationId": "750fbca4dc041b736ec5935356b75cf2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.project.actions"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project with that ID does not exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to update that project."
                    }
                }
            },
            "put": {
                "tags": [
                    "Projects"
                ],
                "summary": "Update Actions",
                "operationId": "590e6e79209daafddfedb883ab198d56",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The body for adding Actions to a project",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.v3.project.action.update"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.project.actions"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project with that ID does not exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to update that project."
                    }
                }
            }
        },
        "/v3/projects/{id}/completion": {
            "put": {
                "tags": [
                    "Projects"
                ],
                "summary": "Updates the completion percentage on a project",
                "operationId": "2d150c67994ec6ce31907a64f64be898",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The body for updating a completion percentage to an project",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.v3.project.completion.updateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.project.default"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project with that ID does not exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to update that project."
                    }
                }
            }
        },
        "/v3/projects/{id}/convert": {
            "put": {
                "tags": [
                    "Projects"
                ],
                "summary": "Convert a project from one type to another",
                "operationId": "451fc6834abfe4a5c9a2bc8961756be8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "convert",
                        "in": "query",
                        "description": "Converted Type",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minimum": 1,
                            "enum": [
                                "assignment",
                                "opportunity",
                                "list"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.v3.project.default"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Project with that ID doesn't exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project with that ID does not exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that project."
                    }
                }
            }
        },
        "/v3/tasks": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Fetches all tasks.",
                "operationId": "1d0a08328117d6e684122b85e83a5e0e",
                "parameters": [
                    {
                        "parameter": "api.page",
                        "name": "page",
                        "in": "query",
                        "description": "Specify the page of items to be returned",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "parameter": "api.order",
                        "name": "order",
                        "in": "query",
                        "description": "Sort order to show results",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    },
                    {
                        "parameter": "api.sort",
                        "name": "sort",
                        "in": "query",
                        "description": "Sort field to order results",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "start_date_utc",
                                "created_at",
                                "updated_at",
                                "title"
                            ]
                        }
                    },
                    {
                        "parameter": "api.done",
                        "name": "done",
                        "in": "query",
                        "description": "Return only completed or active results",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "parameter": "api.overdue",
                        "name": "overdue",
                        "in": "query",
                        "description": "Return only overdue or non-overdue tasks",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "parameter": "api.private",
                        "name": "private",
                        "in": "query",
                        "description": "Return only private or non-private tasks",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "parameter": "api.pinned",
                        "name": "pinned",
                        "in": "query",
                        "description": "Return only private or non-pinned tasks",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "parameter": "api.priority",
                        "name": "priority[]",
                        "in": "query",
                        "description": "Filter tasks by specific priorities",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    1,
                                    2,
                                    3,
                                    4
                                ]
                            }
                        }
                    },
                    {
                        "parameter": "api.v3.task.fields",
                        "name": "fields",
                        "in": "query",
                        "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down request.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/api.v3.task.field"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.v3.task"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Creates a task.",
                "operationId": "a3d619a78658c48946d0c120078f40be",
                "parameters": [
                    {
                        "parameter": "api.v3.task.fields",
                        "name": "fields",
                        "in": "query",
                        "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down request.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/api.v3.task.field"
                            }
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.taskRequestStore"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.v3.task"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that task and they must have the correct 'edit' permissions for any associated context."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/tasks/{id}": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Fetches a task by ID.",
                "operationId": "ca651f81bab12aa60ab1c8172e646c7a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The task ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "parameter": "api.v3.task.fields",
                        "name": "fields",
                        "in": "query",
                        "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down request.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/api.v3.task.field"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.v3.task"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Task with that ID does not exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that task and they must have the correct 'edit' permissions for any associated context."
                    }
                }
            },
            "put": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Updates a task.",
                "operationId": "363321b7f8fca23f090bb88f664871b4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The task ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "parameter": "api.v3.task.fields",
                        "name": "fields",
                        "in": "query",
                        "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down request.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/api.v3.task.field"
                            }
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.taskRequestUpdate"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.task"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that task and they must have the correct 'edit' permissions for any associated context."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Deletes a task.",
                "operationId": "2db416209b0d1575f9d238e779b4c1da",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The task ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Task with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/tasks/{id}/done": {
            "put": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Updates a task's completion status.",
                "operationId": "7ec8e5e9d1568b55d83e629abfc7f763",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The task ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "parameter": "api.v3.task.fields",
                        "name": "fields",
                        "in": "query",
                        "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down request.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/api.v3.task.field"
                            }
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.taskRequestUpdateDone"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.task"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that task and they must have the correct 'edit' permissions for any associated context."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/tasks/{id}/priority": {
            "put": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Updates a task's priority.",
                "operationId": "114b13a52414f97f58d4e1b94f5fddef",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The task ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.taskRequestUpdatePriority"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.task"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that task and they must have the correct 'edit' permissions for any associated context."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/tasks/{id}/pinned": {
            "put": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Updates a task's pinned status.",
                "operationId": "2128043a6a6d970e4d06121eb5afed54",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The task ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.taskRequestUpdatePinned"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.task"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that task and they must have the correct 'edit' permissions for any associated context."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/projects/{project}/billing": {
            "get": {
                "tags": [
                    "Billing"
                ],
                "summary": "Fetches billing information for an item.",
                "operationId": "e46d700831799e4dc0f27e01a2da89fa",
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "The project ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.billing"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    }
                }
            }
        },
        "/v3/projects/{id}/consultants": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches all consultants belonging to a project.",
                "operationId": "43b80cbfa7c22e0558ed03566267b5c6",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.v3.search.user.fields"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.v3.search.user"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Adds a consultant to a project.",
                "operationId": "66649f503dc57a5fd7b08ae7a305cfa5",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.v3.search.user.fields"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.v3.consultant.storeRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.search.user"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/companies/{id}/consultants": {
            "get": {
                "tags": [
                    "Companies"
                ],
                "summary": "Fetches all consultants belonging to a company.",
                "operationId": "8b46cdc627553c6a79f8672e0e95e98b",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.v3.search.user.fields"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.v3.search.user"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Companies"
                ],
                "summary": "Adds a consultant to a company.",
                "operationId": "2e58a116154e80c531e03fd5058090c5",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.v3.search.user.fields"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The company ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.v3.consultant.storeRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.search.user"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/projects/{id}/consultants/{userId}": {
            "delete": {
                "tags": [
                    "Projects"
                ],
                "summary": "Removes a consultant from a project",
                "operationId": "0d73a8363def79f1d3f949c9fa204657",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The consultant ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Consultant with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to perform that action."
                    }
                }
            }
        },
        "/v3/companies/{id}/consultants/{userId}": {
            "delete": {
                "tags": [
                    "Companies"
                ],
                "summary": "Removes a consultant from a company",
                "operationId": "e2cc8a6dee3bd68b7346c51bce29e37b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The company ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The consultant ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Consultant with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to perform that action."
                    }
                }
            }
        },
        "/v3/projects/{id}/contacts": {
            "get": {
                "tags": [
                    "Projects (Contacts)"
                ],
                "summary": "Fetches contacts from a specific project.",
                "operationId": "f679a4bbed7e3c806aa276e341b1116d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/api.query"
                    },
                    {
                        "$ref": "#/components/parameters/api.sortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/api.count"
                    },
                    {
                        "$ref": "#/components/parameters/api.from"
                    },
                    {
                        "$ref": "#/components/parameters/api.to"
                    },
                    {
                        "$ref": "#/components/parameters/api.ids"
                    },
                    {
                        "$ref": "#/components/parameters/api.since"
                    },
                    {
                        "$ref": "#/components/parameters/api.before"
                    },
                    {
                        "$ref": "#/components/parameters/api.between"
                    },
                    {
                        "$ref": "#/components/parameters/api.fuzzy"
                    },
                    {
                        "$ref": "#/components/parameters/api.page"
                    },
                    {
                        "$ref": "#/components/parameters/api.tags"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.filterOn"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.onCompanies"
                    },
                    {
                        "$ref": "#/components/parameters/api.v3.person.fields"
                    },
                    {
                        "$ref": "#/components/parameters/api.v3.person.exclude"
                    },
                    {
                        "$ref": "#/components/parameters/api.v3.person.counts"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.v3.person"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Projects (Contacts)"
                ],
                "summary": "Adds a person as a contact to a project.",
                "operationId": "d767a8145bbe607256a196437be1ff31",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The body for adding contacts to projects.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.v3.projectContactStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.v3.person"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The people or the project cannot be found."
                    }
                }
            }
        },
        "/v3/projects/{id}/contacts/{contactId}": {
            "delete": {
                "tags": [
                    "Projects (Contacts)"
                ],
                "summary": "Removes a person as a contact from a project.",
                "operationId": "2ee999e38041ee7e30a810d17b94ef1d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "contactId",
                        "in": "path",
                        "description": "The contact ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Person or project with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to delete that person."
                    }
                }
            }
        },
        "/v3/projects/{id}/office-groups": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches all office groups belonging to a project.",
                "operationId": "23d7b315ed3b60f18a2d7b03f1502f94",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.v3.officeGroup"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Adds an office group to a project.",
                "operationId": "f246977a16d661aebe7d2ce848bd1f10",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.v3.officeGroup.storeRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.officeGroup"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/companies/{id}/office-groups": {
            "get": {
                "tags": [
                    "Companies"
                ],
                "summary": "Fetches all office groups belonging to a company.",
                "operationId": "2468ce7489b4975bf540a5e9d63940cf",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.v3.officeGroup"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Companies"
                ],
                "summary": "Adds an office group to a company.",
                "operationId": "e52182eea6057df7ede7e9e37447f1bd",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The company ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.v3.officeGroup.storeRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.officeGroup"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/projects/{id}/office-groups/{officeGroupId}": {
            "delete": {
                "tags": [
                    "Projects"
                ],
                "summary": "Removes an office group from a project",
                "operationId": "9cf2e4f64ae706e904872efe03c6c5b6",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "officeGroupId",
                        "in": "path",
                        "description": "The office group ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Consultant with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to perform that action."
                    }
                }
            }
        },
        "/v3/companies/{id}/office-groups/{officeGroupId}": {
            "delete": {
                "tags": [
                    "Companies"
                ],
                "summary": "Removes an office group from a company",
                "operationId": "dacaa415ef124b7cd40dfdc4efb42cc9",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The company ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "officeGroupId",
                        "in": "path",
                        "description": "The office group ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Consultant with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to perform that action."
                    }
                }
            }
        },
        "/v3/people": {
            "get": {
                "tags": [
                    "People (Profile)"
                ],
                "summary": "Fetches all people.",
                "operationId": "69f7a5bf7a81bdc95cea32805e1cffd6",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.query"
                    },
                    {
                        "$ref": "#/components/parameters/api.sortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/api.since"
                    },
                    {
                        "$ref": "#/components/parameters/api.before"
                    },
                    {
                        "$ref": "#/components/parameters/api.between"
                    },
                    {
                        "$ref": "#/components/parameters/api.view"
                    },
                    {
                        "$ref": "#/components/parameters/api.fuzzy"
                    },
                    {
                        "$ref": "#/components/parameters/api.page"
                    },
                    {
                        "$ref": "#/components/parameters/api.count"
                    },
                    {
                        "$ref": "#/components/parameters/api.from"
                    },
                    {
                        "$ref": "#/components/parameters/api.to"
                    },
                    {
                        "$ref": "#/components/parameters/api.ids"
                    },
                    {
                        "$ref": "#/components/parameters/api.tags"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.filterOn"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.isCandidate"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.onCompanies"
                    },
                    {
                        "$ref": "#/components/parameters/api.v3.person.fields"
                    },
                    {
                        "$ref": "#/components/parameters/api.v3.person.exclude"
                    },
                    {
                        "$ref": "#/components/parameters/api.v3.person.counts"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.v3.person"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "People (Profile)"
                ],
                "summary": "Creates a person.",
                "operationId": "a6cee25dbcf701f5177a32e1fde88a46",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.v3.person.fields"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.v3.person.storeRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.person"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/people/{id}": {
            "get": {
                "tags": [
                    "People (Profile)"
                ],
                "summary": "Fetches a person by ID.",
                "operationId": "bb0f636f658ae95ed0633fa85e99a57a",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.v3.person.fields"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The person ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.person"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Person with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that person."
                    }
                }
            },
            "put": {
                "tags": [
                    "People (Profile)"
                ],
                "summary": "Updates a person.",
                "operationId": "8b053a675c21286dd7e1df2deb9100fe",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.v3.person.fields"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The person ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.v3.person.updateRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.person"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Person with that ID doesn't exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Person with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that person."
                    }
                }
            },
            "delete": {
                "tags": [
                    "People (Profile)"
                ],
                "summary": "Deletes a person by ID.",
                "operationId": "70ec5bc03e48d197d9ec122151fea324",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The person ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Person with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to delete that person."
                    }
                }
            }
        },
        "/v3/projects/{id}/candidates/statuses": {
            "post": {
                "tags": [
                    "Projects (Candidates)"
                ],
                "summary": "Adds pipeline tags to candidates.",
                "operationId": "6db85401241a798e1c2ca0ef83adfd5e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The body for adding pipeline tags to candidates.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.person.pipelineUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.person.pipelineUpdateResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The project, people, or tags specified do not exist."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Projects (Candidates)"
                ],
                "summary": "Removes pipeline tags from candidates.",
                "operationId": "5a302011f3edee690c3a6eceaaf69dbe",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The body for removing pipeline tags from candidates.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.person.pipelineUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.person.pipelineUpdateResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The project, people, or tags specified do not exist."
                    }
                }
            }
        },
        "/v3/projects/{id}/candidates": {
            "get": {
                "tags": [
                    "Projects (Candidates)"
                ],
                "summary": "Fetches candidates from a specific project.",
                "operationId": "16d7a6acbabb3c6dc180de23e53afe6c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/api.query"
                    },
                    {
                        "$ref": "#/components/parameters/api.sortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/api.count"
                    },
                    {
                        "$ref": "#/components/parameters/api.from"
                    },
                    {
                        "$ref": "#/components/parameters/api.ids"
                    },
                    {
                        "$ref": "#/components/parameters/api.to"
                    },
                    {
                        "$ref": "#/components/parameters/api.since"
                    },
                    {
                        "$ref": "#/components/parameters/api.before"
                    },
                    {
                        "$ref": "#/components/parameters/api.between"
                    },
                    {
                        "$ref": "#/components/parameters/api.fuzzy"
                    },
                    {
                        "$ref": "#/components/parameters/api.page"
                    },
                    {
                        "$ref": "#/components/parameters/api.tags"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.filterOn"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.person.onCompanies"
                    },
                    {
                        "$ref": "#/components/parameters/api.v3.person.fieldsWithCandidate"
                    },
                    {
                        "$ref": "#/components/parameters/api.v3.person.exclude"
                    },
                    {
                        "$ref": "#/components/parameters/api.v3.person.counts"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.v3.person"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Projects (Candidates)"
                ],
                "summary": "Removes a project candidate by ID.",
                "operationId": "22b59ffb3ab95213c9fbd873c9d61e68",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "successful operation."
                    },
                    "404": {
                        "description": "Person with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to delete that person."
                    }
                }
            }
        },
        "/v3/projects/candidates": {
            "post": {
                "tags": [
                    "Projects (Candidates)"
                ],
                "summary": "Adds a person as a candidate to a project.",
                "operationId": "a6a62fa0d6de6ef9619ff96b100d3d2d",
                "requestBody": {
                    "description": "The body for adding candidates to projects.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.v3.person.candidatesUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.v3.project.default.api.person.candidatesUpdateResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The people or the project cannot be found."
                    }
                }
            }
        },
        "/v3/projects/{id}/regions": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches all regions belonging to a project.",
                "operationId": "f505c3c16b37e46d16732482122672d3",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.v3.region"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Adds a region to a project.",
                "operationId": "9309c666ed5acd198056018e2e8ba6fc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.v3.region.storeRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.region"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/companies/{id}/regions": {
            "get": {
                "tags": [
                    "Companies"
                ],
                "summary": "Fetches all regions belonging to a company.",
                "operationId": "4de24dd9062e49e3e3bf624ac44391b8",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.v3.region"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Companies"
                ],
                "summary": "Adds a region to a company.",
                "operationId": "c2d764207e2a6471e0f60d1bdffca05a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The company ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.v3.region.storeRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.region"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/projects/{id}/regions/{regionId}": {
            "delete": {
                "tags": [
                    "Projects"
                ],
                "summary": "Removes a region from a project",
                "operationId": "93d44f2cd8829174828bf0c40b3354d4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "regionId",
                        "in": "path",
                        "description": "The region ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Consultant with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to perform that action."
                    }
                }
            }
        },
        "/v3/companies/{id}/regions/{regionId}": {
            "delete": {
                "tags": [
                    "Companies"
                ],
                "summary": "Removes a region from a company",
                "operationId": "593a78c81bbbea894ac22f6ea843d482",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The company ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "regionId",
                        "in": "path",
                        "description": "The region ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Consultant with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to perform that action."
                    }
                }
            }
        },
        "/v3/projects": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches all projects.",
                "operationId": "3993ddb736e4713d8569786fac658bac",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.query"
                    },
                    {
                        "$ref": "#/components/parameters/api.project.filterOn"
                    },
                    {
                        "$ref": "#/components/parameters/api.project.fields"
                    },
                    {
                        "$ref": "#/components/parameters/api.project.exclude"
                    },
                    {
                        "$ref": "#/components/parameters/api.project.counts"
                    },
                    {
                        "$ref": "#/components/parameters/api.page"
                    },
                    {
                        "$ref": "#/components/parameters/api.from"
                    },
                    {
                        "$ref": "#/components/parameters/api.to"
                    },
                    {
                        "$ref": "#/components/parameters/api.ids"
                    },
                    {
                        "$ref": "#/components/parameters/api.count"
                    },
                    {
                        "$ref": "#/components/parameters/api.sortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/api.project.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.since"
                    },
                    {
                        "$ref": "#/components/parameters/api.before"
                    },
                    {
                        "$ref": "#/components/parameters/api.between"
                    },
                    {
                        "$ref": "#/components/parameters/api.view"
                    },
                    {
                        "$ref": "#/components/parameters/api.withArchived"
                    },
                    {
                        "$ref": "#/components/parameters/api.archived"
                    },
                    {
                        "$ref": "#/components/parameters/api.fuzzy"
                    },
                    {
                        "$ref": "#/components/parameters/api.tags"
                    },
                    {
                        "name": "withPinned",
                        "in": "query",
                        "description": "By setting this parameter pinned lists will be returned first in the response.",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "isAssignment",
                        "in": "query",
                        "description": "By setting this parameter only assignments will be returned in the response."
                    },
                    {
                        "name": "isOpportunity",
                        "in": "query",
                        "description": "By setting this parameter only opportunities will be returned in the response."
                    },
                    {
                        "name": "isList",
                        "in": "query",
                        "description": "By setting this parameter only list will be returned in the response."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.v3.project.default"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Creates a project",
                "description": "Store a newly created resource in storage.",
                "operationId": "8f7703fdaa3b9fae09a095995bb559ac",
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.v3.project.storeRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.project.default"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/projects/{id}": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches a project by ID",
                "operationId": "1f32edadb8bb5cfdafcf32f32a558d75",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "$ref": "#/components/parameters/api.project.fields"
                    },
                    {
                        "$ref": "#/components/parameters/api.project.exclude"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.project.default"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project with that ID does not exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that project."
                    }
                }
            },
            "put": {
                "tags": [
                    "Projects"
                ],
                "summary": "Updates a project",
                "description": "Update the specified resource in storage.",
                "operationId": "1b6d731e49752f1cceb2032add24f089",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.v3.project.updateRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.project.default"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Company with that ID doesn't exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project with that ID does not exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that project."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Projects"
                ],
                "summary": "Archive or delete a project",
                "description": "Archive or permanently delete a project.",
                "operationId": "28b4a01e1f04bbc9740667c1713df804",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "force",
                        "in": "query",
                        "description": "Permanently delete the project",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "404": {
                        "description": "Project with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to delete that project."
                    }
                }
            }
        },
        "/v3/fixed-fees": {
            "get": {
                "tags": [
                    "Billing (Fixed Fees)"
                ],
                "summary": "Fetches all fixed fees.",
                "operationId": "c6d9caf9f2b24500977bc7385b3bcb21",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.query"
                    },
                    {
                        "$ref": "#/components/parameters/api.feeSplits.filterOn"
                    },
                    {
                        "$ref": "#/components/parameters/api.page"
                    },
                    {
                        "$ref": "#/components/parameters/api.from"
                    },
                    {
                        "$ref": "#/components/parameters/api.to"
                    },
                    {
                        "$ref": "#/components/parameters/api.count"
                    },
                    {
                        "$ref": "#/components/parameters/api.sortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/api.feeSplits.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.since"
                    },
                    {
                        "$ref": "#/components/parameters/api.before"
                    },
                    {
                        "$ref": "#/components/parameters/api.between"
                    },
                    {
                        "$ref": "#/components/parameters/api.tags"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.v3.billing.fixedFee"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/projects/{project}/fixed-fees": {
            "get": {
                "tags": [
                    "Billing (Fixed Fees)"
                ],
                "summary": "Fetches all fixed fees by project ID.",
                "description": "Display a listing of the resource.",
                "operationId": "66bff0def31b3ec0dc3701a8e91fc3cd",
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.billing.fixedFee"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Revenue with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that revenue."
                    }
                }
            },
            "post": {
                "tags": [
                    "Billing (Fixed Fees)"
                ],
                "summary": "Adds new fixed fee to billing.",
                "operationId": "e6a6edf4184148667f06177138c6140e",
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The fixed fee body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.v3.fixedFee.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.v3.billing.fixedFee"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/fixed-fees/{fixedFee}": {
            "get": {
                "tags": [
                    "Billing (Fixed Fees)"
                ],
                "summary": "Fetches a fixed fee by ID.",
                "description": "Display the specified resource.",
                "operationId": "9c6e9b1a5d1a4ef145ab0e388dfd6f44",
                "parameters": [
                    {
                        "name": "fixedFee",
                        "in": "path",
                        "description": "The fixed fee ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.billing.fixedFee"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Revenue with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that revenue."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Billing (Fixed Fees)"
                ],
                "summary": "Deletes fixed fee item.",
                "operationId": "24f9aefe6248ee5ccf3217bcd923909e",
                "parameters": [
                    {
                        "name": "fixedFee",
                        "in": "path",
                        "description": "The fixed fee ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Fixed fee with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/projects/{project}/fixed-fees/{fixedFee}": {
            "put": {
                "tags": [
                    "Billing (Fixed Fees)"
                ],
                "summary": "Updates a fixed fee.",
                "operationId": "596cd2b83e50824ecc574248c7db0484",
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "The project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "fixedFee",
                        "in": "path",
                        "description": "The fixed fee ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The invoice body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.v3.fixedFee.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.v3.billing.fixedFee"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/fixed-fees/{fixedFee}/lock": {
            "put": {
                "tags": [
                    "Billing (Fixed Fees)"
                ],
                "summary": "Locks a fixed fee.",
                "description": "Lock fixed fee",
                "operationId": "95ad53b90623aac17a93e9d4a083ef9f",
                "parameters": [
                    {
                        "name": "fixedFee",
                        "in": "path",
                        "description": "The fixed fee ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The invoice body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.v3.fixedFee.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.v3.billing.fixedFee"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    }
                }
            }
        },
        "/v3/fixed-fees/{fixedFee}/unlock": {
            "put": {
                "tags": [
                    "Billing (Fixed Fees)"
                ],
                "summary": "Unlocks a fixed fee.",
                "description": "Update the specified resource in storage.",
                "operationId": "88b5f13293548f254065536963d601e9",
                "parameters": [
                    {
                        "name": "fixedFee",
                        "in": "path",
                        "description": "The fixed fee ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The invoice body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.v3.fixedFee.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.v3.billing.fixedFee"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    }
                }
            }
        },
        "/v3/invoices": {
            "get": {
                "tags": [
                    "Billing (Invoices)"
                ],
                "summary": "Fetches all invoices.",
                "operationId": "311cd446519c8c6f6845a7ad19b612ca",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.query"
                    },
                    {
                        "$ref": "#/components/parameters/api.invoice.filterOn"
                    },
                    {
                        "$ref": "#/components/parameters/api.page"
                    },
                    {
                        "$ref": "#/components/parameters/api.from"
                    },
                    {
                        "$ref": "#/components/parameters/api.to"
                    },
                    {
                        "$ref": "#/components/parameters/api.count"
                    },
                    {
                        "$ref": "#/components/parameters/api.sortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/api.invoice.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.since"
                    },
                    {
                        "$ref": "#/components/parameters/api.before"
                    },
                    {
                        "$ref": "#/components/parameters/api.between"
                    },
                    {
                        "$ref": "#/components/parameters/api.tags"
                    },
                    {
                        "$ref": "#/components/parameters/api.invoice.fields"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.v3.invoice.default"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/invoices/{invoice}": {
            "get": {
                "tags": [
                    "Billing (Invoices)"
                ],
                "summary": "Fetches a invoice by ID.",
                "description": "Display the specified resource.",
                "operationId": "49fb4d0101b3e9507a13b80559533c27",
                "parameters": [
                    {
                        "name": "invoice",
                        "in": "path",
                        "description": "The invoice ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "$ref": "#/components/parameters/api.v3.invoice.fields"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.invoice.default"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invoice with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that invoice."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Billing (Invoices)"
                ],
                "summary": "Deletes an invoice by ID.",
                "operationId": "1a0256af181575616daf8ff0a00a1d58",
                "parameters": [
                    {
                        "name": "invoice",
                        "in": "path",
                        "description": "The ID of the invoice.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invoice with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/projects/{project}/invoices": {
            "post": {
                "tags": [
                    "Billing (Invoices)"
                ],
                "summary": "Adds invoice to billing.",
                "operationId": "26c33da794a9daa82d880a27be0786ad",
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "The item ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The invoice body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.v3.invoice.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.invoice.default"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/projects/{project}/invoices/{invoice}": {
            "put": {
                "tags": [
                    "Billing (Invoices)"
                ],
                "summary": "Updates an invoice.",
                "description": "Update the specified resource in storage.",
                "operationId": "998c0eacc373d9d80226a26828584bb5",
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "The item ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "invoice",
                        "in": "path",
                        "description": "The ID of the invoice.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "The invoice body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.v3.invoice.storeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.invoice.default"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/invoices/{invoice}/lock": {
            "put": {
                "tags": [
                    "Billing (Invoices)"
                ],
                "summary": "Locks an invoice.",
                "operationId": "76681ad81146c4a8d0b265a03471a41b",
                "parameters": [
                    {
                        "name": "invoice",
                        "in": "path",
                        "description": "The ID of the invoice.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.lockInvoice"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.invoice.default"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/invoices/{invoice}/unlock": {
            "put": {
                "tags": [
                    "Billing (Invoices)"
                ],
                "summary": "Unlocks an invoice.",
                "operationId": "e5dd087f675f00616b2a54712cf1db2f",
                "parameters": [
                    {
                        "name": "invoice",
                        "in": "path",
                        "description": "The ID of the invoice.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.invoice.default"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/revenues": {
            "get": {
                "tags": [
                    "Billing (Revenues)"
                ],
                "summary": "Fetches all revenues.",
                "operationId": "fda00e3aef88b150732f60d4f896d091",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api.query"
                    },
                    {
                        "$ref": "#/components/parameters/api.revenue.filterOn"
                    },
                    {
                        "$ref": "#/components/parameters/api.page"
                    },
                    {
                        "$ref": "#/components/parameters/api.from"
                    },
                    {
                        "$ref": "#/components/parameters/api.to"
                    },
                    {
                        "$ref": "#/components/parameters/api.count"
                    },
                    {
                        "$ref": "#/components/parameters/api.sortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/api.revenue.sortBy"
                    },
                    {
                        "$ref": "#/components/parameters/api.since"
                    },
                    {
                        "$ref": "#/components/parameters/api.before"
                    },
                    {
                        "$ref": "#/components/parameters/api.between"
                    },
                    {
                        "$ref": "#/components/parameters/api.tags"
                    },
                    {
                        "$ref": "#/components/parameters/api.revenue.fields"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.v3.billing.revenue"
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.links"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.pageMeta"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/revenues/{revenue}": {
            "get": {
                "tags": [
                    "Billing (Revenues)"
                ],
                "summary": "Fetches a revenue by ID.",
                "description": "Display the specified resource.",
                "operationId": "3cd13898789fbfd44b14a5cc2040addb",
                "parameters": [
                    {
                        "name": "revenue",
                        "in": "path",
                        "description": "The revenue ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "$ref": "#/components/parameters/api.v3.revenue.fields"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.billing.revenue"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Revenue with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that revenue."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Billing (Revenues)"
                ],
                "summary": "Deletes revenue item.",
                "operationId": "8c2cfe61847e5decee2fd1c21b6105a5",
                "parameters": [
                    {
                        "name": "revenue",
                        "in": "path",
                        "description": "The revenue ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item or note with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/projects/{project}/revenues": {
            "post": {
                "tags": [
                    "Billing (Revenues)"
                ],
                "summary": "Creates a revenue.",
                "operationId": "2bb7052cd1f6b8837d1b31399abec157",
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "The ID of the project",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.v3.revenueStore"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.billing.revenue"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Item with that ID doesn't exist."
                    },
                    "403": {
                        "description": "The authenticated user does not have permission to see that item."
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/projects/{project}/revenues/{revenue}": {
            "put": {
                "tags": [
                    "Billing (Revenues)"
                ],
                "summary": "Updates a revenue",
                "operationId": "fa4e99d58849b8450f61e8450d2603ed",
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "The ID of the project",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "revenue",
                        "in": "path",
                        "description": "The ID of the revenue",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/api.v3.revenueStore"
                },
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.billing.revenue"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Data was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.422"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/revenues/{revenue}/lock": {
            "put": {
                "tags": [
                    "Billing (Revenues)"
                ],
                "summary": "Locks a revenue.",
                "description": "Lock revenue",
                "operationId": "4589dbb49df5a2ed6f85076ade01fa30",
                "parameters": [
                    {
                        "name": "revenue",
                        "in": "path",
                        "description": "The ID of the revenue.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.billing.revenue"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/revenues/{revenue}/unlock": {
            "put": {
                "tags": [
                    "Billing (Revenues)"
                ],
                "summary": "Unlocks a revenue.",
                "description": "Unlock revenue",
                "operationId": "687b3a85934b80bf84bf538cf7f5352b",
                "parameters": [
                    {
                        "name": "revenue",
                        "in": "path",
                        "description": "The ID of the revenue.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/api.v3.billing.revenue"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "api.list.stats.tag": {
                "title": "Bucket Stats Tags",
                "properties": {
                    "id": {
                        "description": "Bucket",
                        "type": "integer",
                        "example": 1234
                    },
                    "count": {
                        "type": "integer",
                        "example": 3
                    },
                    "color": {
                        "type": "string",
                        "example": "#12ab12"
                    },
                    "text": {
                        "type": "string",
                        "example": "LinkedIn"
                    },
                    "order": {
                        "type": "integer",
                        "example": 3
                    }
                },
                "type": "object"
            },
            "api.career": {
                "title": "Career",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/LocalizationTrait"
                    },
                    {
                        "properties": {
                            "name": {
                                "description": "Class Career",
                                "type": "string",
                                "example": "Architect (Building & Design)"
                            },
                            "value": {
                                "type": "string",
                                "example": "Architect (Building & Design)"
                            },
                            "parent_id": {
                                "type": "integer",
                                "example": "1234"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "api.client.link.type": {
                "title": "Company Link Types",
                "description": "Class ClientLink",
                "type": "string",
                "enum": [
                    "general",
                    "linkedin",
                    "website",
                    "xing"
                ]
            },
            "api.companyType": {
                "title": "Company Type",
                "description": "Class CompanyType",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/LocalizationTrait"
                    }
                ]
            },
            "api.person.link.type": {
                "title": "Person Link Types",
                "description": "Class ContactLink",
                "type": "string",
                "enum": [
                    "linkedin",
                    "website",
                    "xing"
                ]
            },
            "api.company.store": {
                "title": "Company Store Request Body",
                "required": [
                    "name",
                    "owner",
                    "_type"
                ],
                "properties": {
                    "_type": {
                        "description": "Must be 'info', 'address', or 'all'",
                        "type": "string",
                        "example": "info"
                    },
                    "name": {
                        "type": "string",
                        "example": "Amazon"
                    },
                    "aliases": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "amzn"
                        }
                    },
                    "owner": {
                        "type": "integer",
                        "example": "1234"
                    },
                    "description": {
                        "type": "string",
                        "example": "The description of the company",
                        "nullable": true
                    },
                    "division": {
                        "type": "string",
                        "example": "The division or subsidiary of the company",
                        "nullable": true
                    },
                    "size": {
                        "type": "string",
                        "example": "The size of the company",
                        "nullable": true
                    },
                    "industries": {
                        "description": "An array of industry ids",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "url": {
                                    "type": "string",
                                    "example": "https://example.com"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "logo": {
                        "type": "string",
                        "example": "https://cloud.notactivelylooking.com/123",
                        "nullable": true
                    },
                    "specialities": {
                        "type": "string",
                        "example": "The specialities of the company",
                        "nullable": true
                    },
                    "email": {
                        "type": "string",
                        "example": "me@example.com",
                        "nullable": true
                    },
                    "phone": {
                        "type": "string",
                        "example": "+123 456 789",
                        "nullable": true
                    },
                    "assignmentId": {
                        "type": "integer",
                        "example": "1234",
                        "nullable": true
                    },
                    "assignmentName": {
                        "type": "string",
                        "example": "Chief Technology Officer - London",
                        "nullable": true
                    },
                    "address": {
                        "properties": {
                            "label": {
                                "type": "string",
                                "enum": [
                                    "hq",
                                    "billing",
                                    "subsidiary",
                                    "work"
                                ],
                                "example": "hq"
                            },
                            "building": {
                                "type": "string",
                                "example": "Catton Court"
                            },
                            "street": {
                                "type": "string",
                                "example": "Oak Ridge"
                            },
                            "city": {
                                "type": "string",
                                "example": "Birmingham"
                            },
                            "state": {
                                "type": "string",
                                "example": "Essex"
                            },
                            "postcode": {
                                "type": "string",
                                "example": "CT12 8GR"
                            },
                            "country": {
                                "type": "string",
                                "example": "Ireland"
                            }
                        },
                        "type": "object"
                    },
                    "customValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.customValue.store"
                        }
                    }
                },
                "type": "object"
            },
            "api.company.update": {
                "title": "Company Update Request Body",
                "required": [
                    "name",
                    "owner",
                    "_type"
                ],
                "properties": {
                    "_type": {
                        "description": "Must be 'info', 'address', or 'all'",
                        "type": "string",
                        "example": "info"
                    },
                    "name": {
                        "type": "string",
                        "example": "Amazon"
                    },
                    "aliases": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "amzn"
                        }
                    },
                    "owner": {
                        "type": "integer",
                        "example": "1234"
                    },
                    "description": {
                        "type": "string",
                        "example": "The description of the company",
                        "nullable": true
                    },
                    "division": {
                        "type": "string",
                        "example": "The division or subsidiary of the company",
                        "nullable": true
                    },
                    "size": {
                        "type": "string",
                        "example": "The size of the company",
                        "nullable": true
                    },
                    "industries": {
                        "description": "An array of industry ids",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "url": {
                                    "type": "string",
                                    "example": "https://example.com"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "logo": {
                        "type": "string",
                        "example": "https://cloud.notactivelylooking.com/123",
                        "nullable": true
                    },
                    "specialities": {
                        "type": "string",
                        "example": "The specialities of the company",
                        "nullable": true
                    },
                    "email": {
                        "type": "string",
                        "example": "me@example.com",
                        "nullable": true
                    },
                    "phone": {
                        "type": "string",
                        "example": "+123 456 789",
                        "nullable": true
                    },
                    "assignmentId": {
                        "type": "integer",
                        "example": "1234",
                        "nullable": true
                    },
                    "assignmentName": {
                        "type": "string",
                        "example": "Chief Technology Officer - London",
                        "nullable": true
                    },
                    "address": {
                        "properties": {
                            "label": {
                                "type": "string",
                                "enum": [
                                    "hq",
                                    "billing",
                                    "subsidiary",
                                    "work"
                                ],
                                "example": "hq"
                            },
                            "building": {
                                "type": "string",
                                "example": "Catton Court"
                            },
                            "street": {
                                "type": "string",
                                "example": "Oak Ridge"
                            },
                            "city": {
                                "type": "string",
                                "example": "Birmingham"
                            },
                            "state": {
                                "type": "string",
                                "example": "Essex"
                            },
                            "postcode": {
                                "type": "string",
                                "example": "CT12 8GR"
                            },
                            "country": {
                                "type": "string",
                                "example": "Ireland"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "api.category": {
                "title": "Category",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "parent_id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "example": "Chief Technology Officer"
                    },
                    "matches": {
                        "type": "string",
                        "example": "CTO"
                    },
                    "value": {
                        "type": "integer",
                        "example": 1234
                    }
                },
                "type": "object"
            },
            "api.aspiration.storeRequest": {
                "title": "Person Aspirations Request Body",
                "properties": {
                    "careers": {
                        "description": "An array of career IDs",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 1234
                        }
                    },
                    "companyTypes": {
                        "description": "An array of company type IDs",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 1234
                        }
                    },
                    "industries": {
                        "description": "An array of industry IDs",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 1234
                        }
                    },
                    "locations": {
                        "description": "An array of location IDs",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 1234
                        }
                    },
                    "summary": {
                        "description": "The summary of the person's aspirations.",
                        "type": "string",
                        "example": "I am looking for a new role in a fast paced environment."
                    },
                    "permanentPosition": {
                        "description": "The permanent position details if applicable",
                        "properties": {
                            "base": {
                                "$ref": "#/components/schemas/api.currencyAmount"
                            },
                            "bonus": {
                                "description": "The bonus percentage amount",
                                "type": "integer",
                                "example": "60"
                            },
                            "equity": {
                                "description": "Whether the role includes equity",
                                "type": "boolean",
                                "example": false
                            }
                        },
                        "type": "object"
                    },
                    "interimPosition": {
                        "description": "The interim position details if applicable",
                        "properties": {
                            "rate": {
                                "$ref": "#/components/schemas/api.currencyAmount"
                            }
                        },
                        "type": "object"
                    },
                    "nedPosition": {
                        "description": "The NED position details if applicable",
                        "properties": {
                            "rate": {
                                "$ref": "#/components/schemas/api.currencyAmount"
                            },
                            "classifications": {
                                "description": "The classifications of the NED role",
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "example": 1234
                                }
                            },
                            "probono": {
                                "description": "Whether the role is pro bono",
                                "type": "boolean",
                                "example": true
                            },
                            "equity": {
                                "description": "Whether the role includes equity",
                                "type": "boolean",
                                "example": false
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "api.confidential.storeRequest": {
                "title": "Person Confidential Request Body",
                "properties": {
                    "baseSalary": {
                        "$ref": "#/components/schemas/api.currencyAmount"
                    },
                    "interimRate": {
                        "$ref": "#/components/schemas/api.currencyAmount"
                    },
                    "nedRate": {
                        "$ref": "#/components/schemas/api.currencyAmount"
                    },
                    "notice": {
                        "description": "The number of months or hours that a user needs to give as notice leaving their current job. If the number is over 24 then it refers to hours otherwise it refers to months.",
                        "type": "integer",
                        "enum": [
                            0,
                            336,
                            1,
                            2,
                            3,
                            6,
                            12,
                            24
                        ],
                        "example": "3"
                    },
                    "bonus": {
                        "description": "The bonus percentage the person receives",
                        "type": "integer",
                        "example": 125
                    },
                    "probono": {
                        "description": "True if the person is working pro bono, false otherwise",
                        "type": "boolean",
                        "example": true
                    },
                    "additionalInfo": {
                        "description": "Additional information",
                        "type": "string",
                        "example": "Open to giving more information"
                    }
                },
                "type": "object"
            },
            "api.person.notesUpdateResponse": {
                "title": "Person Notes Store Response",
                "properties": {
                    "updated": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "manager": {
                                    "properties": {
                                        "researchNotes": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/api.note.simple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "notUpdated": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "fullName": {
                                    "type": "string",
                                    "example": "Jane Doe"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "api.person.store": {
                "title": "Person Store Request Body",
                "required": [
                    "firstName",
                    "lastName",
                    "companyRecordName",
                    "companyRecordId",
                    "companyName"
                ],
                "properties": {
                    "honorific": {
                        "type": "string",
                        "example": "Ms."
                    },
                    "firstName": {
                        "type": "string",
                        "example": "Jane"
                    },
                    "lastName": {
                        "type": "string",
                        "example": "Doe"
                    },
                    "headline": {
                        "type": "string",
                        "example": "I work well in a team."
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "url": {
                                    "type": "string",
                                    "example": "https://example.com"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "phones": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "number": {
                                    "type": "string",
                                    "example": "+123 456 789"
                                },
                                "isDefault": {
                                    "type": "boolean"
                                },
                                "label": {
                                    "type": "string",
                                    "enum": [
                                        "assistant",
                                        "billing",
                                        "direct",
                                        "home",
                                        "manager",
                                        "mobile",
                                        "other",
                                        "private",
                                        "switchboard",
                                        "work"
                                    ],
                                    "example": "work"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "emails": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "address": {
                                    "type": "string",
                                    "example": "me@example.com"
                                },
                                "isDefault": {
                                    "type": "boolean"
                                },
                                "label": {
                                    "type": "string",
                                    "enum": [
                                        "assistant",
                                        "billing",
                                        "direct",
                                        "home",
                                        "manager",
                                        "mobile",
                                        "other",
                                        "private",
                                        "switchboard",
                                        "work"
                                    ],
                                    "example": "work"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "addresses": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "line1": {
                                    "type": "string",
                                    "example": "Flat 2B"
                                },
                                "line2": {
                                    "type": "string",
                                    "example": "123 Catton Court"
                                },
                                "line3": {
                                    "type": "string",
                                    "example": "Oak Ridge"
                                },
                                "line4": {
                                    "type": "string",
                                    "example": "Somewhere"
                                },
                                "city": {
                                    "type": "string",
                                    "example": "Birmingham"
                                },
                                "state": {
                                    "type": "string",
                                    "example": "Essex"
                                },
                                "country": {
                                    "type": "string",
                                    "example": "Ireland"
                                },
                                "postcode": {
                                    "type": "string",
                                    "example": "CT12 8GR"
                                },
                                "label": {
                                    "type": "string",
                                    "enum": [
                                        "private",
                                        "business",
                                        "other",
                                        "invoice"
                                    ],
                                    "example": "private"
                                },
                                "isDefault": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "ownerId": {
                        "description": "The ID of the new owner of the person",
                        "type": "integer",
                        "nullable": true
                    },
                    "companyRecordName": {
                        "description": "The name of an existing company record to add the person to. (A new company record will be created if the company does not exist)",
                        "type": "string",
                        "example": "Amazon"
                    },
                    "companyRecordId": {
                        "description": "The ID of a company to add the person to.",
                        "type": "integer",
                        "example": 1234
                    },
                    "companyName": {
                        "description": "The company the person works for, which will not be associated with an existing company. (Required if `companyRecordName` or `companyRecordId` are not set)",
                        "type": "string",
                        "example": "Amazon"
                    },
                    "department": {
                        "type": "string",
                        "example": "Finance"
                    },
                    "title": {
                        "type": "string",
                        "example": "Managing Director"
                    },
                    "positionType": {
                        "type": "string",
                        "default": "permanent",
                        "enum": [
                            "permanent",
                            "interim",
                            "ned",
                            "parttime",
                            "temporary",
                            "contract",
                            "other"
                        ],
                        "example": "permanent"
                    },
                    "career": {
                        "description": "The career ID of the primary position. Careers and their IDs can be found using the `categories` API.",
                        "type": "integer",
                        "example": 1234
                    },
                    "industry": {
                        "description": "The industry ID of the primary position. Industries and their IDs can be found using the `categories` API.",
                        "type": "integer",
                        "example": 1234
                    },
                    "location": {
                        "description": "The location ID of the primary position. Locations and their IDs can be found using the `categories` API.",
                        "type": "integer",
                        "example": 1234
                    },
                    "startDate": {
                        "type": "string",
                        "example": "1998-04-30"
                    },
                    "endDate": {
                        "type": "string",
                        "example": "2005-06-23"
                    },
                    "startMonthUnknown": {
                        "description": "If the start month is unknown then put any month and day in the `startDate` field and set this field to `true`",
                        "type": "boolean",
                        "default": false
                    },
                    "endMonthUnknown": {
                        "description": "If the end month is unknown then put any month and day in the `endDate` field and set this field to `true`",
                        "type": "boolean",
                        "default": false
                    },
                    "summary": {
                        "type": "string",
                        "example": "Managed several team members to meet a strict schedule."
                    },
                    "assignmentId": {
                        "description": "The ID of an assignment that the person will be added to as a candidate",
                        "type": "integer"
                    },
                    "assignmentName": {
                        "description": "The name of an assignment to add the person to as a candidate. If an assignment with that name does not exist then a new one will be created.",
                        "type": "string"
                    },
                    "lists": {
                        "description": "An array of ids of the the lists that the person is in",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true
                    },
                    "customValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.customValue.store"
                        }
                    }
                },
                "type": "object"
            },
            "api.person.update": {
                "title": "Person Update Request Body",
                "required": [
                    "firstName",
                    "lastName"
                ],
                "properties": {
                    "honorific": {
                        "type": "string",
                        "example": "Ms."
                    },
                    "firstName": {
                        "type": "string",
                        "example": "Jane"
                    },
                    "lastName": {
                        "type": "string",
                        "example": "Doe"
                    },
                    "headline": {
                        "type": "string",
                        "example": "I work well in a team."
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "url": {
                                    "type": "string",
                                    "example": "https://example.com"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "phones": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "number": {
                                    "type": "string",
                                    "example": "+123 456 789"
                                },
                                "isDefault": {
                                    "type": "boolean"
                                },
                                "label": {
                                    "type": "string",
                                    "enum": [
                                        "assistant",
                                        "billing",
                                        "direct",
                                        "home",
                                        "manager",
                                        "mobile",
                                        "other",
                                        "private",
                                        "switchboard",
                                        "work"
                                    ],
                                    "example": "work"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "emails": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "address": {
                                    "type": "string",
                                    "example": "me@example.com"
                                },
                                "isDefault": {
                                    "type": "boolean"
                                },
                                "label": {
                                    "type": "string",
                                    "enum": [
                                        "assistant",
                                        "billing",
                                        "direct",
                                        "home",
                                        "manager",
                                        "mobile",
                                        "other",
                                        "private",
                                        "switchboard",
                                        "work"
                                    ],
                                    "example": "work"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "addresses": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "line1": {
                                    "type": "string",
                                    "example": "Flat 2B"
                                },
                                "line2": {
                                    "type": "string",
                                    "example": "123 Catton Court"
                                },
                                "line3": {
                                    "type": "string",
                                    "example": "Oak Ridge"
                                },
                                "line4": {
                                    "type": "string",
                                    "example": "Somewhere"
                                },
                                "city": {
                                    "type": "string",
                                    "example": "Birmingham"
                                },
                                "state": {
                                    "type": "string",
                                    "example": "Essex"
                                },
                                "country": {
                                    "type": "string",
                                    "example": "Ireland"
                                },
                                "postcode": {
                                    "type": "string",
                                    "example": "CT12 8GR"
                                },
                                "label": {
                                    "type": "string",
                                    "enum": [
                                        "private",
                                        "business",
                                        "other",
                                        "invoice"
                                    ],
                                    "example": "private"
                                },
                                "isDefault": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "ownerId": {
                        "description": "The ID of the new owner of the person",
                        "type": "integer",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "api.person.emailStoreRequest": {
                "title": "Person Email Store Request Body",
                "properties": {
                    "address": {
                        "type": "string",
                        "example": "me@example.com"
                    },
                    "label": {
                        "$ref": "#/components/schemas/api.email.label"
                    },
                    "isDefault": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "api.person.phoneStoreRequest": {
                "title": "Person Phone Number Store Request Body",
                "properties": {
                    "number": {
                        "type": "string",
                        "example": "01234 567890"
                    },
                    "label": {
                        "$ref": "#/components/schemas/api.phone.label"
                    },
                    "isDefault": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "api.person.pipelineUpdateRequest": {
                "title": "Candidates Tags Store Request Body",
                "properties": {
                    "candidates": {
                        "description": "An array of person IDs that will have the specified tags added.",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 1234
                        }
                    },
                    "tags": {
                        "description": "An array of pipeline tag IDs that will be added to the candidates.",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 1234
                        }
                    }
                },
                "type": "object"
            },
            "api.person.pipelineUpdateResponse": {
                "title": "Candidates Tags Store Response",
                "properties": {
                    "updated": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "meta": {
                                    "properties": {
                                        "candidate": {
                                            "properties": {
                                                "pipelineTags": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/api.status"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "notUpdated": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "fullName": {
                                    "type": "string",
                                    "example": "Jane Doe"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "api.person.tagsUpdateRequest": {
                "title": "Person Tags Store Request Body",
                "properties": {
                    "people": {
                        "description": "An array of person IDs that will have the specified tags added.",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 4321
                        }
                    },
                    "tags": {
                        "description": "An array of person tag IDs that will be added to the people.",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 5678
                        }
                    }
                },
                "type": "object"
            },
            "api.person.tagsUpdateResponse": {
                "title": "Person Tags Store Response",
                "properties": {
                    "updated": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 4321
                                },
                                "fullName": {
                                    "type": "string",
                                    "example": "Jane Doe"
                                },
                                "manager": {
                                    "properties": {
                                        "tags": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 5678
                                                    },
                                                    "text": {
                                                        "type": "string",
                                                        "example": "VIP"
                                                    },
                                                    "color": {
                                                        "type": "string",
                                                        "example": "#abcabc"
                                                    },
                                                    "default": {
                                                        "type": "boolean"
                                                    },
                                                    "order": {
                                                        "type": "integer"
                                                    },
                                                    "type": {
                                                        "type": "string",
                                                        "example": "person"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "notUpdated": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "fullName": {
                                    "type": "string",
                                    "example": "Jane Doe"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "api.person.candidatesUpdateRequest": {
                "title": "Candidates Store Request Body",
                "properties": {
                    "candidates": {
                        "description": "An array of person IDs that will be added to the assignment.",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 1234
                        }
                    },
                    "assignmentId": {
                        "description": "The ID of an assignment to add the candidates to.",
                        "type": "integer",
                        "example": 1234
                    },
                    "assignmentName": {
                        "description": "Can be used instead of `assignmentId` and will search for an assignment with the name or create if it doesn't exist.",
                        "type": "string",
                        "example": "CTO"
                    }
                },
                "type": "object"
            },
            "api.person.candidatesUpdateResponse": {
                "title": "Candidates Store Response",
                "properties": {
                    "updated": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "counts": {
                                    "properties": {
                                        "relationships": {
                                            "properties": {
                                                "candidatesLists": {
                                                    "type": "integer",
                                                    "example": 4
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "notUpdated": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "api.listPeopleUpdateResponse": {
                "title": "List People Update Response",
                "type": "array",
                "items": {
                    "properties": {
                        "id": {
                            "type": "integer",
                            "example": 1234
                        },
                        "fullName": {
                            "type": "string",
                            "example": "John Smith"
                        }
                    },
                    "type": "object"
                }
            },
            "api.project.store": {
                "title": "Project Store Request Body",
                "required": [
                    "name",
                    "owner",
                    "_type",
                    "label"
                ],
                "properties": {
                    "leadId": {
                        "description": "The ID of the person to add as project contact",
                        "type": "integer",
                        "example": "1234"
                    },
                    "_type": {
                        "type": "string",
                        "enum": [
                            "info",
                            "custom"
                        ],
                        "example": "info"
                    },
                    "label": {
                        "type": "string",
                        "enum": [
                            "assignment",
                            "opportunity"
                        ],
                        "example": "assignment"
                    },
                    "name": {
                        "type": "string",
                        "example": "Regional Manager"
                    },
                    "projectId": {
                        "type": "string",
                        "example": "EZ123"
                    },
                    "description": {
                        "type": "string",
                        "example": "The description of the assignment",
                        "nullable": true
                    },
                    "companyId": {
                        "description": "The ID of a company to add to project.",
                        "type": "string",
                        "example": 1234
                    },
                    "companyName": {
                        "description": "The name of an existing company record to add to the project. (A new company record will be created if the company does not exist)",
                        "type": "string",
                        "example": "Amazon"
                    },
                    "ownerId": {
                        "type": "integer",
                        "example": "1234"
                    },
                    "industries": {
                        "description": "An array of industry ids",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true
                    },
                    "listId": {
                        "description": "The ID of the list",
                        "type": "integer"
                    },
                    "startDate": {
                        "description": "For assignments only. The date the assignment starts.",
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "endDate": {
                        "description": "For assignments only. The date the assignment is ends.",
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "probability": {
                        "type": "integer",
                        "example": "30"
                    },
                    "customValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.customValue.store"
                        }
                    }
                },
                "type": "object"
            },
            "api.project.update": {
                "title": "Project Update Request Body",
                "required": [
                    "name",
                    "owner",
                    "_type",
                    "label"
                ],
                "properties": {
                    "leadId": {
                        "description": "The ID of the person to add as project contact",
                        "type": "integer",
                        "example": "1234"
                    },
                    "_type": {
                        "type": "string",
                        "enum": [
                            "info",
                            "custom"
                        ],
                        "example": "info"
                    },
                    "label": {
                        "type": "string",
                        "enum": [
                            "assignment",
                            "opportunity"
                        ],
                        "example": "assignment"
                    },
                    "name": {
                        "type": "string",
                        "example": "Regional Manager"
                    },
                    "projectId": {
                        "type": "string",
                        "example": "EZ123"
                    },
                    "description": {
                        "type": "string",
                        "example": "The description of the assignment",
                        "nullable": true
                    },
                    "companyId": {
                        "description": "The ID of a company to add to project.",
                        "type": "string",
                        "example": 1234
                    },
                    "companyName": {
                        "description": "The name of an existing company record to add to the project. (A new company record will be created if the company does not exist)",
                        "type": "string",
                        "example": "Amazon"
                    },
                    "ownerId": {
                        "type": "integer",
                        "example": "1234"
                    },
                    "industries": {
                        "description": "An array of industry ids",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true
                    },
                    "listId": {
                        "description": "The ID of the list",
                        "type": "integer"
                    },
                    "startDate": {
                        "description": "For assignments only. The date the assignment starts.",
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "endDate": {
                        "description": "For assignments only. The date the assignment is ends.",
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "probability": {
                        "type": "integer",
                        "example": "30"
                    }
                },
                "type": "object"
            },
            "api.billing.storeRequest": {
                "title": "Task Store Request Body",
                "properties": {
                    "contactId": {
                        "type": "integer",
                        "example": "123"
                    }
                },
                "type": "object"
            },
            "api.v2.company.store": {
                "title": "Company Store Request Body",
                "required": [
                    "name",
                    "owner",
                    "_type"
                ],
                "properties": {
                    "_type": {
                        "description": "Must be 'info' or 'addresses', or 'all'",
                        "type": "string",
                        "example": "info"
                    },
                    "name": {
                        "type": "string",
                        "example": "Amazon"
                    },
                    "aliases": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "amzn"
                        }
                    },
                    "owner": {
                        "type": "integer",
                        "example": "1234"
                    },
                    "description": {
                        "type": "string",
                        "example": "The description of the company",
                        "nullable": true
                    },
                    "division": {
                        "type": "string",
                        "example": "The division or subsidiary of the company",
                        "nullable": true
                    },
                    "size": {
                        "type": "string",
                        "example": "The size of the company",
                        "nullable": true
                    },
                    "industries": {
                        "description": "An array of industry ids",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "url": {
                                    "type": "string",
                                    "example": "https://example.com"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "logo": {
                        "type": "string",
                        "example": "https://cloud.notactivelylooking.com/123",
                        "nullable": true
                    },
                    "specialities": {
                        "type": "string",
                        "example": "The specialities of the company",
                        "nullable": true
                    },
                    "email": {
                        "type": "string",
                        "example": "me@example.com",
                        "nullable": true
                    },
                    "phone": {
                        "type": "string",
                        "example": "+123 456 789",
                        "nullable": true
                    },
                    "assignmentId": {
                        "type": "integer",
                        "example": "1234",
                        "nullable": true
                    },
                    "assignmentName": {
                        "type": "string",
                        "example": "Chief Technology Officer - London",
                        "nullable": true
                    },
                    "addresses": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "label": {
                                    "type": "string",
                                    "enum": [
                                        "hq",
                                        "billing",
                                        "subsidiary",
                                        "work"
                                    ],
                                    "example": "hq"
                                },
                                "building": {
                                    "type": "string",
                                    "example": "Catton Court"
                                },
                                "street": {
                                    "type": "string",
                                    "example": "Oak Ridge"
                                },
                                "city": {
                                    "type": "string",
                                    "example": "Birmingham"
                                },
                                "state": {
                                    "type": "string",
                                    "example": "Essex"
                                },
                                "postcode": {
                                    "type": "string",
                                    "example": "CT12 8GR"
                                },
                                "country": {
                                    "type": "string",
                                    "example": "Ireland"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "customValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.customValue.store"
                        }
                    }
                },
                "type": "object"
            },
            "api.v2.company.update": {
                "title": "Company Store Request Body",
                "required": [
                    "name",
                    "owner",
                    "_type"
                ],
                "properties": {
                    "_type": {
                        "description": "Must be 'info' or 'addresses', or 'all'",
                        "type": "string",
                        "example": "info"
                    },
                    "name": {
                        "type": "string",
                        "example": "Amazon"
                    },
                    "aliases": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "amzn"
                        }
                    },
                    "owner": {
                        "type": "integer",
                        "example": "1234"
                    },
                    "description": {
                        "type": "string",
                        "example": "The description of the company",
                        "nullable": true
                    },
                    "division": {
                        "type": "string",
                        "example": "The division or subsidiary of the company",
                        "nullable": true
                    },
                    "size": {
                        "type": "string",
                        "example": "The size of the company",
                        "nullable": true
                    },
                    "industries": {
                        "description": "An array of industry ids",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "url": {
                                    "type": "string",
                                    "example": "https://example.com"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "logo": {
                        "type": "string",
                        "example": "https://cloud.notactivelylooking.com/123",
                        "nullable": true
                    },
                    "specialities": {
                        "type": "string",
                        "example": "The specialities of the company",
                        "nullable": true
                    },
                    "email": {
                        "type": "string",
                        "example": "me@example.com",
                        "nullable": true
                    },
                    "phone": {
                        "type": "string",
                        "example": "+123 456 789",
                        "nullable": true
                    },
                    "assignmentId": {
                        "type": "integer",
                        "example": "1234",
                        "nullable": true
                    },
                    "assignmentName": {
                        "type": "string",
                        "example": "Chief Technology Officer - London",
                        "nullable": true
                    },
                    "addresses": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "label": {
                                    "type": "string",
                                    "enum": [
                                        "hq",
                                        "billing",
                                        "subsidiary",
                                        "work"
                                    ],
                                    "example": "hq"
                                },
                                "building": {
                                    "type": "string",
                                    "example": "Catton Court"
                                },
                                "street": {
                                    "type": "string",
                                    "example": "Oak Ridge"
                                },
                                "city": {
                                    "type": "string",
                                    "example": "Birmingham"
                                },
                                "state": {
                                    "type": "string",
                                    "example": "Essex"
                                },
                                "postcode": {
                                    "type": "string",
                                    "example": "CT12 8GR"
                                },
                                "country": {
                                    "type": "string",
                                    "example": "Ireland"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "api.v2.listPeopleUpdateResponse": {
                "title": "List People Update Response",
                "type": "array",
                "items": {
                    "properties": {
                        "id": {
                            "type": "integer",
                            "example": 1234
                        },
                        "fullName": {
                            "type": "string",
                            "example": "John Smith"
                        }
                    },
                    "type": "object"
                }
            },
            "api.v2.person.candidatesUpdateRequest": {
                "title": "Candidates Store Request Body",
                "properties": {
                    "candidates": {
                        "description": "An array of person IDs that will be added to the assignment.",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 1234
                        }
                    },
                    "assignmentId": {
                        "description": "The ID of an assignment to add the candidates to.",
                        "type": "integer",
                        "example": 1234
                    },
                    "assignmentName": {
                        "description": "Can be used instead of `assignmentId` and will search for an assignment with the name or create if it doesn't exist.",
                        "type": "string",
                        "example": "CTO"
                    }
                },
                "type": "object"
            },
            "api.v2.person.candidatesUpdateResponse": {
                "title": "Candidates Store Response",
                "properties": {
                    "updated": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "counts": {
                                    "properties": {
                                        "relationships": {
                                            "properties": {
                                                "candidatesLists": {
                                                    "type": "integer",
                                                    "example": 4
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "notUpdated": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "api.v2.person.store": {
                "title": "Person Store Request Body",
                "required": [
                    "firstName",
                    "lastName",
                    "companyRecordName",
                    "companyRecordId",
                    "companyName"
                ],
                "properties": {
                    "honorific": {
                        "type": "string",
                        "example": "Ms."
                    },
                    "firstName": {
                        "type": "string",
                        "example": "Jane"
                    },
                    "lastName": {
                        "type": "string",
                        "example": "Doe"
                    },
                    "headline": {
                        "type": "string",
                        "example": "I work well in a team."
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "url": {
                                    "type": "string",
                                    "example": "https://example.com"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "phones": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "number": {
                                    "type": "string",
                                    "example": "+123 456 789"
                                },
                                "isDefault": {
                                    "type": "boolean"
                                },
                                "label": {
                                    "type": "string",
                                    "enum": [
                                        "assistant",
                                        "billing",
                                        "direct",
                                        "home",
                                        "manager",
                                        "mobile",
                                        "other",
                                        "private",
                                        "switchboard",
                                        "work"
                                    ],
                                    "example": "work"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "emails": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "address": {
                                    "type": "string",
                                    "example": "me@example.com"
                                },
                                "isDefault": {
                                    "type": "boolean"
                                },
                                "label": {
                                    "type": "string",
                                    "enum": [
                                        "assistant",
                                        "billing",
                                        "direct",
                                        "home",
                                        "manager",
                                        "mobile",
                                        "other",
                                        "private",
                                        "switchboard",
                                        "work"
                                    ],
                                    "example": "work"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "addresses": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "line1": {
                                    "type": "string",
                                    "example": "Flat 2B"
                                },
                                "line2": {
                                    "type": "string",
                                    "example": "123 Catton Court"
                                },
                                "line3": {
                                    "type": "string",
                                    "example": "Oak Ridge"
                                },
                                "line4": {
                                    "type": "string",
                                    "example": "Somewhere"
                                },
                                "city": {
                                    "type": "string",
                                    "example": "Birmingham"
                                },
                                "state": {
                                    "type": "string",
                                    "example": "Essex"
                                },
                                "country": {
                                    "type": "string",
                                    "example": "Ireland"
                                },
                                "postcode": {
                                    "type": "string",
                                    "example": "CT12 8GR"
                                },
                                "label": {
                                    "type": "string",
                                    "enum": [
                                        "private",
                                        "business",
                                        "other",
                                        "invoice"
                                    ],
                                    "example": "private"
                                },
                                "isDefault": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "ownerId": {
                        "description": "The ID of the new owner of the person",
                        "type": "integer",
                        "nullable": true
                    },
                    "companyRecordName": {
                        "description": "The name of an existing company record to add the person to. (A new company record will be created if the company does not exist)",
                        "type": "string",
                        "example": "Amazon"
                    },
                    "companyRecordId": {
                        "description": "The ID of a company to add the person to.",
                        "type": "integer",
                        "example": 1234
                    },
                    "companyName": {
                        "description": "The company the person works for, which will not be associated with an existing company. (Required if `companyRecordName` or `companyRecordId` are not set)",
                        "type": "string",
                        "example": "Amazon"
                    },
                    "department": {
                        "type": "string",
                        "example": "Finance"
                    },
                    "title": {
                        "type": "string",
                        "example": "Managing Director"
                    },
                    "positionType": {
                        "type": "string",
                        "default": "permanent",
                        "enum": [
                            "permanent",
                            "interim",
                            "ned",
                            "parttime",
                            "temporary",
                            "contract",
                            "other"
                        ],
                        "example": "permanent"
                    },
                    "career": {
                        "description": "The career ID of the primary position. Careers and their IDs can be found using the `categories` API.",
                        "type": "integer",
                        "example": 1234
                    },
                    "industry": {
                        "description": "The industry ID of the primary position. Industries and their IDs can be found using the `categories` API.",
                        "type": "integer",
                        "example": 1234
                    },
                    "location": {
                        "description": "The location ID of the primary position. Locations and their IDs can be found using the `categories` API.",
                        "type": "integer",
                        "example": 1234
                    },
                    "startDate": {
                        "type": "string",
                        "example": "1998-04-30"
                    },
                    "endDate": {
                        "type": "string",
                        "example": "2005-06-23"
                    },
                    "startMonthUnknown": {
                        "description": "If the start month is unknown then put any month and day in the `startDate` field and set this field to `true`",
                        "type": "boolean",
                        "default": false
                    },
                    "endMonthUnknown": {
                        "description": "If the end month is unknown then put any month and day in the `endDate` field and set this field to `true`",
                        "type": "boolean",
                        "default": false
                    },
                    "summary": {
                        "type": "string",
                        "example": "Managed several team members to meet a strict schedule."
                    },
                    "assignmentId": {
                        "description": "The ID of an assignment that the person will be added to as a candidate",
                        "type": "integer"
                    },
                    "assignmentName": {
                        "description": "The name of an assignment to add the person to as a candidate. If an assignment with that name does not exist then a new one will be created.",
                        "type": "string"
                    },
                    "lists": {
                        "description": "An array of ids of the the lists that the person is in",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true
                    },
                    "customValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.customValue.store"
                        }
                    }
                },
                "type": "object"
            },
            "api.v2.person.update": {
                "title": "Person Update Request Body",
                "required": [
                    "firstName",
                    "lastName"
                ],
                "properties": {
                    "honorific": {
                        "type": "string",
                        "example": "Ms."
                    },
                    "firstName": {
                        "type": "string",
                        "example": "Jane"
                    },
                    "lastName": {
                        "type": "string",
                        "example": "Doe"
                    },
                    "headline": {
                        "type": "string",
                        "example": "I work well in a team."
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "url": {
                                    "type": "string",
                                    "example": "https://example.com"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "phones": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "number": {
                                    "type": "string",
                                    "example": "+123 456 789"
                                },
                                "isDefault": {
                                    "type": "boolean"
                                },
                                "label": {
                                    "type": "string",
                                    "enum": [
                                        "assistant",
                                        "billing",
                                        "direct",
                                        "home",
                                        "manager",
                                        "mobile",
                                        "other",
                                        "private",
                                        "switchboard",
                                        "work"
                                    ],
                                    "example": "work"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "emails": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "address": {
                                    "type": "string",
                                    "example": "me@example.com"
                                },
                                "isDefault": {
                                    "type": "boolean"
                                },
                                "label": {
                                    "type": "string",
                                    "enum": [
                                        "assistant",
                                        "billing",
                                        "direct",
                                        "home",
                                        "manager",
                                        "mobile",
                                        "other",
                                        "private",
                                        "switchboard",
                                        "work"
                                    ],
                                    "example": "work"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "addresses": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "line1": {
                                    "type": "string",
                                    "example": "Flat 2B"
                                },
                                "line2": {
                                    "type": "string",
                                    "example": "123 Catton Court"
                                },
                                "line3": {
                                    "type": "string",
                                    "example": "Oak Ridge"
                                },
                                "line4": {
                                    "type": "string",
                                    "example": "Somewhere"
                                },
                                "city": {
                                    "type": "string",
                                    "example": "Birmingham"
                                },
                                "state": {
                                    "type": "string",
                                    "example": "Essex"
                                },
                                "country": {
                                    "type": "string",
                                    "example": "Ireland"
                                },
                                "postcode": {
                                    "type": "string",
                                    "example": "CT12 8GR"
                                },
                                "label": {
                                    "type": "string",
                                    "enum": [
                                        "private",
                                        "business",
                                        "other",
                                        "invoice"
                                    ],
                                    "example": "private"
                                },
                                "isDefault": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "ownerId": {
                        "description": "The ID of the new owner of the person",
                        "type": "integer",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "api.v2.billing.storeRequest": {
                "title": "Task Store Request Body",
                "properties": {
                    "contactId": {
                        "type": "integer",
                        "example": "123"
                    }
                },
                "type": "object"
            },
            "api.v3.company.store": {
                "title": "Company Store Request Body",
                "required": [
                    "name",
                    "owner",
                    "_type"
                ],
                "properties": {
                    "_type": {
                        "description": "Must be 'info'(Updates all fields except addresses), 'addresses'(Only updates addresses), or 'all'",
                        "type": "string",
                        "example": "info"
                    },
                    "name": {
                        "type": "string",
                        "example": "Amazon"
                    },
                    "aliases": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "amzn"
                        }
                    },
                    "owner": {
                        "type": "integer",
                        "example": "1234"
                    },
                    "description": {
                        "type": "string",
                        "example": "The description of the company",
                        "nullable": true
                    },
                    "division": {
                        "type": "string",
                        "example": "The division or subsidiary of the company",
                        "nullable": true
                    },
                    "size": {
                        "type": "string",
                        "example": "The size of the company",
                        "nullable": true
                    },
                    "industries": {
                        "description": "An array of industry ids",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "url": {
                                    "type": "string",
                                    "example": "https://example.com"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "logo": {
                        "type": "string",
                        "example": "https://cloud.notactivelylooking.com/123",
                        "nullable": true
                    },
                    "specialities": {
                        "type": "string",
                        "example": "The specialities of the company",
                        "nullable": true
                    },
                    "email": {
                        "type": "string",
                        "example": "me@example.com",
                        "nullable": true
                    },
                    "phone": {
                        "type": "string",
                        "example": "+123 456 789",
                        "nullable": true
                    },
                    "projectId": {
                        "type": "integer",
                        "example": "1234",
                        "nullable": true
                    },
                    "projectName": {
                        "type": "string",
                        "example": "Chief Technology Officer - London",
                        "nullable": true
                    },
                    "addresses": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "label": {
                                    "type": "string",
                                    "enum": [
                                        "hq",
                                        "billing",
                                        "subsidiary",
                                        "work"
                                    ],
                                    "example": "hq"
                                },
                                "building": {
                                    "type": "string",
                                    "example": "Catton Court"
                                },
                                "street": {
                                    "type": "string",
                                    "example": "Oak Ridge"
                                },
                                "city": {
                                    "type": "string",
                                    "example": "Birmingham"
                                },
                                "state": {
                                    "type": "string",
                                    "example": "Essex"
                                },
                                "postcode": {
                                    "type": "string",
                                    "example": "CT12 8GR"
                                },
                                "country": {
                                    "type": "string",
                                    "example": "Ireland"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "customValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.customValue.store"
                        }
                    }
                },
                "type": "object"
            },
            "api.v3.company.update": {
                "title": "Company Store Request Body",
                "required": [
                    "name",
                    "owner",
                    "_type"
                ],
                "properties": {
                    "_type": {
                        "description": "Must be 'info'(Updates all fields except addresses), 'addresses'(Only updates addresses), or 'all'",
                        "type": "string",
                        "example": "info"
                    },
                    "name": {
                        "type": "string",
                        "example": "Amazon"
                    },
                    "aliases": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "amzn"
                        }
                    },
                    "owner": {
                        "type": "integer",
                        "example": "1234"
                    },
                    "description": {
                        "type": "string",
                        "example": "The description of the company",
                        "nullable": true
                    },
                    "division": {
                        "type": "string",
                        "example": "The division or subsidiary of the company",
                        "nullable": true
                    },
                    "size": {
                        "type": "string",
                        "example": "The size of the company",
                        "nullable": true
                    },
                    "industries": {
                        "description": "An array of industry ids",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "url": {
                                    "type": "string",
                                    "example": "https://example.com"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "logo": {
                        "type": "string",
                        "example": "https://cloud.notactivelylooking.com/123",
                        "nullable": true
                    },
                    "specialities": {
                        "type": "string",
                        "example": "The specialities of the company",
                        "nullable": true
                    },
                    "email": {
                        "type": "string",
                        "example": "me@example.com",
                        "nullable": true
                    },
                    "phone": {
                        "type": "string",
                        "example": "+123 456 789",
                        "nullable": true
                    },
                    "projectId": {
                        "type": "integer",
                        "example": "1234",
                        "nullable": true
                    },
                    "projectName": {
                        "type": "string",
                        "example": "Chief Technology Officer - London",
                        "nullable": true
                    },
                    "addresses": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "label": {
                                    "type": "string",
                                    "enum": [
                                        "hq",
                                        "billing",
                                        "subsidiary",
                                        "work"
                                    ],
                                    "example": "hq"
                                },
                                "building": {
                                    "type": "string",
                                    "example": "Catton Court"
                                },
                                "street": {
                                    "type": "string",
                                    "example": "Oak Ridge"
                                },
                                "city": {
                                    "type": "string",
                                    "example": "Birmingham"
                                },
                                "state": {
                                    "type": "string",
                                    "example": "Essex"
                                },
                                "postcode": {
                                    "type": "string",
                                    "example": "CT12 8GR"
                                },
                                "country": {
                                    "type": "string",
                                    "example": "Ireland"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "api.v3.projectContactStoreRequest": {
                "title": "Project Contacts Store Request Body",
                "required": [
                    "contactId"
                ],
                "properties": {
                    "contactId": {
                        "description": "The ID of a contact to add ",
                        "type": "integer",
                        "example": 1234
                    }
                },
                "type": "object"
            },
            "api.v3.person.store": {
                "title": "Person Store Request Body",
                "properties": {
                    "honorific": {
                        "type": "string",
                        "example": "Ms."
                    },
                    "firstName": {
                        "type": "string",
                        "example": "Jane"
                    },
                    "lastName": {
                        "type": "string",
                        "example": "Doe"
                    },
                    "headline": {
                        "type": "string",
                        "example": "I work well in a team."
                    },
                    "aliases": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "Doey"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "url": {
                                    "type": "string",
                                    "example": "https://example.com"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "phones": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "number": {
                                    "type": "string",
                                    "example": "+123 456 789"
                                },
                                "isDefault": {
                                    "type": "boolean"
                                },
                                "label": {
                                    "type": "string",
                                    "enum": [
                                        "assistant",
                                        "billing",
                                        "direct",
                                        "home",
                                        "manager",
                                        "mobile",
                                        "other",
                                        "private",
                                        "switchboard",
                                        "work"
                                    ],
                                    "example": "work"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "emails": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "address": {
                                    "type": "string",
                                    "example": "me@example.com"
                                },
                                "isDefault": {
                                    "type": "boolean"
                                },
                                "label": {
                                    "type": "string",
                                    "enum": [
                                        "assistant",
                                        "billing",
                                        "direct",
                                        "home",
                                        "manager",
                                        "mobile",
                                        "other",
                                        "private",
                                        "switchboard",
                                        "work"
                                    ],
                                    "example": "work"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "addresses": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "line1": {
                                    "type": "string",
                                    "example": "Flat 2B"
                                },
                                "line2": {
                                    "type": "string",
                                    "example": "123 Catton Court"
                                },
                                "line3": {
                                    "type": "string",
                                    "example": "Oak Ridge"
                                },
                                "line4": {
                                    "type": "string",
                                    "example": "Somewhere"
                                },
                                "city": {
                                    "type": "string",
                                    "example": "Birmingham"
                                },
                                "state": {
                                    "type": "string",
                                    "example": "Essex"
                                },
                                "country": {
                                    "type": "string",
                                    "example": "Ireland"
                                },
                                "postcode": {
                                    "type": "string",
                                    "example": "CT12 8GR"
                                },
                                "label": {
                                    "type": "string",
                                    "enum": [
                                        "private",
                                        "business",
                                        "other",
                                        "invoice"
                                    ],
                                    "example": "private"
                                },
                                "isDefault": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "ownerId": {
                        "description": "The ID of the new owner of the person",
                        "type": "integer",
                        "nullable": true
                    },
                    "companyRecordName": {
                        "description": "The name of an existing company record to add the person to. (A new company record will be created if the company does not exist)",
                        "type": "string",
                        "example": "Amazon"
                    },
                    "companyRecordId": {
                        "description": "The ID of a company to add the person to.",
                        "type": "integer",
                        "example": 1234
                    },
                    "companyName": {
                        "description": "The company the person works for, which will not be associated with an existing company. (Required if `companyRecordName` or `companyRecordId` are not set)",
                        "type": "string",
                        "example": "Amazon"
                    },
                    "department": {
                        "type": "string",
                        "example": "Finance"
                    },
                    "title": {
                        "type": "string",
                        "example": "Managing Director"
                    },
                    "positionType": {
                        "type": "string",
                        "default": "permanent",
                        "enum": [
                            "permanent",
                            "interim",
                            "ned",
                            "parttime",
                            "temporary",
                            "contract",
                            "other"
                        ],
                        "example": "permanent"
                    },
                    "career": {
                        "description": "The career ID of the primary position. Careers and their IDs can be found using the `categories` API.",
                        "type": "integer",
                        "example": 1234
                    },
                    "industry": {
                        "description": "The industry ID of the primary position. Industries and their IDs can be found using the `categories` API.",
                        "type": "integer",
                        "example": 1234
                    },
                    "location": {
                        "description": "The location ID of the primary position. Locations and their IDs can be found using the `categories` API.",
                        "type": "integer",
                        "example": 1234
                    },
                    "startDate": {
                        "type": "string",
                        "example": "1998-04-30"
                    },
                    "endDate": {
                        "type": "string",
                        "example": "2005-06-23"
                    },
                    "startMonthUnknown": {
                        "description": "If the start month is unknown then put any month and day in the `startDate` field and set this field to `true`",
                        "type": "boolean",
                        "default": false
                    },
                    "endMonthUnknown": {
                        "description": "If the end month is unknown then put any month and day in the `endDate` field and set this field to `true`",
                        "type": "boolean",
                        "default": false
                    },
                    "summary": {
                        "type": "string",
                        "example": "Managed several team members to meet a strict schedule."
                    },
                    "customValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.customValue.store"
                        }
                    },
                    "projects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v3.person.storeRequest.project"
                        }
                    }
                },
                "type": "object"
            },
            "api.v3.person.update": {
                "title": "Person Update Request Body",
                "required": [
                    "firstName",
                    "lastName",
                    "companyRecordName",
                    "companyRecordId",
                    "companyName"
                ],
                "properties": {
                    "honorific": {
                        "type": "string",
                        "example": "Ms."
                    },
                    "firstName": {
                        "type": "string",
                        "example": "Jane"
                    },
                    "lastName": {
                        "type": "string",
                        "example": "Doe"
                    },
                    "headline": {
                        "type": "string",
                        "example": "I work well in a team."
                    },
                    "aliases": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "Doey"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "url": {
                                    "type": "string",
                                    "example": "https://example.com"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "phones": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "number": {
                                    "type": "string",
                                    "example": "+123 456 789"
                                },
                                "isDefault": {
                                    "type": "boolean"
                                },
                                "label": {
                                    "type": "string",
                                    "enum": [
                                        "assistant",
                                        "billing",
                                        "direct",
                                        "home",
                                        "manager",
                                        "mobile",
                                        "other",
                                        "private",
                                        "switchboard",
                                        "work"
                                    ],
                                    "example": "work"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "emails": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "address": {
                                    "type": "string",
                                    "example": "me@example.com"
                                },
                                "isDefault": {
                                    "type": "boolean"
                                },
                                "label": {
                                    "type": "string",
                                    "enum": [
                                        "assistant",
                                        "billing",
                                        "direct",
                                        "home",
                                        "manager",
                                        "mobile",
                                        "other",
                                        "private",
                                        "switchboard",
                                        "work"
                                    ],
                                    "example": "work"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "addresses": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "line1": {
                                    "type": "string",
                                    "example": "Flat 2B"
                                },
                                "line2": {
                                    "type": "string",
                                    "example": "123 Catton Court"
                                },
                                "line3": {
                                    "type": "string",
                                    "example": "Oak Ridge"
                                },
                                "line4": {
                                    "type": "string",
                                    "example": "Somewhere"
                                },
                                "city": {
                                    "type": "string",
                                    "example": "Birmingham"
                                },
                                "state": {
                                    "type": "string",
                                    "example": "Essex"
                                },
                                "country": {
                                    "type": "string",
                                    "example": "Ireland"
                                },
                                "postcode": {
                                    "type": "string",
                                    "example": "CT12 8GR"
                                },
                                "label": {
                                    "type": "string",
                                    "enum": [
                                        "private",
                                        "business",
                                        "other",
                                        "invoice"
                                    ],
                                    "example": "private"
                                },
                                "isDefault": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "ownerId": {
                        "description": "The ID of the new owner of the person",
                        "type": "integer",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "api.v3.person.pipelineUpdateRequest": {
                "title": "Candidates Tags Store Request Body",
                "properties": {
                    "candidates": {
                        "description": "An array of person IDs that will have the specified tags added.",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 1234
                        }
                    },
                    "tags": {
                        "description": "An array of pipeline tag IDs that will be added to the candidates.",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 1234
                        }
                    }
                },
                "type": "object"
            },
            "api.v3.person.pipelineUpdateResponse": {
                "title": "Candidates Tags Store Response",
                "properties": {
                    "updated": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "meta": {
                                    "properties": {
                                        "candidate": {
                                            "properties": {
                                                "pipelineTags": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/api.status"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "notUpdated": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "fullName": {
                                    "type": "string",
                                    "example": "Jane Doe"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "api.v3.person.candidatesUpdateRequest": {
                "title": "Candidates Store Request Body",
                "required": [
                    "candidates",
                    "label"
                ],
                "properties": {
                    "candidates": {
                        "description": "An array of person IDs that will be added to the project.",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 1234
                        }
                    },
                    "projectId": {
                        "description": "The ID of a project to add the candidates to.",
                        "type": "integer",
                        "example": 1234
                    },
                    "projectName": {
                        "description": "Can be used instead of `projectId` and will search for a project with the name or create if it doesn't exist.",
                        "type": "string",
                        "example": "CTO"
                    },
                    "label": {
                        "description": "The type of project to add the candidates to.",
                        "type": "string",
                        "enum": [
                            "assignment",
                            "opportunity",
                            "list"
                        ]
                    }
                },
                "type": "object"
            },
            "api.v3.project.default.api.person.candidatesUpdateResponse": {
                "title": "Candidates Store Response",
                "properties": {
                    "updated": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "counts": {
                                    "properties": {
                                        "relationships": {
                                            "properties": {
                                                "assignmentsAsCandidate": {
                                                    "type": "integer",
                                                    "example": 4
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "notUpdated": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "api.v3.project.store": {
                "title": "Project Store Request Body",
                "required": [
                    "name",
                    "ownerId",
                    "_type",
                    "label"
                ],
                "properties": {
                    "leadId": {
                        "description": "The ID of the person to add as project contact",
                        "type": "integer",
                        "example": "1234"
                    },
                    "_type": {
                        "type": "string",
                        "enum": [
                            "info",
                            "custom"
                        ],
                        "example": "info"
                    },
                    "label": {
                        "type": "string",
                        "enum": [
                            "assignment",
                            "opportunity",
                            "list"
                        ],
                        "example": "assignment"
                    },
                    "name": {
                        "type": "string",
                        "example": "Regional Manager"
                    },
                    "projectId": {
                        "type": "string",
                        "example": "EZ123"
                    },
                    "description": {
                        "type": "string",
                        "example": "The description of the assignment",
                        "nullable": true
                    },
                    "companyId": {
                        "description": "The ID of a company to add to project.",
                        "type": "string",
                        "example": 1234
                    },
                    "companyName": {
                        "description": "The name of an existing company record to add to the project. (A new company record will be created if the company does not exist)",
                        "type": "string",
                        "example": "Amazon"
                    },
                    "ownerId": {
                        "type": "integer",
                        "example": "1234"
                    },
                    "industries": {
                        "description": "An array of industry ids",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true
                    },
                    "listId": {
                        "description": "The ID of the list",
                        "type": "integer"
                    },
                    "startDate": {
                        "description": "For assignments only. The date the assignment starts.",
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "endDate": {
                        "description": "For assignments only. The date the assignment is ends.",
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "probability": {
                        "type": "integer",
                        "example": "30"
                    },
                    "customValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.customValue.store"
                        }
                    }
                },
                "type": "object"
            },
            "api.v3.project.update": {
                "title": "Project Store Request Body",
                "required": [
                    "name",
                    "ownerId",
                    "_type"
                ],
                "properties": {
                    "leadId": {
                        "description": "The ID of the person to add as project contact",
                        "type": "integer",
                        "example": "1234"
                    },
                    "_type": {
                        "type": "string",
                        "enum": [
                            "info",
                            "custom"
                        ],
                        "example": "info"
                    },
                    "name": {
                        "type": "string",
                        "example": "Regional Manager"
                    },
                    "projectId": {
                        "type": "string",
                        "example": "EZ123"
                    },
                    "description": {
                        "type": "string",
                        "example": "The description of the assignment",
                        "nullable": true
                    },
                    "companyId": {
                        "description": "The ID of a company to add to project.",
                        "type": "string",
                        "example": 1234
                    },
                    "companyName": {
                        "description": "The name of an existing company record to add to the project. (A new company record will be created if the company does not exist)",
                        "type": "string",
                        "example": "Amazon"
                    },
                    "ownerId": {
                        "type": "integer",
                        "example": "1234"
                    },
                    "industries": {
                        "description": "An array of industry ids",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true
                    },
                    "listId": {
                        "description": "The ID of the list",
                        "type": "integer"
                    },
                    "startDate": {
                        "description": "For assignments only. The date the assignment starts.",
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "endDate": {
                        "description": "For assignments only. The date the assignment is ends.",
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "probability": {
                        "type": "integer",
                        "example": "30"
                    }
                },
                "type": "object"
            },
            "api.fixedFee.storeRequest": {
                "title": "Fixed Fee Store Request Body",
                "required": [
                    "amount",
                    "recipient",
                    "tag"
                ],
                "properties": {
                    "amount": {
                        "$ref": "#/components/schemas/api.currencyAmount"
                    },
                    "billingId": {
                        "type": "integer",
                        "example": "123"
                    },
                    "briefId": {
                        "type": "integer",
                        "example": "123"
                    },
                    "dueDate": {
                        "type": "string",
                        "example": "2022-05-30"
                    },
                    "id": {
                        "type": "integer",
                        "example": "123"
                    },
                    "note": {
                        "type": "string",
                        "example": "This is a note"
                    },
                    "paidAt": {
                        "type": "string",
                        "example": "2022-05-30"
                    },
                    "refNumber": {
                        "type": "string",
                        "example": "ABC-12345"
                    },
                    "tag": {
                        "type": "integer",
                        "example": "123"
                    },
                    "recipient": {
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "candidate",
                                    "person",
                                    "officeGroup"
                                ],
                                "example": "candidate"
                            },
                            "id": {
                                "type": "integer",
                                "example": "123"
                            },
                            "name": {
                                "type": "string",
                                "example": "Joe Bloggs"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "api.invoice.storeRequest": {
                "title": "Invoice Store Request Body",
                "required": [
                    "items",
                    "currency",
                    "invoiceAt",
                    "tag"
                ],
                "properties": {
                    "refNumber": {
                        "description": "Class InvoiceStore",
                        "type": "string",
                        "example": "inv1234"
                    },
                    "invoiceNumber": {
                        "description": "If using automatic numbering, input the appropriate number pattern to be used and the next available number will be added to the invoice.",
                        "type": "string",
                        "example": "UK001"
                    },
                    "paidAt": {
                        "type": "string",
                        "example": "2022-05-30"
                    },
                    "invoicedAt": {
                        "type": "string",
                        "example": "2022-05-30"
                    },
                    "dueDate": {
                        "type": "string",
                        "example": "2022-05-30"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "tag": {
                                    "description": "The tag for the invoice item",
                                    "type": "integer",
                                    "example": "12"
                                },
                                "description": {
                                    "type": "string",
                                    "example": "Placement Fee"
                                },
                                "amount": {
                                    "$ref": "#/components/schemas/api.currencyAmount"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "owner": {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": "123"
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "candidate",
                                    "person",
                                    "officeGroup"
                                ],
                                "example": "candidate"
                            }
                        },
                        "type": "object"
                    },
                    "tag": {
                        "description": "The tag for the invoice",
                        "type": "integer",
                        "example": "12"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/api.currency"
                    },
                    "percentSplits": {
                        "required": [
                            "percent",
                            "recipient",
                            "tag"
                        ],
                        "type": "array",
                        "items": {
                            "properties": {
                                "percent": {
                                    "type": "integer",
                                    "example": "30"
                                },
                                "briefId": {
                                    "type": "integer",
                                    "example": "123"
                                },
                                "id": {
                                    "type": "integer",
                                    "example": "123"
                                },
                                "refNumber": {
                                    "type": "string",
                                    "example": "ABC-12345"
                                },
                                "tag": {
                                    "type": "integer",
                                    "example": "123"
                                },
                                "recipient": {
                                    "properties": {
                                        "type": {
                                            "type": "string",
                                            "example": "candidate"
                                        },
                                        "id": {
                                            "type": "integer",
                                            "example": "123"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Joe Bloggs"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "api.invoice.lock": {
                "title": "Invoice Lock Request Body",
                "required": [
                    "dueDate",
                    "invoiceNumber",
                    "templateId",
                    "locale",
                    "type"
                ],
                "properties": {
                    "dueDate": {
                        "description": "Class LockInvoice",
                        "type": "string",
                        "example": "2022-05-30"
                    },
                    "invoiceNumber": {
                        "type": "string",
                        "example": "EZ001"
                    },
                    "templateId": {
                        "type": "integer",
                        "example": "123"
                    },
                    "locale": {
                        "type": "string",
                        "example": "en"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "word",
                            "pdf"
                        ],
                        "example": "pdf"
                    }
                },
                "type": "object"
            },
            "api.revenue.storeRequest": {
                "title": "Revenue Store Request Body",
                "required": [
                    "amount",
                    "currency",
                    "date",
                    "tag",
                    "probability"
                ],
                "properties": {
                    "amount": {
                        "$ref": "#/components/schemas/api.currencyAmount"
                    },
                    "date": {
                        "type": "string",
                        "example": "2022-05-30"
                    },
                    "tag": {
                        "type": "integer",
                        "example": "123"
                    },
                    "probability": {
                        "type": "integer",
                        "example": "50"
                    },
                    "billingId": {
                        "type": "integer",
                        "example": "123"
                    },
                    "refNumber": {
                        "type": "string",
                        "example": "ABC-12345"
                    },
                    "owner": {
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "candidate",
                                    "person",
                                    "officeGroup"
                                ],
                                "example": "candidate"
                            },
                            "id": {
                                "type": "integer",
                                "example": "123"
                            }
                        },
                        "type": "object"
                    },
                    "percentSplits": {
                        "required": [
                            "percent",
                            "recipient",
                            "tag"
                        ],
                        "type": "array",
                        "items": {
                            "properties": {
                                "percent": {
                                    "type": "integer",
                                    "example": "30"
                                },
                                "briefId": {
                                    "type": "integer",
                                    "example": "123"
                                },
                                "id": {
                                    "type": "integer",
                                    "example": "123"
                                },
                                "refNumber": {
                                    "type": "string",
                                    "example": "ABC-12345"
                                },
                                "tag": {
                                    "type": "integer",
                                    "example": "123"
                                },
                                "recipient": {
                                    "properties": {
                                        "type": {
                                            "type": "string",
                                            "example": "candidate"
                                        },
                                        "id": {
                                            "type": "integer",
                                            "example": "123"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Joe Bloggs"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "api.customValue.storeRequest": {
                "title": "Custom Value Update Request Body",
                "required": [
                    "fieldId",
                    "value"
                ],
                "properties": {
                    "customValues": {
                        "description": "Class CustomValueRequest",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.customValue.update"
                        }
                    }
                },
                "type": "object"
            },
            "api.document.default": {
                "title": "Document Request Body",
                "required": [
                    "files[]"
                ],
                "properties": {
                    "files[]": {
                        "description": "An array of binary files",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "binary"
                        }
                    }
                },
                "type": "object"
            },
            "api.importEmail.default": {
                "title": "Person Email Request Body",
                "required": [
                    "from",
                    "to",
                    "subject",
                    "text"
                ],
                "properties": {
                    "from": {
                        "description": "The sender's email address",
                        "type": "string",
                        "example": "joe@example.com"
                    },
                    "to": {
                        "description": "The email address of the recipient. Separate multiple email addresses using comma. (e.g. \"person1@example.com, anotherperson@example.com\")",
                        "type": "string",
                        "example": "person1@example.com, anotherperson@example.com"
                    },
                    "cc": {
                        "description": "The email address of the cc recipient. Separate multiple email addresses using comma eg (e.g. \"person1@example.com, anotherperson@example.com\")",
                        "type": "string",
                        "example": "person1@example.com, anotherperson@example.com"
                    },
                    "bcc": {
                        "description": "The email address of the bcc recipient. Separate multiple email addresses using comma. (e.g. \"person1@example.com, anotherperson@example.com\")",
                        "type": "string",
                        "example": "person1@example.com, anotherperson@example.com"
                    },
                    "subject": {
                        "description": "The subject of the email",
                        "type": "string",
                        "example": "Meeting Arrangements for Thursday"
                    },
                    "body": {
                        "description": "The body of the email",
                        "type": "string",
                        "example": "Dear Sir, Thank you for the ..."
                    },
                    "microsoftGraphId": {
                        "description": "The Microsoft Graph id of the email",
                        "type": "string",
                        "example": "AQMkADAwATMwMAItNjFiYgAtZmQ4NS0wMAI..."
                    },
                    "microsoftGraphMessageId": {
                        "description": "The Microsoft Graph message id of the email",
                        "type": "string",
                        "example": "&#60;TYZPR02MB560C3D7B09@TY45645617.test.prod.outlook.com&#62;"
                    },
                    "createdAt": {
                        "description": "The date and time the email was created",
                        "type": "string",
                        "example": "2023-04-30T08:53:20.000000Z"
                    }
                },
                "type": "object"
            },
            "api.list.storeRequest": {
                "title": "List Store Request Body",
                "required": [
                    "name",
                    "owner"
                ],
                "properties": {
                    "name": {
                        "description": "Class Store",
                        "type": "string",
                        "example": "ListA"
                    },
                    "owner": {
                        "type": "integer",
                        "example": "1234"
                    },
                    "pipeline": {
                        "$ref": "#/components/schemas/api.list.pipelineTask"
                    }
                },
                "type": "object"
            },
            "api.offlimits.agreement.storeRequest": {
                "title": "Off-limit Agreement Request Body",
                "description": "A note regarding the off-limits agreement",
                "properties": {
                    "endDate": {
                        "description": "The date you want the off-limits agreeement to end",
                        "type": "string",
                        "example": "2022-07-28"
                    },
                    "filter": {
                        "description": "The search term. Required if you are passing through 'companies'.",
                        "type": "string",
                        "example": "Amazon"
                    },
                    "constraint": {
                        "description": "The search constraint of the filter. Required if you are passing through 'companies'.",
                        "type": "string",
                        "enum": [
                            "begins",
                            "contains",
                            "exact",
                            "contains-exact"
                        ],
                        "example": "contains"
                    },
                    "offLimitItemId": {
                        "description": "The id of the person you are setting an off-limits agreement to. Required if you are passing through 'people'.",
                        "type": "integer",
                        "example": "14799"
                    },
                    "description": {
                        "type": "string",
                        "example": "Off Limit Agreement with Amazon"
                    }
                },
                "type": "object"
            },
            "api.education.storeRequest": {
                "title": "Person Education Request Body",
                "required": [
                    "degree",
                    "school"
                ],
                "properties": {
                    "primary": {
                        "description": "Class Education Request",
                        "type": "boolean"
                    },
                    "degree": {
                        "type": "string",
                        "example": "First Class Honours"
                    },
                    "field": {
                        "type": "string",
                        "example": "French Literature"
                    },
                    "school": {
                        "type": "string",
                        "example": "Oxford University"
                    },
                    "startDate": {
                        "type": "integer",
                        "example": 2011
                    },
                    "endDate": {
                        "description": "Enter year. Otherwise if current, then enter 'present'",
                        "type": "integer",
                        "example": 2018
                    },
                    "summary": {
                        "type": "string",
                        "example": "Education Summary"
                    }
                },
                "type": "object"
            },
            "api.position.storeRequest": {
                "title": "Person Position Request Body",
                "required": [
                    "companyRecordName",
                    "companyRecordId",
                    "companyName"
                ],
                "properties": {
                    "primary": {
                        "description": "Class Position Request",
                        "type": "boolean"
                    },
                    "positionType": {
                        "type": "string",
                        "default": "permanent",
                        "enum": [
                            "permanent",
                            "interim",
                            "ned",
                            "parttime",
                            "temporary",
                            "contract",
                            "other"
                        ],
                        "example": "permanent"
                    },
                    "companyName": {
                        "description": "The company the person works for, which will not be associated with an existing company. (Required if `companyRecordName` or `companyRecordId` are not set)",
                        "type": "string",
                        "example": "Amazon"
                    },
                    "companyRecordName": {
                        "description": "The name of an existing company record to add the person to. (A new company record will be created if the company does not exist)",
                        "type": "string",
                        "example": "Amazon"
                    },
                    "companyRecordId": {
                        "description": "The ID of a company to add the person to.",
                        "type": "integer",
                        "example": 1234
                    },
                    "title": {
                        "type": "string",
                        "example": "Director of Communication"
                    },
                    "teamSizeId": {
                        "$ref": "#/components/schemas/api.teamSizeId"
                    },
                    "career": {
                        "description": "The career ID of the position. Careers and their IDs can be found using the `categories` API.",
                        "type": "integer",
                        "example": 1234
                    },
                    "industry": {
                        "description": "The industry ID of the position. Industries and their IDs can be found using the `categories` API.",
                        "type": "integer",
                        "example": 1234
                    },
                    "location": {
                        "description": "The location ID of the position. Locations and their IDs can be found using the `categories` API.",
                        "type": "integer",
                        "example": 1234
                    },
                    "summary": {
                        "type": "string",
                        "example": "Summary of the position"
                    },
                    "department": {
                        "type": "string",
                        "example": "Finance"
                    },
                    "startDate": {
                        "type": "string",
                        "example": "2011-08-14"
                    },
                    "endDate": {
                        "type": "string",
                        "example": "2018-03-25"
                    },
                    "achievements": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "Managed all the finances."
                        }
                    },
                    "skills": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "Good at managing finances."
                        }
                    },
                    "companyTypes": {
                        "type": "array",
                        "items": {
                            "description": "The company types IDs of the position. Company Types and their IDs can be found using the `categories` API.",
                            "type": "integer"
                        }
                    },
                    "startMonthUnknown": {
                        "description": "If the start month is unknown then put any month and day in the `startDate` field and set this field to `true`",
                        "type": "boolean",
                        "default": false
                    },
                    "endMonthUnknown": {
                        "description": "If the end month is unknown then put any month and day in the `endDate` field and set this field to `true`",
                        "type": "boolean",
                        "default": false
                    }
                },
                "type": "object"
            },
            "api.positions.multiple": {
                "title": "Person multiple Positions Request Body",
                "description": "The body for creating and updating multiple positions for a person's",
                "properties": {
                    "positions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.position.storeRequest"
                        }
                    }
                },
                "type": "object"
            },
            "api.currentStatus.storeRequest": {
                "title": "Person Current Status Request Body",
                "required": [
                    "positionType",
                    "status"
                ],
                "properties": {
                    "positionType": {
                        "description": "Type of position",
                        "type": "string",
                        "enum": [
                            "permanent",
                            "interim",
                            "parttime",
                            "contract",
                            "temporary",
                            "ned",
                            "other"
                        ],
                        "example": "permanent"
                    },
                    "nedClassificationId": {
                        "description": "Classification of NED role if positionType is ned",
                        "type": "integer",
                        "example": 1234
                    },
                    "careers": {
                        "description": "An array of career IDs",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 1234
                        }
                    },
                    "industries": {
                        "description": "An array of industry IDs",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 1234
                        }
                    },
                    "locations": {
                        "description": "An array of location IDs",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 1234
                        }
                    },
                    "status": {
                        "description": "A scale from 0 to 4 indicating how actively the individual is looking for a new job. 0 is Not looking, 4 is actively looking.",
                        "type": "integer",
                        "enum": [
                            0,
                            1,
                            2,
                            3,
                            4
                        ],
                        "example": 1
                    }
                },
                "type": "object"
            },
            "api.meeting.default": {
                "title": "Meeting Request Body",
                "required": [
                    "title",
                    "timezone",
                    "date",
                    "end",
                    "tag",
                    "private",
                    "sensitivity",
                    "allDay",
                    "includeDetails",
                    "includeName"
                ],
                "properties": {
                    "title": {
                        "description": "The subject of the meeting",
                        "type": "string",
                        "example": "Q3 Target Review"
                    },
                    "owners": {
                        "description": "An array of attendee person ids",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting.owners"
                        }
                    },
                    "note": {
                        "description": "A simple note for the meeting",
                        "type": "string",
                        "example": "John will attend!",
                        "nullable": true
                    },
                    "timezone": {
                        "description": "Set a timezone",
                        "type": "string",
                        "example": "Europe/London"
                    },
                    "date": {
                        "description": "Set a start date and time for the meeting",
                        "type": "string",
                        "example": "2023-07-20 13:00:00"
                    },
                    "end": {
                        "description": "Set an end date and time for the meeting",
                        "type": "string",
                        "example": "2023-07-20 14:00:00"
                    },
                    "address": {
                        "description": "Set a location for the meeting",
                        "type": "string",
                        "example": "London Office"
                    },
                    "agenda": {
                        "description": "Set an agenda for the meeting",
                        "type": "string",
                        "example": "We will discuss progress during Q3"
                    },
                    "tag": {
                        "description": "The ID of the status tag",
                        "type": "integer",
                        "example": "1234"
                    },
                    "private": {
                        "description": "Make private in Ezekia",
                        "type": "boolean",
                        "example": true
                    },
                    "sensitivity": {
                        "description": "Make private in Outlook",
                        "type": "boolean",
                        "example": true
                    },
                    "allDay": {
                        "description": "Is this meeting all day?",
                        "type": "boolean",
                        "example": true
                    },
                    "details": {
                        "description": "Add additional details about the meeting",
                        "type": "string",
                        "example": "We will review Q3 and discuss Q4",
                        "nullable": true
                    },
                    "includeDetails": {
                        "description": "Include additional details in the email",
                        "type": "boolean",
                        "example": true
                    },
                    "includeName": {
                        "description": "Include person name in the email",
                        "type": "boolean",
                        "example": true
                    },
                    "sendInvite": {
                        "description": "Send an invite to the attendees. By default, this is set to true. To disable it, set it to false.",
                        "type": "boolean",
                        "example": false
                    },
                    "microsoftGraphIntegrationId": {
                        "description": "Add the Microsoft Graph integration ID (if applicable)",
                        "type": "integer",
                        "example": "2",
                        "nullable": true
                    },
                    "channels": {
                        "description": "Add the type and id to associate the message with",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting.channels"
                        },
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "api.meeting.channels": {
                "title": "Meeting Channels Request Body",
                "description": "The data type name which the meeting belongs to",
                "properties": {
                    "id": {
                        "description": "The data type id which the meeting belongs to",
                        "type": "integer",
                        "example": "1234"
                    },
                    "label": {
                        "type": "string",
                        "example": "assignment"
                    }
                },
                "type": "object",
                "enum": [
                    "assignment",
                    "opportunity",
                    "person",
                    "company"
                ]
            },
            "api.meeting.owners": {
                "title": "Meeting Owners Request Body",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234,
                        "nullable": true
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "candidate",
                            "person"
                        ],
                        "example": "candidate",
                        "nullable": true
                    },
                    "fullname": {
                        "type": "string",
                        "example": "Jane Doe",
                        "nullable": true
                    },
                    "email": {
                        "type": "string",
                        "example": "me@example.com"
                    }
                },
                "type": "object"
            },
            "api.meeting.updatePinned": {
                "title": "Meeting Update Pinned",
                "required": [
                    "pinned"
                ],
                "properties": {
                    "pinned": {
                        "description": "Set whether the meeting should be pinned or not",
                        "type": "boolean",
                        "example": true
                    }
                },
                "type": "object"
            },
            "api.note.storeRequest": {
                "title": "Person Update Request Body",
                "properties": {
                    "noteText": {
                        "description": "Class NoteRequest",
                        "type": "string",
                        "example": "Added from email"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 1234
                        }
                    },
                    "context": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "type": {
                                    "type": "string",
                                    "enum": [
                                        "executive",
                                        "person",
                                        "client",
                                        "company",
                                        "assignment",
                                        "opportunity"
                                    ]
                                }
                            },
                            "type": "object"
                        }
                    },
                    "ownerId": {
                        "description": "The user id of the owner of the note if not provided the current user will be used",
                        "type": "integer",
                        "example": 1234
                    }
                },
                "type": "object"
            },
            "api.task.storeRequest": {
                "title": "Task Store",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/api.task.default"
                    },
                    {
                        "properties": {
                            "priority": {
                                "description": "Set a priority for the task",
                                "type": "integer",
                                "example": 1
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "api.task.update": {
                "title": "Task Update",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/api.task.default"
                    }
                ]
            },
            "api.task.updateDone": {
                "title": "Task Update Done",
                "required": [
                    "done"
                ],
                "properties": {
                    "done": {
                        "description": "Set whether the task has been completed or not",
                        "type": "boolean",
                        "example": true
                    }
                },
                "type": "object"
            },
            "api.task.updatePriority": {
                "title": "Task Update Priority",
                "required": [
                    "priority"
                ],
                "properties": {
                    "priority": {
                        "description": "Set the the priority level of the task (4 no priority, 3 low, 2 medium, 1 high)",
                        "type": "integer",
                        "example": 4
                    }
                },
                "type": "object",
                "enum": [
                    1,
                    2,
                    3,
                    4
                ]
            },
            "api.task.updatePinned": {
                "title": "Task Update Pinned",
                "required": [
                    "pinned"
                ],
                "properties": {
                    "pinned": {
                        "description": "Set whether the task should be pinned or not",
                        "type": "boolean",
                        "example": true
                    }
                },
                "type": "object"
            },
            "api.task.default": {
                "title": "Task Request Body",
                "required": [
                    "title",
                    "owners",
                    "timezone",
                    "date",
                    "private",
                    "tag"
                ],
                "properties": {
                    "title": {
                        "description": "The title of the task",
                        "type": "string",
                        "example": "Arrange meeting for Thursday"
                    },
                    "owners": {
                        "description": "An array of assigned person ids",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 4321
                        }
                    },
                    "note": {
                        "description": "A simple note for the task",
                        "type": "string",
                        "example": "John will attend!"
                    },
                    "timezone": {
                        "description": "Set a timezone for the due date",
                        "type": "string",
                        "example": "Europe/London"
                    },
                    "date": {
                        "description": "Set a due date for the task",
                        "type": "string",
                        "example": "2023-07-20 13:00:00"
                    },
                    "tag": {
                        "description": "The ID of the status tag",
                        "type": "integer",
                        "example": "1234"
                    },
                    "private": {
                        "description": "Is the task private?",
                        "type": "boolean"
                    },
                    "recursion": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/api.task.recursion"
                            }
                        ],
                        "nullable": true,
                        "description": "Add recurring details",
                        "type": "object"
                    },
                    "channels": {
                        "description": "Add the type and id to associate the task with",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.task.channels"
                        },
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "api.task.channels": {
                "title": "Task Channels Request Body",
                "description": "The data type name which the task belongs to",
                "properties": {
                    "id": {
                        "description": "The data type id which the task belongs to",
                        "type": "integer",
                        "example": "1234"
                    },
                    "label": {
                        "type": "string",
                        "example": "assignment"
                    }
                },
                "type": "object",
                "enum": [
                    "assignment",
                    "opportunity",
                    "person",
                    "company"
                ]
            },
            "api.opportunities.completion.storeRequest": {
                "title": "Opportunity Completion Request Body",
                "properties": {
                    "completion": {
                        "description": "The completion percentage of the opportunity. The range must be between 0 and 100%",
                        "type": "integer",
                        "maximum": 100,
                        "minimum": 0,
                        "example": "35"
                    }
                },
                "type": "object"
            },
            "api.v3.fixedFee.storeRequest": {
                "title": "Fixed Fee Store Request Body",
                "required": [
                    "total",
                    "recipient",
                    "tag"
                ],
                "properties": {
                    "total": {
                        "properties": {
                            "amount": {
                                "description": "Class FixedFeeStore",
                                "type": "number",
                                "format": "float",
                                "example": "50.30"
                            },
                            "currency": {
                                "$ref": "#/components/schemas/api.currency"
                            }
                        },
                        "type": "object"
                    },
                    "billingId": {
                        "type": "integer",
                        "example": "123"
                    },
                    "briefId": {
                        "type": "integer",
                        "example": "123"
                    },
                    "dueDate": {
                        "type": "string",
                        "example": "2022-05-30"
                    },
                    "id": {
                        "type": "integer",
                        "example": "123"
                    },
                    "note": {
                        "type": "string",
                        "example": "This is a note"
                    },
                    "paidAt": {
                        "type": "string",
                        "example": "2022-05-30"
                    },
                    "refNumber": {
                        "type": "string",
                        "example": "ABC-12345"
                    },
                    "tag": {
                        "type": "integer",
                        "example": "123"
                    },
                    "recipient": {
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "candidate",
                                    "person",
                                    "officeGroup"
                                ],
                                "example": "candidate"
                            },
                            "id": {
                                "type": "integer",
                                "example": "123"
                            },
                            "name": {
                                "type": "string",
                                "example": "Joe Bloggs"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "api.v3.invoice.storeRequest": {
                "title": "Invoice Store Request Body",
                "required": [
                    "items",
                    "total",
                    "invoiceAt",
                    "tag"
                ],
                "properties": {
                    "refNumber": {
                        "description": "Class InvoiceStore",
                        "type": "string",
                        "example": "inv1234"
                    },
                    "invoiceNumber": {
                        "description": "If using automatic numbering, input the appropriate number pattern to be used and the next available number will be added to the invoice.",
                        "type": "string",
                        "example": "UK001"
                    },
                    "paidAt": {
                        "type": "string",
                        "example": "2022-05-30"
                    },
                    "invoicedAt": {
                        "type": "string",
                        "example": "2022-05-30"
                    },
                    "dueDate": {
                        "type": "string",
                        "example": "2022-05-30"
                    },
                    "total": {
                        "properties": {
                            "amount": {
                                "type": "number",
                                "format": "float",
                                "example": "50.30"
                            },
                            "currency": {
                                "$ref": "#/components/schemas/api.currency"
                            }
                        },
                        "type": "object"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "tag": {
                                    "description": "The tag for the invoice item",
                                    "type": "integer",
                                    "example": "12"
                                },
                                "description": {
                                    "type": "string",
                                    "example": "Placement Fee"
                                },
                                "amount": {
                                    "$ref": "#/components/schemas/api.currencyAmount"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "owner": {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": "123"
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "candidate",
                                    "person",
                                    "officeGroup"
                                ],
                                "example": "candidate"
                            }
                        },
                        "type": "object"
                    },
                    "tag": {
                        "description": "The tag for the invoice",
                        "type": "integer",
                        "example": "12"
                    },
                    "percentSplits": {
                        "required": [
                            "percent",
                            "recipient",
                            "tag"
                        ],
                        "type": "array",
                        "items": {
                            "properties": {
                                "percent": {
                                    "type": "integer",
                                    "example": "25"
                                },
                                "amount": {
                                    "type": "integer",
                                    "example": "25.50"
                                },
                                "briefId": {
                                    "type": "integer",
                                    "example": "123"
                                },
                                "id": {
                                    "type": "integer",
                                    "example": "123"
                                },
                                "refNumber": {
                                    "type": "string",
                                    "example": "ABC-12345"
                                },
                                "tag": {
                                    "type": "integer",
                                    "example": "123"
                                },
                                "recipient": {
                                    "properties": {
                                        "type": {
                                            "type": "string",
                                            "example": "candidate"
                                        },
                                        "id": {
                                            "type": "integer",
                                            "example": "123"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Joe Bloggs"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "api.v3.revenue.storeRequest": {
                "title": "Revenue Store Request Body",
                "required": [
                    "total",
                    "date",
                    "tag",
                    "probability"
                ],
                "properties": {
                    "total": {
                        "properties": {
                            "amount": {
                                "description": "Class RevenueStore",
                                "type": "number",
                                "format": "float",
                                "example": "50.30"
                            },
                            "currency": {
                                "$ref": "#/components/schemas/api.currency"
                            }
                        },
                        "type": "object"
                    },
                    "date": {
                        "type": "string",
                        "example": "2022-05-30"
                    },
                    "tag": {
                        "type": "integer",
                        "example": "123"
                    },
                    "probability": {
                        "type": "integer",
                        "example": "50"
                    },
                    "billingId": {
                        "type": "integer",
                        "example": "123"
                    },
                    "refNumber": {
                        "type": "string",
                        "example": "ABC-12345"
                    },
                    "owner": {
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "candidate",
                                    "person",
                                    "officeGroup"
                                ],
                                "example": "candidate"
                            },
                            "id": {
                                "type": "integer",
                                "example": "123"
                            }
                        },
                        "type": "object"
                    },
                    "percentSplits": {
                        "required": [
                            "percent",
                            "recipient",
                            "tag"
                        ],
                        "type": "array",
                        "items": {
                            "properties": {
                                "percent": {
                                    "type": "integer",
                                    "example": "25"
                                },
                                "amount": {
                                    "type": "integer",
                                    "example": "25.50"
                                },
                                "briefId": {
                                    "type": "integer",
                                    "example": "123"
                                },
                                "id": {
                                    "type": "integer",
                                    "example": "123"
                                },
                                "refNumber": {
                                    "type": "string",
                                    "example": "ABC-12345"
                                },
                                "tag": {
                                    "type": "integer",
                                    "example": "123"
                                },
                                "recipient": {
                                    "properties": {
                                        "type": {
                                            "type": "string",
                                            "example": "candidate"
                                        },
                                        "id": {
                                            "type": "integer",
                                            "example": "123"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Joe Bloggs"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "api.v3.consultant.request.store": {
                "title": "Adding a Consultant Request Body",
                "required": [
                    "userId"
                ],
                "properties": {
                    "userId": {
                        "description": "Consultant Store Request",
                        "type": "integer",
                        "example": 1234
                    }
                },
                "type": "object"
            },
            "api.v3.officeGroup.request.store": {
                "title": "Adding an Office Group Request Body",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "description": "Office Group Store Request",
                        "type": "integer",
                        "example": 1234
                    }
                },
                "type": "object"
            },
            "api.v3.region.request.store": {
                "title": "Adding a Region Request Body",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "description": "Region Store Request",
                        "type": "integer",
                        "example": 1234
                    }
                },
                "type": "object"
            },
            "api.v3.person.storeRequest.project": {
                "title": "People store projects",
                "properties": {
                    "projectId": {
                        "type": "integer",
                        "example": 1234
                    },
                    "projectName": {
                        "type": "string",
                        "example": "Project name"
                    },
                    "projectType": {
                        "type": "string",
                        "enum": [
                            "assignment",
                            "opportunity",
                            "list"
                        ],
                        "example": "assignment"
                    }
                },
                "type": "object"
            },
            "api.v3.project.completion.updateRequest": {
                "title": "Project Completion Request Body",
                "required": [
                    "completion"
                ],
                "properties": {
                    "completion": {
                        "description": "The completion percentage of the project. The range must be between 0 and 100%",
                        "type": "integer",
                        "maximum": 100,
                        "minimum": 0,
                        "example": "35"
                    }
                },
                "type": "object"
            },
            "api.v3.project.action.update": {
                "title": "Project Action Update Request Body",
                "required": [
                    "actions"
                ],
                "properties": {
                    "actions": {
                        "description": "An array of person IDs that will have the specified tags added.",
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "description": "Class Update Request",
                                    "type": "integer",
                                    "example": 1234
                                },
                                "tag": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "days": {
                                    "type": "integer",
                                    "example": 22
                                },
                                "taskName": {
                                    "type": "string",
                                    "example": "The name of the task in the pipeline"
                                },
                                "repeating": {
                                    "type": "boolean"
                                },
                                "emailAlert": {
                                    "type": "boolean"
                                },
                                "assignee": {
                                    "type": "integer",
                                    "example": 1234
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "api.person.linkRequest": {
                "title": "Person Link Request Body",
                "required": [
                    "type",
                    "title",
                    "url"
                ],
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/api.person.link.type"
                    },
                    "title": {
                        "description": "The website title",
                        "type": "string",
                        "example": "Website"
                    },
                    "url": {
                        "description": "The website URL",
                        "type": "string",
                        "example": "https://www.example.com"
                    }
                },
                "type": "object"
            },
            "api.client.linkRequest": {
                "title": "Company Link Request Body",
                "required": [
                    "type",
                    "url"
                ],
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/api.client.link.type"
                    },
                    "title": {
                        "description": "The website title",
                        "type": "string",
                        "example": "Website"
                    },
                    "url": {
                        "description": "The website URL",
                        "type": "string",
                        "example": "https://www.example.com"
                    }
                },
                "type": "object"
            },
            "api.relationships.storeDelete": {
                "title": "Project Store Delete Request Body",
                "required": [
                    "parentId",
                    "parentType",
                    "relatedId",
                    "relatedType"
                ],
                "properties": {
                    "parentId": {
                        "description": "The ID of the parent type",
                        "type": "integer",
                        "example": "1234"
                    },
                    "parentType": {
                        "description": "The parent type",
                        "type": "string",
                        "enum": [
                            "person",
                            "company",
                            "assignment",
                            "opportunity",
                            "list"
                        ],
                        "example": "person"
                    },
                    "relatedId": {
                        "description": "The ID of the related type",
                        "type": "integer",
                        "example": "1234"
                    },
                    "relatedType": {
                        "description": "The related type",
                        "type": "string",
                        "enum": [
                            "person",
                            "company",
                            "assignment",
                            "opportunity",
                            "list"
                        ],
                        "example": "person"
                    },
                    "projectId": {
                        "description": "The ID of the project (if applicable)",
                        "type": "integer",
                        "example": "1234"
                    }
                },
                "type": "object"
            },
            "api.relationships.update": {
                "title": "Project Update Request Body",
                "required": [
                    "parentId",
                    "parentType",
                    "relatedId",
                    "relatedType"
                ],
                "properties": {
                    "parentId": {
                        "description": "The ID of the parent type",
                        "type": "integer",
                        "example": "1234"
                    },
                    "parentType": {
                        "description": "The parent type",
                        "type": "string",
                        "enum": [
                            "person",
                            "company",
                            "assignment",
                            "opportunity",
                            "list"
                        ],
                        "example": "person"
                    },
                    "relatedId": {
                        "description": "The ID of the related type",
                        "type": "integer",
                        "example": "1234"
                    },
                    "relatedType": {
                        "description": "The related type",
                        "type": "string",
                        "enum": [
                            "person",
                            "company",
                            "assignment",
                            "opportunity",
                            "list"
                        ],
                        "example": "person"
                    },
                    "relationId": {
                        "description": "The relationship label ID. How are the two entities related?",
                        "type": "integer",
                        "example": "1234"
                    },
                    "note": {
                        "description": "A brief note",
                        "type": "string",
                        "example": "This is a note"
                    }
                },
                "type": "object"
            },
            "api.list.pipelineTask": {
                "title": "List Pipeline",
                "properties": {
                    "id": {
                        "description": "Class SearchFirmListPipelineResource",
                        "type": "integer",
                        "example": 1234
                    },
                    "days": {
                        "description": "Number of days before the task needs to be repeated",
                        "type": "integer",
                        "example": 22
                    },
                    "repeating": {
                        "type": "boolean"
                    },
                    "emailAlert": {
                        "description": "Alert assignees of the task when it is completed/deleted",
                        "type": "boolean"
                    },
                    "taskName": {
                        "type": "string",
                        "example": "The name of the task in the pipeline"
                    },
                    "color": {
                        "type": "string",
                        "example": "#12ab12"
                    },
                    "tag": {
                        "$ref": "#/components/schemas/api.status.simple"
                    },
                    "assignee": {
                        "$ref": "#/components/schemas/api.researcher"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    }
                },
                "type": "object"
            },
            "api.list": {
                "title": "List",
                "type": "object",
                "allOf": [
                    {
                        "properties": {
                            "meta": {
                                "$ref": "#/components/schemas/api.list.meta"
                            },
                            "manager": {
                                "$ref": "#/components/schemas/api.list.manager"
                            },
                            "id": {
                                "type": "integer",
                                "example": 1234
                            },
                            "dataType": {
                                "type": "string",
                                "example": "list"
                            },
                            "name": {
                                "type": "string",
                                "example": "Potential Clients"
                            },
                            "owner": {
                                "$ref": "#/components/schemas/api.researcher"
                            },
                            "consultants": {
                                "type": "object"
                            },
                            "relationships": {
                                "$ref": "#/components/schemas/api.list.relationships"
                            },
                            "users": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/api.researcher"
                                }
                            },
                            "officeGroups": {
                                "$ref": "#/components/schemas/api.list.officeGroup"
                            },
                            "regions": {
                                "$ref": "#/components/schemas/api.list.region"
                            },
                            "pipeline": {
                                "$ref": "#/components/schemas/api.list.pipelineTask"
                            },
                            "createdAt": {
                                "type": "string",
                                "example": "2021-04-30T08:53:20.000000Z"
                            },
                            "updatedAt": {
                                "type": "string",
                                "example": "2021-04-30T08:53:20.000000Z"
                            },
                            "health": {
                                "type": "integer",
                                "example": 23
                            },
                            "bucketStats": {
                                "properties": {
                                    "tags": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/api.list.stats.tag"
                                        }
                                    },
                                    "onTarget": {
                                        "description": "The number of people that are on target",
                                        "type": "integer",
                                        "example": 4
                                    },
                                    "overdue": {
                                        "description": "The number of people that are overdue",
                                        "type": "integer",
                                        "example": 4
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "api.list.field": {
                "title": "List Fields",
                "type": "string",
                "enum": [
                    "consultants.users",
                    "consultants.officeGroups",
                    "consultants.regions",
                    "manager.researchNotes",
                    "manager.systemNotes",
                    "manager.documents",
                    "relationships.people"
                ]
            },
            "api.list.manager": {
                "title": "List Manager Items",
                "properties": {
                    "researchNotes": {
                        "$ref": "#/components/schemas/api.notesCollection"
                    },
                    "systemNotes": {
                        "$ref": "#/components/schemas/api.notesCollection"
                    },
                    "documents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.person.document"
                        }
                    }
                },
                "type": "object"
            },
            "api.list.relationships": {
                "title": "Lists Relationships",
                "properties": {
                    "people": {
                        "$ref": "#/components/schemas/api.person.default"
                    }
                },
                "type": "object"
            },
            "api.list.meta": {
                "title": "List Meta Items",
                "properties": {
                    "watching": {
                        "type": "boolean"
                    },
                    "following": {
                        "type": "boolean"
                    },
                    "pinned": {
                        "type": "boolean"
                    },
                    "archived": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "api.person.aspiration": {
                "title": "Aspiration",
                "properties": {
                    "summary": {
                        "description": "Class CandidateAspiration",
                        "type": "string",
                        "example": "Aspiration Summary"
                    },
                    "careers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.career"
                        }
                    },
                    "industries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.industry"
                        }
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.location"
                        }
                    },
                    "permanent": {
                        "$ref": "#/components/schemas/api.person.aspiration.permanent"
                    },
                    "interim": {
                        "$ref": "#/components/schemas/api.person.aspiration.interim"
                    },
                    "ned": {
                        "$ref": "#/components/schemas/api.person.aspiration.ned"
                    },
                    "positionTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.positionType"
                        }
                    },
                    "companyTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.companyType"
                        }
                    }
                },
                "type": "object"
            },
            "api.person.aspiration.interim": {
                "title": "Aspiration Interim",
                "properties": {
                    "rate": {
                        "description": "Salary rate",
                        "properties": {
                            "amount": {
                                "description": "Class CandidateAspirationInterim",
                                "type": "integer",
                                "example": "10000"
                            },
                            "currency": {
                                "type": "string",
                                "example": "USD"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "api.person.aspiration.ned": {
                "title": "Aspiration NED",
                "properties": {
                    "rate": {
                        "description": "Salary rate",
                        "properties": {
                            "amount": {
                                "description": "Class CandidateAspirationNed",
                                "type": "integer",
                                "example": "10000"
                            },
                            "currency": {
                                "type": "string",
                                "example": "USD"
                            }
                        },
                        "type": "object"
                    },
                    "probono": {
                        "type": "boolean"
                    },
                    "equity": {
                        "type": "boolean"
                    },
                    "classifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.classification"
                        }
                    }
                },
                "type": "object"
            },
            "api.person.aspiration.permanent": {
                "title": "Aspiration Permanent",
                "properties": {
                    "base": {
                        "description": "Salary base",
                        "properties": {
                            "amount": {
                                "description": "Class CandidateAspirationPermanent",
                                "type": "integer",
                                "example": "10000"
                            },
                            "currency": {
                                "type": "string",
                                "example": "USD"
                            }
                        },
                        "type": "object"
                    },
                    "bonus": {
                        "type": "integer",
                        "example": 20
                    },
                    "equity": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "api.person.confidential": {
                "title": "Confidential Information",
                "properties": {
                    "currency": {
                        "$ref": "#/components/schemas/api.currency"
                    },
                    "notice": {
                        "description": "The number of months or hours that a user needs to give as notice leaving their current job. If the number is over 24 then it refers to hours otherwise it refers to months.",
                        "type": "integer",
                        "enum": [
                            0,
                            336,
                            1,
                            2,
                            3,
                            6,
                            12,
                            24
                        ],
                        "example": "3"
                    },
                    "bonus": {
                        "description": "The bonus percentage the person receives",
                        "type": "integer",
                        "example": 125
                    },
                    "probono": {
                        "description": "True if the person is working pro bono, false otherwise",
                        "type": "boolean",
                        "example": true
                    },
                    "additionalInfo": {
                        "description": "Additional information",
                        "type": "string",
                        "example": "Open to giving more information"
                    }
                },
                "type": "object",
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/api.person.confidential.permanent"
                    },
                    {
                        "$ref": "#/components/schemas/api.person.confidential.ned"
                    },
                    {
                        "$ref": "#/components/schemas/api.person.confidential.interim"
                    }
                ]
            },
            "api.person.confidential.permanent": {
                "title": "Confidential Information For Permanent Positions",
                "properties": {
                    "baseSalary": {
                        "$ref": "#/components/schemas/api.currencyAmount"
                    },
                    "bonus": {
                        "type": "integer",
                        "example": "80"
                    }
                },
                "type": "object"
            },
            "api.person.confidential.ned": {
                "title": "Confidential Information For NED Positions",
                "properties": {
                    "nedRate": {
                        "$ref": "#/components/schemas/api.currencyAmount"
                    },
                    "probono": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "api.person.confidential.interim": {
                "title": "Confidential Information For Interim Positions",
                "properties": {
                    "interimRate": {
                        "$ref": "#/components/schemas/api.currencyAmount"
                    }
                },
                "type": "object"
            },
            "api.person.currentStatus": {
                "title": "Current Status",
                "properties": {
                    "industry": {
                        "$ref": "#/components/schemas/api.industry"
                    },
                    "career": {
                        "$ref": "#/components/schemas/api.career"
                    },
                    "classification": {
                        "$ref": "#/components/schemas/api.classification"
                    },
                    "positionType": {
                        "$ref": "#/components/schemas/api.positionType"
                    },
                    "location": {
                        "$ref": "#/components/schemas/api.location"
                    },
                    "": {
                        "properties": {
                            "value": {
                                "$ref": "#/components/schemas/api.aspiration.status.value"
                            },
                            "name": {
                                "$ref": "#/components/schemas/api.aspiration.status.text"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "api.person.document": {
                "title": "Person Document",
                "properties": {
                    "id": {
                        "description": "Class CandidateDocument",
                        "type": "integer",
                        "example": 1234
                    },
                    "filename": {
                        "type": "string",
                        "example": "Document.pdf"
                    },
                    "extension": {
                        "type": "string",
                        "example": "pdf"
                    },
                    "primary": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "api.person.education": {
                "title": "Person Education",
                "properties": {
                    "id": {
                        "description": "Class CandidateEducation",
                        "type": "integer",
                        "example": 1234
                    },
                    "school": {
                        "type": "string",
                        "example": "Oxford University"
                    },
                    "degree": {
                        "type": "string",
                        "example": "First Class Honours"
                    },
                    "field": {
                        "type": "string",
                        "example": "French Literature"
                    },
                    "startDate": {
                        "type": "integer",
                        "example": 2011
                    },
                    "endDate": {
                        "type": "integer",
                        "example": 2018
                    },
                    "summary": {
                        "type": "string",
                        "example": "Education Summary"
                    },
                    "primary": {
                        "type": "boolean"
                    },
                    "person": {
                        "$ref": "#/components/schemas/api.person.basic"
                    }
                },
                "type": "object"
            },
            "api.person.language": {
                "title": "Person Language",
                "properties": {
                    "id": {
                        "description": "Class CandidateLanguage",
                        "type": "integer",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "example": "French"
                    },
                    "code": {
                        "type": "string",
                        "example": "fr"
                    },
                    "fluency": {
                        "description": "Indicates proficiency in the language: 1 - Fluent, 2 - Conversational",
                        "type": "integer",
                        "example": 1
                    }
                },
                "type": "object"
            },
            "api.person.basic": {
                "title": "Person Object",
                "properties": {
                    "id": {
                        "description": "Class CandidatePosition",
                        "type": "integer",
                        "example": 1234
                    },
                    "firstname": {
                        "type": "string",
                        "example": "Jane"
                    },
                    "lastname": {
                        "type": "string",
                        "example": "Doe"
                    },
                    "fullname": {
                        "type": "string",
                        "example": "Jane Doe"
                    }
                },
                "type": "object"
            },
            "api.person.position": {
                "title": "Person Position",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "title": {
                        "type": "string",
                        "example": "Director of Communication"
                    },
                    "career": {
                        "$ref": "#/components/schemas/api.career"
                    },
                    "classification": {
                        "$ref": "#/components/schemas/api.classification"
                    },
                    "company": {
                        "description": "The company that the person works for. If they are not linked to an existing record this object will just contain the `name` of the company",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 1234
                            },
                            "name": {
                                "type": "string",
                                "example": "Amazon"
                            },
                            "image": {
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "example": "https://cloud.notactivelylooking.com/1234"
                                    },
                                    "color": {
                                        "type": "string",
                                        "example": "#12AB12"
                                    }
                                },
                                "type": "object"
                            },
                            "phone": {
                                "type": "string",
                                "example": "+123 456 789"
                            },
                            "email": {
                                "type": "string",
                                "example": "me@example.com"
                            },
                            "address": {
                                "$ref": "#/components/schemas/api.address"
                            },
                            "createdAt": {
                                "type": "string",
                                "example": "2021-04-30T08:53:20.000000Z"
                            },
                            "updatedAt": {
                                "type": "string",
                                "example": "2021-04-30T08:53:20.000000Z"
                            }
                        },
                        "type": "object"
                    },
                    "location": {
                        "$ref": "#/components/schemas/api.location"
                    },
                    "teamSize": {
                        "$ref": "#/components/schemas/api.teamSize"
                    },
                    "teamSizeId": {
                        "$ref": "#/components/schemas/api.teamSizeId"
                    },
                    "industry": {
                        "$ref": "#/components/schemas/api.industry"
                    },
                    "department": {
                        "type": "string",
                        "example": "Finance"
                    },
                    "companyTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.companyType"
                        }
                    },
                    "startDate": {
                        "type": "string",
                        "example": "2011-08-14"
                    },
                    "endDate": {
                        "type": "string",
                        "example": "2018-03-25"
                    },
                    "skills": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "Good at managing finances."
                        }
                    },
                    "achievements": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "Managed all the finances."
                        }
                    },
                    "summary": {
                        "type": "string",
                        "example": "Summary of the position"
                    },
                    "positionType": {
                        "$ref": "#/components/schemas/api.positionType"
                    },
                    "primary": {
                        "type": "boolean"
                    },
                    "tense": {
                        "description": "`true` if the position is current",
                        "type": "boolean"
                    },
                    "startMonthUnknown": {
                        "description": "If this is `true` then ignore the month and day part of the `startDate` field",
                        "type": "boolean"
                    },
                    "endMonthUnknown": {
                        "description": "If this is `true` then ignore the month and day part of the `endDate` field",
                        "type": "boolean"
                    },
                    "updatedAt": {
                        "description": "updated date returned person last updated",
                        "type": "string"
                    },
                    "person": {
                        "$ref": "#/components/schemas/api.person.basic"
                    }
                },
                "type": "object"
            },
            "api.company": {
                "title": "Company",
                "type": "object",
                "allOf": [
                    {
                        "properties": {
                            "meta": {
                                "$ref": "#/components/schemas/api.company.meta"
                            },
                            "manager": {
                                "$ref": "#/components/schemas/api.company.manager"
                            },
                            "id": {
                                "type": "integer",
                                "example": 1234
                            },
                            "dataType": {
                                "type": "string",
                                "example": "company"
                            },
                            "name": {
                                "type": "string",
                                "example": "Amazon"
                            },
                            "aliases": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "example": "amzn"
                                }
                            },
                            "owner": {
                                "$ref": "#/components/schemas/api.researcher"
                            },
                            "consultants": {
                                "type": "object"
                            },
                            "users": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/api.researcher"
                                }
                            },
                            "officeGroups": {
                                "$ref": "#/components/schemas/api.list.officeGroup"
                            },
                            "regions": {
                                "$ref": "#/components/schemas/api.list.region"
                            },
                            "label": {
                                "type": "string",
                                "example": "company"
                            },
                            "division": {
                                "type": "string",
                                "example": "The division or subsidiary of the company"
                            },
                            "description": {
                                "type": "string",
                                "example": "The description of the company"
                            },
                            "speciality": {
                                "type": "string",
                                "example": "The specialities of the company"
                            },
                            "size": {
                                "type": "string",
                                "example": "The size of the company"
                            },
                            "image": {
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "example": "https://cloud.notactivelylooking.com/1234"
                                    },
                                    "color": {
                                        "type": "string",
                                        "example": "#12AB12"
                                    }
                                },
                                "type": "object"
                            },
                            "phone": {
                                "type": "string",
                                "example": "+123 456 789"
                            },
                            "email": {
                                "type": "string",
                                "example": "me@example.com"
                            },
                            "industries": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/api.industry"
                                }
                            },
                            "address": {
                                "$ref": "#/components/schemas/api.address"
                            },
                            "links": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/api.link"
                                }
                            },
                            "relationships": {
                                "properties": {
                                    "contacts": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1234
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Jane Doe"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "projects": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1234
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Chief Technology Officer - London"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "opportunities": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1234
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "New Opportunity"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "createdAt": {
                                "type": "string",
                                "example": "2021-04-30T08:53:20.000000Z"
                            },
                            "updatedAt": {
                                "type": "string",
                                "example": "2021-04-30T08:53:20.000000Z"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "api.company.manager": {
                "title": "Company Manager Items",
                "properties": {
                    "pendingTasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.task"
                        }
                    },
                    "meetings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting"
                        }
                    },
                    "upcomingMeetings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting.simple"
                        }
                    },
                    "researchNotes": {
                        "$ref": "#/components/schemas/api.notesCollection"
                    },
                    "systemNotes": {
                        "$ref": "#/components/schemas/api.notesCollection"
                    },
                    "customValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.customValue"
                        }
                    },
                    "documents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.document"
                        }
                    },
                    "status": {
                        "$ref": "#/components/schemas/api.status.simple"
                    }
                },
                "type": "object"
            },
            "api.company.meta": {
                "title": "Company Meta Items",
                "properties": {
                    "archived": {
                        "type": "boolean"
                    },
                    "boardexId": {
                        "type": "integer",
                        "example": 1234
                    },
                    "order": {
                        "type": "integer",
                        "example": 3
                    },
                    "offLimitAgreement": {
                        "$ref": "#/components/schemas/api.offLimits.agreement"
                    },
                    "following": {
                        "type": "boolean"
                    },
                    "pinned": {
                        "type": "boolean"
                    },
                    "watching": {
                        "description": "Shows if the authenticated user is watching this company",
                        "type": "boolean"
                    },
                    "permissions": {
                        "$ref": "#/components/schemas/api.company.meta.permission"
                    }
                },
                "type": "object"
            },
            "api.company.meta.permission": {
                "title": "Company Permissions",
                "description": "The permissions for each action that the authenticated user can perform",
                "properties": {
                    "create": {
                        "$ref": "#/components/schemas/api.permission"
                    },
                    "edit": {
                        "$ref": "#/components/schemas/api.permission"
                    },
                    "manage": {
                        "$ref": "#/components/schemas/api.permission"
                    },
                    "delete": {
                        "$ref": "#/components/schemas/api.permission"
                    }
                },
                "type": "object"
            },
            "api.company.countableFields": {
                "title": "Company Counts",
                "type": "string",
                "enum": [
                    "links",
                    "manager.researchNotes",
                    "manager.pendingTasks",
                    "manager.tasks",
                    "manager.doneTasks",
                    "manager.meetings",
                    "manager.upcomingMeetings",
                    "manager.pastMeetings",
                    "manager.documents",
                    "manager.customValues",
                    "manager.articles",
                    "relationships.contacts",
                    "relationships.opportunities",
                    "relationships.projects"
                ]
            },
            "api.company.field": {
                "title": "Company Fields",
                "type": "string",
                "enum": [
                    "consultants.users",
                    "consultants.office_groups",
                    "consultants.regions",
                    "manager.pendingTasks",
                    "manager.upcomingTask",
                    "manager.meetings",
                    "manager.upcomingMeetings",
                    "manager.upcomingMeeting",
                    "manager.researchNotes",
                    "manager.systemNotes",
                    "manager.documents",
                    "manager.customValues",
                    "manager.status",
                    "relationships.contacts",
                    "relationships.projects",
                    "relationships.opportunities"
                ]
            },
            "api.address": {
                "title": "Address",
                "properties": {
                    "id": {
                        "description": "Class CandidateLink",
                        "type": "integer",
                        "example": 1234
                    },
                    "full": {
                        "type": "string",
                        "example": "123 The Street"
                    },
                    "line1": {
                        "type": "string",
                        "example": "Flat 2B"
                    },
                    "line2": {
                        "type": "string",
                        "example": "123 Catton Court"
                    },
                    "line3": {
                        "type": "string",
                        "example": "Oak Ridge"
                    },
                    "line4": {
                        "type": "string",
                        "example": "Somewhere"
                    },
                    "city": {
                        "type": "string",
                        "example": "Birmingham"
                    },
                    "state": {
                        "type": "string",
                        "example": "Essex"
                    },
                    "country": {
                        "type": "string",
                        "example": "Ireland"
                    },
                    "postcode": {
                        "type": "string",
                        "example": "CT12 8GR"
                    },
                    "label": {
                        "type": "string",
                        "enum": [
                            "private",
                            "business",
                            "other",
                            "invoice"
                        ],
                        "example": "private"
                    },
                    "isDefault": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    }
                },
                "type": "object"
            },
            "api.email": {
                "title": "Email",
                "properties": {
                    "id": {
                        "description": "Class CandidateLink",
                        "type": "integer",
                        "example": 1234
                    },
                    "address": {
                        "type": "string",
                        "example": "me@example.com"
                    },
                    "label": {
                        "type": "string",
                        "enum": [
                            "private",
                            "work",
                            "other",
                            "predicted"
                        ],
                        "example": "private"
                    },
                    "isDefault": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-03-19T18:25:46.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-03-19T18:25:46.000000Z"
                    }
                },
                "type": "object"
            },
            "api.link": {
                "title": "Link",
                "properties": {
                    "id": {
                        "description": "Class CandidateLink",
                        "type": "integer",
                        "example": 1234
                    },
                    "url": {
                        "type": "string",
                        "example": "https://example.com"
                    },
                    "title": {
                        "type": "string",
                        "example": "Example Site"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "website",
                            "linkedin",
                            "xing"
                        ],
                        "example": "linkedin"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    }
                },
                "type": "object"
            },
            "api.phone": {
                "title": "Phone",
                "properties": {
                    "id": {
                        "description": "Class CandidateLink",
                        "type": "integer",
                        "example": 1234
                    },
                    "number": {
                        "type": "string",
                        "example": "+123 456 789"
                    },
                    "label": {
                        "type": "string",
                        "enum": [
                            "assistant",
                            "billing",
                            "direct",
                            "home",
                            "manager",
                            "mobile",
                            "other",
                            "private",
                            "switchboard",
                            "work"
                        ],
                        "example": "work"
                    },
                    "isDefault": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-03-19T18:25:46.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-03-19T18:25:46.000000Z"
                    }
                },
                "type": "object"
            },
            "api.customValue": {
                "title": "Custom Value",
                "properties": {
                    "id": {
                        "description": "Class CustomValueResource",
                        "type": "integer",
                        "example": 1234
                    },
                    "value": {
                        "$ref": "#/components/schemas/api.customField.value"
                    },
                    "field": {
                        "$ref": "#/components/schemas/api.searchFirmCustomField"
                    }
                },
                "type": "object"
            },
            "api.searchFirmCustomField": {
                "title": "Custom Field",
                "properties": {
                    "id": {
                        "description": "Class SearchFirmCustomFieldResource",
                        "type": "integer",
                        "example": 1234
                    },
                    "sectionName": {
                        "type": "string",
                        "example": "details"
                    },
                    "label": {
                        "type": "string",
                        "example": "Birthday"
                    },
                    "labelType": {
                        "type": "string",
                        "example": "rating"
                    },
                    "labelData": {
                        "type": "string",
                        "format": "json",
                        "example": "{\"max\": 5}"
                    },
                    "count": {
                        "type": "integer",
                        "example": 3
                    },
                    "hashId": {
                        "type": "string",
                        "example": "ejRe"
                    },
                    "order": {
                        "type": "integer",
                        "example": 3
                    }
                },
                "type": "object"
            },
            "api.document": {
                "title": "Document",
                "properties": {
                    "id": {
                        "description": "Class Document",
                        "type": "integer",
                        "example": 1234
                    },
                    "filename": {
                        "type": "string",
                        "example": "Document.pdf"
                    },
                    "extension": {
                        "type": "string",
                        "example": "pdf"
                    },
                    "user": {
                        "$ref": "#/components/schemas/api.researcher"
                    },
                    "shouldAttach": {
                        "type": "boolean"
                    },
                    "personId": {
                        "type": "integer",
                        "example": 1234
                    },
                    "executiveId": {
                        "type": "integer",
                        "example": 1234
                    },
                    "addedBy": {
                        "type": "string",
                        "example": "Jane Doe"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "addedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    }
                },
                "type": "object"
            },
            "api.v1.assignmentInfo": {
                "title": "Assignment Info",
                "properties": {
                    "id": {
                        "description": "Class AssignmentInfoResource",
                        "type": "integer",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "example": "CTO"
                    },
                    "projectId": {
                        "type": "string",
                        "example": "123abc"
                    },
                    "company": {
                        "type": "string",
                        "example": "Amazon"
                    },
                    "owner": {
                        "type": "string",
                        "example": "Jane Doe"
                    },
                    "status": {
                        "$ref": "#/components/schemas/api.status"
                    },
                    "meta": {
                        "properties": {
                            "dateAdded": {
                                "type": "string",
                                "example": "2021-04-30T08:53:20.000000Z"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/api.status"
                                }
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "api.person.default": {
                "title": "Person Default",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "dataType": {
                        "type": "string",
                        "example": "person"
                    },
                    "label": {
                        "type": "string",
                        "example": "person"
                    },
                    "name": {
                        "type": "string",
                        "example": "Jane Doe"
                    },
                    "honorific": {
                        "type": "string",
                        "example": "Ms."
                    },
                    "firstName": {
                        "type": "string",
                        "example": "Jane"
                    },
                    "lastName": {
                        "type": "string",
                        "example": "Doe"
                    },
                    "fullName": {
                        "type": "string",
                        "example": "Jane Doe"
                    },
                    "summary": {
                        "type": "string",
                        "example": "Jane Doe has previously worked for ..."
                    },
                    "profilePicture": {
                        "type": "string",
                        "example": "https://cloud.notactivelylooking.com/123"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/api.researcher"
                    },
                    "emails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.email"
                        }
                    },
                    "phones": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.phone"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.link"
                        }
                    },
                    "addresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.address"
                        }
                    },
                    "profile": {
                        "description": "The person profile",
                        "properties": {
                            "positions": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/api.person.position"
                                }
                            }
                        },
                        "type": "object"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    }
                },
                "type": "object"
            },
            "api.person.nal": {
                "title": "Person NAL",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/api.person.default"
                    },
                    {
                        "properties": {
                            "linkedinIdentifier": {
                                "type": "string"
                            },
                            "xingIdentifier": {
                                "type": "string"
                            },
                            "profile": {
                                "$ref": "#/components/schemas/api.person.profile"
                            },
                            "meta": {
                                "$ref": "#/components/schemas/api.person.meta.nal"
                            },
                            "counts": {
                                "$ref": "#/components/schemas/api.person.counts.nal"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "api.person.full": {
                "title": "Person Full",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/api.person.default"
                    },
                    {
                        "properties": {
                            "linkedinIdentifier": {
                                "type": "string"
                            },
                            "xingIdentifier": {
                                "type": "string"
                            },
                            "profile": {
                                "$ref": "#/components/schemas/api.person.profile"
                            },
                            "relationships": {
                                "$ref": "#/components/schemas/api.person.relationships"
                            },
                            "manager": {
                                "$ref": "#/components/schemas/api.person.manager"
                            },
                            "meta": {
                                "$ref": "#/components/schemas/api.person.meta"
                            },
                            "counts": {
                                "$ref": "#/components/schemas/api.person.counts"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "api.person": {
                "title": "Person",
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/api.person.default"
                    },
                    {
                        "$ref": "#/components/schemas/api.person.full"
                    }
                ]
            },
            "api.person.countableFields": {
                "title": "Person Counts",
                "type": "string",
                "enum": [
                    "emails",
                    "addresses",
                    "phones",
                    "links",
                    "profile.positions",
                    "profile.education",
                    "profile.documents",
                    "profile.languages",
                    "relationships.lists",
                    "relationships.opportunities",
                    "relationships.assignments",
                    "relationships.candidatesLists",
                    "relationships.billings",
                    "manager.tags",
                    "manager.pendingTasks",
                    "manager.tasks",
                    "manager.doneTasks",
                    "manager.meetings",
                    "manager.upcomingMeetings",
                    "manager.pastMeetings",
                    "manager.attendeeMeetings",
                    "manager.researchNotes",
                    "manager.attachments",
                    "manager.customValues"
                ]
            },
            "api.person.field": {
                "title": "Person Fields",
                "type": "string",
                "enum": [
                    "profile.aspirations",
                    "profile.confidential",
                    "profile.currentStatus",
                    "profile.positions",
                    "profile.education",
                    "profile.documents",
                    "profile.languages",
                    "profile.headline",
                    "relationships.lists",
                    "relationships.opportunities",
                    "relationships.assignments",
                    "relationships.candidatesLists",
                    "relationships.billings",
                    "manager.tags",
                    "manager.pendingTasks",
                    "manager.tasks",
                    "manager.doneTasks",
                    "manager.meetings",
                    "manager.upcomingMeetings",
                    "manager.pastMeetings",
                    "manager.attendeeMeetings",
                    "manager.researchNotes",
                    "manager.mostRecentResearcherNote",
                    "manager.mostRecentLinkedNote",
                    "manager.attachments",
                    "manager.customValues"
                ]
            },
            "api.person.candidate": {
                "title": "Person Fields",
                "type": "string",
                "enum": [
                    "meta.candidate"
                ]
            },
            "api.person.fieldWithCandidate": {
                "title": "Person Full",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/api.person.field"
                    },
                    {
                        "$ref": "#/components/schemas/api.person.candidate"
                    }
                ]
            },
            "api.person.profile": {
                "title": "Person Profile",
                "properties": {
                    "aspirations": {
                        "$ref": "#/components/schemas/api.person.aspiration"
                    },
                    "currentStatus": {
                        "$ref": "#/components/schemas/api.person.currentStatus"
                    },
                    "confidential": {
                        "$ref": "#/components/schemas/api.person.confidential"
                    },
                    "positions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.person.position"
                        }
                    },
                    "education": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.person.education"
                        }
                    },
                    "languages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.person.language"
                        }
                    },
                    "headline": {
                        "type": "string",
                        "example": "Candidate Headline"
                    }
                },
                "type": "object"
            },
            "api.person.relationships": {
                "title": "Person Relationships",
                "properties": {
                    "lists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.person.list"
                        }
                    },
                    "billings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.person.billing"
                        }
                    },
                    "assignments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.person.project"
                        }
                    },
                    "opportunities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.person.project"
                        }
                    },
                    "candidatesLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v1.assignmentInfo"
                        }
                    }
                },
                "type": "object"
            },
            "api.person.list": {
                "title": "Person Bucket Relationship",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "example": "Potential Clients"
                    },
                    "health": {
                        "type": "integer",
                        "example": 55
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    }
                },
                "type": "object"
            },
            "api.person.billing": {
                "title": "Person Billing Relationship",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "meta": {
                        "properties": {
                            "archived": {
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "api.person.project": {
                "title": "Person Project Relationship",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "example": "CTO"
                    },
                    "meta": {
                        "properties": {
                            "archived": {
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "api.person.manager": {
                "title": "Person Manager Items",
                "properties": {
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.status"
                        }
                    },
                    "pendingTasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.task.simple"
                        }
                    },
                    "tasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.task.simple"
                        }
                    },
                    "doneTasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.task.simple"
                        }
                    },
                    "meetings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting.simple"
                        }
                    },
                    "upcomingMeetings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting.simple"
                        }
                    },
                    "pastMeetings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting.simple"
                        }
                    },
                    "attendeeMeetings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting.simple"
                        }
                    },
                    "researchNotes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.note"
                        }
                    },
                    "mostRecentResearcherNote": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.note"
                        }
                    },
                    "mostRecentLinkedNote": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.note"
                        }
                    },
                    "systemNotes": {
                        "$ref": "#/components/schemas/api.notesCollection"
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.person.document"
                        }
                    },
                    "customValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.customValue"
                        }
                    }
                },
                "type": "object"
            },
            "api.person.meta": {
                "title": "Person Meta Info",
                "properties": {
                    "watching": {
                        "description": "Shows if the authenticated user is watching this person",
                        "type": "boolean"
                    },
                    "sameCandidateOnAssignments": {
                        "description": "Shows if the person exists on an assignment",
                        "type": "boolean"
                    },
                    "completion": {
                        "$ref": "#/components/schemas/api.person.meta.completion"
                    },
                    "permissions": {
                        "$ref": "#/components/schemas/api.person.meta.permission"
                    },
                    "archived": {
                        "type": "boolean"
                    },
                    "offLimitAgreements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.offLimits.agreement"
                        }
                    }
                },
                "type": "object"
            },
            "api.person.meta.candidate": {
                "title": "Person Meta Info In Assignment Context",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/api.person.meta"
                    },
                    {
                        "properties": {
                            "candidate": {
                                "$ref": "#/components/schemas/api.person.meta.candidateInfo"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "api.person.meta.completion": {
                "title": "Person Completion Info",
                "description": "Information on how complete the profile information is",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "score": {
                        "description": "A percentage score indicating how complete the profile is",
                        "type": "integer"
                    },
                    "ignored": {
                        "description": "Indicates if the incomplete status should be ignored",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "api.person.meta.candidateInfo": {
                "title": "Person Candidate Info",
                "description": "Information of the person in the context of an assignment.",
                "properties": {
                    "rank": {
                        "description": "Where the person has been manually ranked in the assignment",
                        "type": "integer",
                        "example": 1
                    },
                    "addedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "addedBy": {
                        "type": "string",
                        "example": "Jane Doe"
                    },
                    "pipelineTags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.status"
                        }
                    }
                },
                "type": "object"
            },
            "api.person.meta.permission": {
                "title": "Person Permissions",
                "description": "The permissions for each action that the authenticated user can perform",
                "properties": {
                    "create": {
                        "$ref": "#/components/schemas/api.permission"
                    },
                    "edit": {
                        "$ref": "#/components/schemas/api.permission"
                    },
                    "manage": {
                        "$ref": "#/components/schemas/api.permission"
                    },
                    "delete": {
                        "$ref": "#/components/schemas/api.permission"
                    }
                },
                "type": "object"
            },
            "api.person.meta.nal": {
                "title": "Person Meta Info",
                "properties": {
                    "connected": {
                        "description": "Whether or not the person is connected to the authenticated firm.",
                        "type": "boolean"
                    },
                    "lastLogin": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "firmLink": {
                        "description": "The ID of the copy owned by the firm if exists.",
                        "type": "integer",
                        "example": 1234
                    },
                    "offLimitAgreement": {
                        "$ref": "#/components/schemas/api.offLimits.agreement"
                    }
                },
                "type": "object"
            },
            "api.person.counts.nal": {
                "title": "Person Counts NAL",
                "properties": {
                    "profile": {
                        "properties": {
                            "positions": {
                                "type": "integer"
                            },
                            "education": {
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "emails": {
                        "type": "integer"
                    },
                    "phones": {
                        "type": "integer"
                    },
                    "addresses": {
                        "type": "integer"
                    },
                    "links": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "api.person.counts": {
                "title": "Person Counts",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/api.person.counts.nal"
                    },
                    {
                        "properties": {
                            "researchNotes": {
                                "type": "integer"
                            },
                            "systemNotes": {
                                "type": "integer"
                            },
                            "gdprNotes": {
                                "type": "integer"
                            },
                            "tasks": {
                                "type": "integer"
                            },
                            "pendingTasks": {
                                "type": "integer"
                            },
                            "doneTasks": {
                                "type": "integer"
                            },
                            "meetings": {
                                "type": "integer"
                            },
                            "upcomingMeetings": {
                                "type": "integer"
                            },
                            "pastMeetings": {
                                "type": "integer"
                            },
                            "attachments": {
                                "type": "integer"
                            },
                            "customValues": {
                                "type": "integer"
                            },
                            "tags": {
                                "type": "integer"
                            },
                            "emails": {
                                "type": "integer"
                            },
                            "forms": {
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    {
                        "properties": {
                            "companies": {
                                "type": "integer"
                            },
                            "lists": {
                                "type": "integer"
                            },
                            "custom": {
                                "type": "integer"
                            },
                            "billings": {
                                "type": "integer"
                            },
                            "assignments": {
                                "type": "integer"
                            },
                            "opportunities": {
                                "type": "integer"
                            },
                            "candidatesLists": {
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "api.importEmailResource": {
                "title": "Import Email Object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": "1234"
                    },
                    "searchFirmId": {
                        "type": "integer",
                        "example": "584"
                    },
                    "from": {
                        "type": "string",
                        "example": "person@example.com"
                    },
                    "to": {
                        "type": "string",
                        "example": "person1@example.com, person2@example.com"
                    },
                    "cc": {
                        "type": "string",
                        "example": "person1@example.com, person2@example.com"
                    },
                    "bcc": {
                        "type": "string",
                        "example": "person1@example.com, person2@example.com"
                    },
                    "subject": {
                        "type": "string",
                        "example": "Meeting 12pm tommorrow"
                    },
                    "text": {
                        "type": "string",
                        "example": "Dear John, Would you like ..."
                    },
                    "html": {
                        "type": "string",
                        "example": "</p>Dear John, Would you like ...</p>"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "relationships": {
                        "$ref": "#/components/schemas/api.importEmailResource.relationships"
                    },
                    "manager": {
                        "$ref": "#/components/schemas/api.importEmailResource.manager"
                    }
                },
                "type": "object"
            },
            "api.importEmailResource.relationships": {
                "title": "Import Email Relationships",
                "properties": {
                    "people": {
                        "description": "An array of people belonging to the imported email.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.person.basic"
                        }
                    }
                },
                "type": "object"
            },
            "api.importEmailResource.manager": {
                "title": "Import Email Manager",
                "properties": {
                    "attachments": {
                        "description": "An array of attachments belonging to the imported email.",
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1234
                                },
                                "filename": {
                                    "type": "string",
                                    "example": "Document.pdf"
                                },
                                "createdAt": {
                                    "type": "string",
                                    "example": "2021-04-30T08:53:20.000000Z"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "api.meeting": {
                "title": "Meeting Object",
                "properties": {
                    "id": {
                        "description": "The meeting ID",
                        "type": "integer",
                        "example": 1234
                    },
                    "userId": {
                        "description": "The user's ID",
                        "type": "integer",
                        "example": 1234
                    },
                    "title": {
                        "description": "The meeting title",
                        "type": "string",
                        "example": "Meeting Title"
                    },
                    "assignees": {
                        "description": "The meeting invitees",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.assignee"
                        }
                    },
                    "tag": {
                        "$ref": "#/components/schemas/api.status.simple"
                    },
                    "private": {
                        "description": "Is the meeting private?",
                        "type": "boolean",
                        "example": true
                    },
                    "sensitivity": {
                        "description": "Is the meeting sensitive?",
                        "type": "boolean",
                        "example": true
                    },
                    "allDay": {
                        "description": "Is it an all day meeting?",
                        "type": "boolean",
                        "example": true
                    },
                    "organizer": {
                        "description": "The organizer's name and email",
                        "type": "string",
                        "example": "Jane Doe <me@example.com>"
                    },
                    "isOrganizer": {
                        "type": "boolean",
                        "example": true
                    },
                    "pinned": {
                        "description": "Is the meeting pinned?",
                        "type": "boolean",
                        "example": true
                    },
                    "note": {
                        "description": "The meeting note",
                        "type": "string",
                        "example": "Meeting Note"
                    },
                    "timezone": {
                        "description": "The meeting timezone",
                        "type": "string",
                        "example": "Europe/London"
                    },
                    "date": {
                        "description": "The meeting start date/time",
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "end": {
                        "description": "The meeting end date/time",
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "address": {
                        "description": "The address of the meeting",
                        "type": "string",
                        "example": "123 The Street"
                    },
                    "agenda": {
                        "description": "The meeting agenda",
                        "type": "string",
                        "example": "What are we doing?"
                    },
                    "details": {
                        "description": "The meeting details",
                        "type": "string",
                        "example": "Here's how it went."
                    },
                    "includeDetails": {
                        "description": "Include additional details in the email",
                        "type": "boolean"
                    },
                    "includeName": {
                        "description": "Include person name in the email",
                        "type": "boolean"
                    },
                    "documents": {
                        "description": "An array of documents to attach to the meeting",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.document"
                        }
                    },
                    "channels": {
                        "description": "An array of channels that belong to the meeting",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.calendarable"
                        }
                    },
                    "teamsMeeting": {
                        "description": "Is this a Teams meeting?",
                        "type": "boolean"
                    },
                    "teamsUrl": {
                        "description": "The Teams URL",
                        "properties": {
                            "createdAt": {
                                "type": "string",
                                "example": "2022-07-31T00:00:00.000000Z"
                            },
                            "updatedAt": {
                                "type": "string",
                                "example": "2022-07-31T00:00:00.000000Z"
                            }
                        },
                        "type": "string",
                        "example": "https://teams.microsoft.com/l/meetup-join/..."
                    }
                },
                "type": "object"
            },
            "api.meeting.field": {
                "title": "Meeting Fields",
                "type": "string",
                "enum": [
                    "feedbacks",
                    "documents"
                ]
            },
            "api.notesCollection": {
                "title": "Notes Collection",
                "properties": {
                    "gdprNotes": {
                        "description": "Class NoteCollection",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.note"
                        }
                    },
                    "researchNotes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.note"
                        }
                    },
                    "systemNotes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.note"
                        }
                    }
                },
                "type": "object"
            },
            "api.note": {
                "title": "Note",
                "properties": {
                    "id": {
                        "description": "Class NoteResource",
                        "type": "integer",
                        "example": 1234
                    },
                    "author": {
                        "type": "string",
                        "example": "Jane Doe"
                    },
                    "text": {
                        "type": "string",
                        "example": "An example note."
                    },
                    "date": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "pinned": {
                        "type": "boolean",
                        "example": "true"
                    },
                    "groupCode": {
                        "description": "The shared code betweeen notes that were created at once.",
                        "type": "string"
                    },
                    "subNotes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.status"
                        }
                    },
                    "notable": {
                        "$ref": "#/components/schemas/api.notableInfo"
                    },
                    "context": {
                        "$ref": "#/components/schemas/api.notableInfo"
                    }
                },
                "type": "object"
            },
            "api.offLimits.agreement": {
                "title": "Off Limit Agreement",
                "properties": {
                    "id": {
                        "description": "Class OffLimitAgreement",
                        "type": "integer",
                        "example": 1234
                    },
                    "agreementName": {
                        "type": "string",
                        "example": "Amazon"
                    },
                    "agreementType": {
                        "type": "string",
                        "enum": [
                            "person",
                            "company"
                        ]
                    },
                    "agreementId": {
                        "type": "integer",
                        "example": 1234
                    },
                    "filter": {
                        "type": "string",
                        "example": "Amazon"
                    },
                    "endDate": {
                        "type": "string",
                        "example": "2031-12-31"
                    },
                    "description": {
                        "type": "string",
                        "example": "Off Limit Agreement with Amazon"
                    },
                    "constraint": {
                        "$ref": "#/components/schemas/api.offLimits.agreement.constraint"
                    },
                    "addedBy": {
                        "type": "string",
                        "example": "Jane Doe"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2018-12-31"
                    }
                },
                "type": "object"
            },
            "api.project.default": {
                "title": "Project",
                "properties": {
                    "id": {
                        "description": "Class ProjectResource",
                        "type": "integer",
                        "example": 1234
                    },
                    "label": {
                        "type": "string",
                        "example": "assignment"
                    },
                    "dataType": {
                        "type": "string",
                        "example": "assignment"
                    },
                    "title": {
                        "type": "string",
                        "example": "Chief Technology Officer - London"
                    },
                    "projectId": {
                        "type": "string",
                        "example": "project123"
                    },
                    "description": {
                        "type": "string",
                        "example": "project description"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/api.researcher"
                    },
                    "industries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.industry"
                        }
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "start_date": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "end_date": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "relationships": {
                        "properties": {
                            "company": {
                                "$ref": "#/components/schemas/api.company.simple"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "api.project.countableFields": {
                "title": "Project Counts",
                "type": "string",
                "enum": [
                    "manager.researchNotes",
                    "manager.systemNotes",
                    "manager.tasks",
                    "manager.pendingTasks",
                    "manager.doneTasks",
                    "manager.meetings",
                    "manager.upcomingMeetings",
                    "manager.pastMeetings",
                    "manager.attachments",
                    "manager.customValues",
                    "relationships.candidates",
                    "relationships.people",
                    "relationships.custom"
                ]
            },
            "api.project.field": {
                "title": "Project Fields",
                "type": "string",
                "enum": [
                    "consultants.users",
                    "consultants.officeGroups",
                    "consultants.regions",
                    "industries",
                    "completion",
                    "compensation",
                    "manager.researchNotes",
                    "manager.systemNotes",
                    "manager.gdprNotes",
                    "manager.tasks",
                    "manager.pendingTasks",
                    "manager.doneTasks",
                    "manager.meetings",
                    "manager.upcomingMeetings",
                    "manager.pastMeetings",
                    "manager.attendedMeetings",
                    "manager.attachments",
                    "manager.customValues",
                    "relationships.candidates",
                    "relationships.people",
                    "relationships.custom",
                    "relationships.bucket"
                ]
            },
            "api.company.simple": {
                "title": "Simple Company",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "example": "Amazon"
                    },
                    "image": {
                        "properties": {
                            "url": {
                                "type": "string",
                                "example": "https://cloud.notactivelylooking.com/123"
                            },
                            "color": {
                                "type": "string",
                                "example": "#abcabc"
                            }
                        },
                        "type": "object"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    }
                },
                "type": "object"
            },
            "api.project.manager": {
                "title": "Project Manager Items",
                "properties": {
                    "status": {
                        "$ref": "#/components/schemas/api.status.simple"
                    },
                    "pendingTasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.task.simple"
                        }
                    },
                    "tasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.task"
                        }
                    },
                    "doneTasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.task.simple"
                        }
                    },
                    "meetings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting"
                        }
                    },
                    "upcomingMeetings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting.simple"
                        }
                    },
                    "pastMeetings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting.simple"
                        }
                    },
                    "attendedMeetings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting.simple"
                        }
                    },
                    "researchNotes": {
                        "$ref": "#/components/schemas/api.notesCollection"
                    },
                    "systemNotes": {
                        "$ref": "#/components/schemas/api.notesCollection"
                    },
                    "customValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.customValue"
                        }
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.person.document"
                        }
                    }
                },
                "type": "object"
            },
            "api.project.meta": {
                "title": "Project Meta Items",
                "properties": {
                    "watching": {
                        "type": "boolean"
                    },
                    "following": {
                        "type": "boolean"
                    },
                    "pinned": {
                        "type": "boolean"
                    },
                    "archived": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "api.meeting.simple": {
                "title": "Simple Meeting Object",
                "properties": {
                    "id": {
                        "description": "Class SimpleMeetingResource",
                        "type": "integer",
                        "example": 1234
                    },
                    "title": {
                        "type": "string",
                        "example": "Do the thing"
                    },
                    "date": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "end": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "note": {
                        "type": "string",
                        "example": "Task Note"
                    },
                    "address": {
                        "type": "string",
                        "example": "123 The Street"
                    },
                    "agenda": {
                        "type": "string",
                        "example": "What are we doing?"
                    },
                    "details": {
                        "type": "string",
                        "example": "Here's how it went."
                    },
                    "private": {
                        "type": "boolean"
                    },
                    "tag": {
                        "$ref": "#/components/schemas/api.status.simple"
                    },
                    "owners": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "fullName": {
                                    "type": "string",
                                    "example": "Jane Doe"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    }
                },
                "type": "object"
            },
            "api.note.simple": {
                "title": "Simple Note",
                "properties": {
                    "id": {
                        "description": "Class SimpleNoteResource",
                        "type": "integer",
                        "example": 1234
                    },
                    "text": {
                        "type": "string",
                        "example": "An example note."
                    },
                    "date": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    }
                },
                "type": "object"
            },
            "api.status.simple": {
                "title": "Simple Status Object",
                "properties": {
                    "id": {
                        "description": "Class SimpleStatusTagResource",
                        "type": "integer",
                        "example": 1234
                    },
                    "text": {
                        "type": "string",
                        "example": "Identified"
                    },
                    "color": {
                        "type": "string",
                        "example": "#12AB12"
                    }
                },
                "type": "object"
            },
            "api.task.simple": {
                "title": "Simple Task Object",
                "properties": {
                    "id": {
                        "description": "Class SimpleTaskResource",
                        "type": "integer",
                        "example": 1234
                    },
                    "title": {
                        "type": "string",
                        "example": "Do the thing"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "date": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "note": {
                        "type": "string",
                        "example": "Task Note"
                    },
                    "private": {
                        "type": "boolean"
                    },
                    "pipeline": {
                        "description": "Only relevant for tasks on leads",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.task.pipeline"
                        }
                    },
                    "tag": {
                        "$ref": "#/components/schemas/api.status.simple"
                    },
                    "recursion": {
                        "description": "How the task repeats",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.task.recursion"
                        }
                    },
                    "owners": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "fullName": {
                                    "type": "string",
                                    "example": "Jane Doe"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    }
                },
                "type": "object"
            },
            "api.task": {
                "title": "Task Object",
                "properties": {
                    "id": {
                        "description": "Class TaskResource",
                        "type": "integer",
                        "example": 1234
                    },
                    "userId": {
                        "type": "integer",
                        "example": 1234
                    },
                    "title": {
                        "type": "string",
                        "example": "Do the task"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/api.researcher"
                    },
                    "note": {
                        "type": "string",
                        "example": "Task Note"
                    },
                    "timezone": {
                        "type": "string",
                        "example": "Europe/London"
                    },
                    "tag": {
                        "$ref": "#/components/schemas/api.status.simple"
                    },
                    "date": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "done": {
                        "type": "boolean",
                        "example": true
                    },
                    "priority": {
                        "type": "integer",
                        "example": 2
                    },
                    "private": {
                        "type": "boolean",
                        "example": true
                    },
                    "pinned": {
                        "type": "boolean",
                        "example": true
                    },
                    "lastPinned": {
                        "type": "boolean",
                        "example": true
                    },
                    "recursion": {
                        "description": "How the task repeats",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.task.recursion"
                        }
                    },
                    "pipeline": {
                        "description": "Only relevant for tasks on leads",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.task.pipeline"
                        }
                    },
                    "channels": {
                        "description": "An array of channels that belong to the task",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.calendarable"
                        }
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2022-07-31T00:00:00.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2022-07-31T00:00:00.000000Z"
                    }
                },
                "type": "object"
            },
            "api.task.field": {
                "title": "Task Fields",
                "type": "string",
                "enum": [
                    "feedbacks",
                    "pipeline"
                ]
            },
            "api.task.pipeline": {
                "title": "Task Pipeline",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "bucket": {
                        "type": "integer",
                        "example": 1234
                    }
                },
                "type": "object"
            },
            "api.list.officeGroup": {
                "title": "Office Group",
                "properties": {
                    "id": {
                        "description": "Class OfficeGroupResource",
                        "type": "integer",
                        "example": 1234
                    },
                    "search_firm_id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "example": "An Office Group"
                    },
                    "description": {
                        "type": "string",
                        "example": "A description"
                    },
                    "user_ids": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 1234
                        }
                    }
                },
                "type": "object"
            },
            "api.assignee": {
                "title": "Assignee",
                "properties": {
                    "id": {
                        "description": "Class SearchUserResource",
                        "type": "integer",
                        "example": 1234
                    },
                    "type": {
                        "type": "string",
                        "example": "person"
                    },
                    "fullname": {
                        "type": "string",
                        "example": "Jane Doe"
                    },
                    "email": {
                        "type": "string",
                        "example": "me@example.com"
                    }
                },
                "type": "object"
            },
            "api.calendarable": {
                "title": "Calendarable Object",
                "properties": {
                    "id": {
                        "description": "Class CalendarableResource",
                        "type": "integer",
                        "example": 1234
                    },
                    "type": {
                        "type": "string",
                        "example": "assignment"
                    },
                    "label": {
                        "type": "string",
                        "example": "assignment"
                    },
                    "name": {
                        "type": "string",
                        "example": "Chief Technology Officer - London"
                    }
                },
                "type": "object"
            },
            "api.graph": {
                "title": "Microsoft Graph Object",
                "properties": {
                    "id": {
                        "description": "The Microsoft Graph ID",
                        "type": "integer",
                        "example": 1234
                    },
                    "userId": {
                        "description": "The user's ID",
                        "type": "integer",
                        "example": 1234
                    },
                    "email": {
                        "description": "The user's email address",
                        "type": "string",
                        "example": "john.smith@gmail.com"
                    },
                    "status": {
                        "description": "The connection status. 0 = connected",
                        "type": "integer",
                        "example": 0
                    },
                    "primary": {
                        "description": "Is this the primary email address?",
                        "type": "boolean",
                        "example": true
                    }
                },
                "type": "object"
            },
            "api.list.region": {
                "title": "Region",
                "properties": {
                    "id": {
                        "description": "Class RegionResource",
                        "type": "integer",
                        "example": 1234
                    },
                    "search_firm_id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "example": "A Region"
                    },
                    "description": {
                        "type": "string",
                        "example": "A description"
                    },
                    "office_groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.list.officeGroup"
                        }
                    },
                    "user_ids": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 1234
                        }
                    }
                },
                "type": "object"
            },
            "api.billing": {
                "title": "Billing Object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "brief_id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "client_id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "contact": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.person.default"
                        }
                    },
                    "revenues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.billing.revenue"
                        }
                    },
                    "invoices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.invoice.default"
                        }
                    },
                    "fixedFees": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.billing.feeSplit"
                        }
                    }
                },
                "type": "object"
            },
            "api.billing.feeSplit": {
                "title": "Billing Fee Split Object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": "1234"
                    },
                    "billingId": {
                        "type": "integer",
                        "example": "1234"
                    },
                    "refNumber": {
                        "type": "string",
                        "example": "ref1234"
                    },
                    "dueDate": {
                        "type": "string",
                        "example": "2022-07-31T00:00:00.000000Z"
                    },
                    "tag": {
                        "$ref": "#/components/schemas/api.status.simple"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/api.billing.recipient"
                    },
                    "creator": {
                        "$ref": "#/components/schemas/api.researcher"
                    },
                    "paidAt": {
                        "type": "string",
                        "example": "2022-07-31T00:00:00.000000Z"
                    },
                    "lockedAt": {
                        "type": "string",
                        "example": "2022-07-31T00:00:00.000000Z"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "project": {
                        "properties": {
                            "label": {
                                "type": "string",
                                "example": "assignment"
                            },
                            "id": {
                                "type": "integer",
                                "example": "123"
                            },
                            "projectId": {
                                "type": "string",
                                "example": "project123"
                            }
                        },
                        "type": "object"
                    },
                    "note": {
                        "type": "string",
                        "example": "This is a note"
                    },
                    "isFixedFee": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "api.invoiceItem": {
                "title": "Invoice Item Object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": "1234"
                    },
                    "description": {
                        "type": "string",
                        "example": "Fee"
                    },
                    "amount": {
                        "$ref": "#/components/schemas/api.currencyAmount"
                    },
                    "quantity": {
                        "type": "integer",
                        "example": "1"
                    },
                    "tag": {
                        "$ref": "#/components/schemas/api.status.simple"
                    }
                },
                "type": "object"
            },
            "api.invoice.default": {
                "title": "Billing Invoice Object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": "1234"
                    },
                    "billingId": {
                        "type": "integer",
                        "example": "1234"
                    },
                    "invoicedAt": {
                        "type": "string",
                        "example": "2022-07-31T00:00:00.000000Z"
                    },
                    "paidAt": {
                        "type": "string",
                        "example": "2022-07-31T00:00:00.000000Z"
                    },
                    "sentAt": {
                        "type": "string",
                        "example": "2022-07-31T00:00:00.000000Z"
                    },
                    "dueDate": {
                        "type": "string",
                        "example": "2022-07-31T00:00:00.000000Z"
                    },
                    "lockedAt": {
                        "type": "string",
                        "example": "2022-07-31T00:00:00.000000Z"
                    },
                    "refNumber": {
                        "type": "string",
                        "example": "ref1234"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/api.currency"
                    },
                    "total": {
                        "$ref": "#/components/schemas/api.currencyAmount"
                    },
                    "items": {
                        "$ref": "#/components/schemas/api.invoiceItem"
                    },
                    "tag": {
                        "$ref": "#/components/schemas/api.status.simple"
                    },
                    "template": {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": "1234"
                            },
                            "name": {
                                "type": "string",
                                "example": "Default Template"
                            },
                            "firmName": {
                                "type": "string",
                                "example": "ACME"
                            },
                            "logo": {
                                "type": "string",
                                "example": "https://cloud.notactivelylooking.com/1234"
                            },
                            "address": {
                                "type": "string",
                                "example": "123 Catton Court"
                            },
                            "website": {
                                "type": "string",
                                "example": "https://example.com"
                            },
                            "taxPercent": {
                                "type": "number",
                                "format": "float",
                                "example": "20.0"
                            },
                            "taxType": {
                                "type": "number",
                                "format": "float",
                                "example": "20.0"
                            },
                            "incremental": {
                                "type": "boolean"
                            },
                            "numberPattern": {
                                "type": "string",
                                "example": "EZ0001"
                            },
                            "nextNumber": {
                                "type": "string",
                                "example": "EZ0002"
                            },
                            "lastNumber": {
                                "type": "string",
                                "example": "EZ0001"
                            },
                            "paymentTerms": {
                                "type": "integer",
                                "example": "30"
                            },
                            "footer": {
                                "type": "string",
                                "example": "Invoice footer"
                            },
                            "addedBy": {
                                "type": "string",
                                "example": "John Smith"
                            },
                            "note": {
                                "type": "string",
                                "example": "This is a  note"
                            },
                            "title": {
                                "type": "string",
                                "example": "Invoice"
                            },
                            "altTitle": {
                                "type": "string",
                                "example": "Credit Note"
                            },
                            "createdAt": {
                                "type": "string",
                                "example": "2022-07-31T00:00:00.000000Z"
                            },
                            "updatedAt": {
                                "type": "string",
                                "example": "2022-07-31T00:00:00.000000Z"
                            }
                        },
                        "type": "object"
                    },
                    "taxType": {
                        "type": "string",
                        "example": "VAT"
                    },
                    "taxPercent": {
                        "type": "string",
                        "example": "20"
                    },
                    "filename": {
                        "type": "string",
                        "example": "https://cloud.notactivelylooking.com/123"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/api.researcher"
                    },
                    "creator": {
                        "$ref": "#/components/schemas/api.researcher"
                    },
                    "relationships": {
                        "$ref": "#/components/schemas/api.invoice.relationships"
                    }
                },
                "type": "object"
            },
            "api.invoice.full": {
                "title": "Invoice Full",
                "allOf": [
                    {
                        "properties": {
                            "": {
                                "$ref": "#/components/schemas/api.invoice.default"
                            },
                            "relationships": {
                                "$ref": "#/components/schemas/api.invoice.relationships"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "api.invoice.relationships": {
                "title": "Invoice Relationships",
                "properties": {
                    "revenue": {
                        "$ref": "#/components/schemas/api.billing.revenue"
                    },
                    "contact": {
                        "$ref": "#/components/schemas/api.person.default"
                    },
                    "company": {
                        "$ref": "#/components/schemas/api.company.simple"
                    },
                    "project": {
                        "$ref": "#/components/schemas/api.v1.assignmentInfo"
                    },
                    "percentSplits": {
                        "$ref": "#/components/schemas/api.billing.feeSplit"
                    }
                },
                "type": "object"
            },
            "api.invoice.countableFields": {
                "title": "Invoice Counts",
                "type": "string",
                "enum": [
                    "relationships.percentSplits"
                ]
            },
            "api.invoice.field": {
                "title": "Invoice Fields",
                "type": "string",
                "enum": [
                    "relationships.contact",
                    "relationships.company",
                    "relationships.project",
                    "relationships.percentSplit",
                    "relationships.revenue"
                ]
            },
            "api.invoiceTemplate": {
                "title": "Invoice Template Object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": "1234"
                    },
                    "name": {
                        "type": "string",
                        "example": "Default Template"
                    },
                    "firmName": {
                        "type": "string",
                        "example": "ACME"
                    },
                    "logo": {
                        "type": "string",
                        "example": "https://cloud.notactivelylooking.com/1234"
                    },
                    "address": {
                        "type": "string",
                        "example": "123 Catton Court"
                    },
                    "website": {
                        "type": "string",
                        "example": "https://example.com"
                    },
                    "taxPercent": {
                        "type": "number",
                        "format": "float",
                        "example": "20.0"
                    },
                    "taxType": {
                        "type": "number",
                        "format": "float",
                        "example": "20.0"
                    },
                    "incremental": {
                        "type": "boolean"
                    },
                    "numberPattern": {
                        "type": "string",
                        "example": "EZ0001"
                    },
                    "nextNumber": {
                        "type": "string",
                        "example": "EZ0002"
                    },
                    "lastNumber": {
                        "type": "string",
                        "example": "EZ0001"
                    },
                    "paymentTerms": {
                        "type": "integer",
                        "example": "30"
                    },
                    "footer": {
                        "type": "string",
                        "example": "Invoice footer"
                    },
                    "addedBy": {
                        "type": "string",
                        "example": "John Smith"
                    },
                    "note": {
                        "type": "string",
                        "example": "This is a  note"
                    },
                    "title": {
                        "type": "string",
                        "example": "Invoice"
                    },
                    "altTitle": {
                        "type": "string",
                        "example": "Credit Note"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2022-07-31T00:00:00.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2022-07-31T00:00:00.000000Z"
                    }
                },
                "type": "object"
            },
            "api.billing.recipient": {
                "title": "Billing Recipient Object",
                "properties": {
                    "owner": {
                        "$ref": "#/components/schemas/api.researcher"
                    },
                    "name": {
                        "type": "string",
                        "example": "Joe Bloggs"
                    },
                    "id": {
                        "type": "integer",
                        "example": "123"
                    },
                    "type": {
                        "type": "string",
                        "example": "candidate"
                    },
                    "email": {
                        "type": "string",
                        "example": "joe@example.com"
                    }
                },
                "type": "object"
            },
            "api.billing.recipient.relationships": {
                "title": "Billing Recipient Relationships",
                "properties": {
                    "officeGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.list.officeGroup"
                        }
                    }
                },
                "type": "object"
            },
            "api.billing.revenue": {
                "title": "Billing Revenue Object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": "1234"
                    },
                    "date": {
                        "type": "string",
                        "example": "2022-07-31T00:00:00.000000Z"
                    },
                    "amount": {
                        "$ref": "#/components/schemas/api.currencyAmount"
                    },
                    "tag": {
                        "$ref": "#/components/schemas/api.status.simple"
                    },
                    "probability": {
                        "type": "integer",
                        "example": "30"
                    },
                    "refNumber": {
                        "type": "string"
                    },
                    "note": {
                        "type": "string"
                    },
                    "lockedAt": {
                        "type": "string",
                        "example": "2022-07-31T00:00:00.000000Z"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/api.researcher"
                    },
                    "creator": {
                        "$ref": "#/components/schemas/api.researcher"
                    },
                    "relationships": {
                        "$ref": "#/components/schemas/api.revenue.relationships"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    }
                },
                "type": "object"
            },
            "api.revenue.relationships": {
                "title": "Revenue Relationships",
                "properties": {
                    "company": {
                        "$ref": "#/components/schemas/api.company.simple"
                    },
                    "project": {
                        "$ref": "#/components/schemas/api.v1.assignmentInfo"
                    },
                    "percentSplits": {
                        "$ref": "#/components/schemas/api.billing.feeSplit"
                    }
                },
                "type": "object"
            },
            "api.revenue.field": {
                "title": "Revenue Fields",
                "type": "string",
                "enum": [
                    "relationships.company",
                    "relationships.project",
                    "relationships.percentSplits"
                ]
            },
            "api.researcher": {
                "title": "Researcher",
                "properties": {
                    "id": {
                        "description": "Class SearchUserResource",
                        "type": "integer",
                        "example": 1234
                    },
                    "email": {
                        "type": "string",
                        "example": "me@example.com"
                    },
                    "firstName": {
                        "type": "string",
                        "example": "Jane"
                    },
                    "lastName": {
                        "type": "string",
                        "example": "Doe"
                    },
                    "fullName": {
                        "type": "string",
                        "example": "Jane Doe"
                    },
                    "phone": {
                        "type": "string",
                        "example": "+123 456 789"
                    },
                    "location": {
                        "type": "string",
                        "example": "London"
                    },
                    "profilePicture": {
                        "type": "string",
                        "example": "https://cloud.notactivelylooking.com/123"
                    },
                    "relationships": {
                        "$ref": "#/components/schemas/api.searchUser.relationships"
                    }
                },
                "type": "object"
            },
            "api.searchUser.relationships": {
                "title": "Search User Relationships",
                "properties": {
                    "officeGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.list.officeGroup"
                        }
                    }
                },
                "type": "object"
            },
            "api.status": {
                "title": "Status Tag",
                "properties": {
                    "id": {
                        "description": "Class StatusTag",
                        "type": "integer",
                        "example": 1234
                    },
                    "text": {
                        "type": "string",
                        "example": "Identified"
                    },
                    "color": {
                        "type": "string",
                        "example": "#abcabc"
                    },
                    "default": {
                        "type": "boolean"
                    },
                    "order": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "assignment",
                            "candidate",
                            "lead",
                            "opportunity",
                            "client",
                            "task",
                            "meeting",
                            "revenue",
                            "invoice",
                            "note"
                        ]
                    },
                    "hidden": {
                        "type": "boolean"
                    },
                    "nalText": {
                        "type": "string",
                        "example": "added"
                    },
                    "canDelete": {
                        "type": "boolean"
                    },
                    "taggedCount": {
                        "type": "integer",
                        "example": 53
                    },
                    "hashId": {
                        "description": "The string that is used to reference this tag in the Custom Word Reports",
                        "type": "string",
                        "example": "abc123"
                    },
                    "addedAt": {
                        "type": "string",
                        "example": "2024-09-30T07:18:55.000000Z"
                    }
                },
                "type": "object"
            },
            "api.v2.person.basic": {
                "title": "Person Object",
                "properties": {
                    "id": {
                        "description": "Class CandidatePosition",
                        "type": "integer",
                        "example": 1234
                    },
                    "firstname": {
                        "type": "string",
                        "example": "Jane"
                    },
                    "lastname": {
                        "type": "string",
                        "example": "Doe"
                    },
                    "fullname": {
                        "type": "string",
                        "example": "Jane Doe"
                    }
                },
                "type": "object"
            },
            "api.v2.person.position": {
                "title": "Person Position",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "title": {
                        "type": "string",
                        "example": "Director of Communication"
                    },
                    "career": {
                        "$ref": "#/components/schemas/api.career"
                    },
                    "classification": {
                        "$ref": "#/components/schemas/api.classification"
                    },
                    "company": {
                        "description": "The company that the person works for. If they are not linked to an existing record this object will just contain the `name` of the company",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 1234
                            },
                            "name": {
                                "type": "string",
                                "example": "Amazon"
                            },
                            "image": {
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "example": "https://cloud.notactivelylooking.com/1234"
                                    },
                                    "color": {
                                        "type": "string",
                                        "example": "#12AB12"
                                    }
                                },
                                "type": "object"
                            },
                            "phone": {
                                "type": "string",
                                "example": "+123 456 789"
                            },
                            "email": {
                                "type": "string",
                                "example": "me@example.com"
                            },
                            "addresses": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/api.address"
                                }
                            },
                            "createdAt": {
                                "type": "string",
                                "example": "2021-04-30T08:53:20.000000Z"
                            },
                            "updatedAt": {
                                "type": "string",
                                "example": "2021-04-30T08:53:20.000000Z"
                            }
                        },
                        "type": "object"
                    },
                    "location": {
                        "$ref": "#/components/schemas/api.location"
                    },
                    "teamSize": {
                        "$ref": "#/components/schemas/api.teamSize"
                    },
                    "teamSizeId": {
                        "$ref": "#/components/schemas/api.teamSizeId"
                    },
                    "industry": {
                        "$ref": "#/components/schemas/api.industry"
                    },
                    "department": {
                        "type": "string",
                        "example": "Finance"
                    },
                    "companyTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.companyType"
                        }
                    },
                    "startDate": {
                        "type": "string",
                        "example": "2011-08-14"
                    },
                    "endDate": {
                        "type": "string",
                        "example": "2018-03-25"
                    },
                    "skills": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "Good at managing finances."
                        }
                    },
                    "achievements": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "Managed all the finances."
                        }
                    },
                    "summary": {
                        "type": "string",
                        "example": "Summary of the position"
                    },
                    "positionType": {
                        "$ref": "#/components/schemas/api.positionType"
                    },
                    "primary": {
                        "type": "boolean"
                    },
                    "tense": {
                        "description": "`true` if the position is current",
                        "type": "boolean"
                    },
                    "startMonthUnknown": {
                        "description": "If this is `true` then ignore the month and day part of the `startDate` field",
                        "type": "boolean"
                    },
                    "endMonthUnknown": {
                        "description": "If this is `true` then ignore the month and day part of the `endDate` field",
                        "type": "boolean"
                    },
                    "updatedAt": {
                        "description": "updated date returned person last updated",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "api.v2.person.currentStatus": {
                "title": "Current Status",
                "properties": {
                    "careers": {
                        "description": "Class CandidateCurrentStatus",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.career"
                        }
                    },
                    "industries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.industry"
                        }
                    },
                    "classification": {
                        "$ref": "#/components/schemas/api.classification"
                    },
                    "positionType": {
                        "$ref": "#/components/schemas/api.positionType"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.location"
                        }
                    },
                    "status": {
                        "properties": {
                            "value": {
                                "$ref": "#/components/schemas/api.aspiration.status.value"
                            },
                            "name": {
                                "$ref": "#/components/schemas/api.aspiration.status.text"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "api.v2.company": {
                "title": "Company",
                "type": "object",
                "allOf": [
                    {
                        "properties": {
                            "meta": {
                                "$ref": "#/components/schemas/api.v2.company.meta"
                            },
                            "manager": {
                                "$ref": "#/components/schemas/api.v2.company.manager"
                            },
                            "id": {
                                "type": "integer",
                                "example": 1234
                            },
                            "dataType": {
                                "type": "string",
                                "example": "company"
                            },
                            "name": {
                                "type": "string",
                                "example": "Amazon"
                            },
                            "aliases": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "example": "amzn"
                                }
                            },
                            "owner": {
                                "$ref": "#/components/schemas/api.researcher"
                            },
                            "consultants": {
                                "type": "object"
                            },
                            "users": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/api.researcher"
                                }
                            },
                            "officeGroups": {
                                "$ref": "#/components/schemas/api.list.officeGroup"
                            },
                            "regions": {
                                "$ref": "#/components/schemas/api.list.region"
                            },
                            "label": {
                                "type": "string",
                                "example": "company"
                            },
                            "division": {
                                "type": "string",
                                "example": "The division or subsidiary of the company"
                            },
                            "description": {
                                "type": "string",
                                "example": "The description of the company"
                            },
                            "speciality": {
                                "type": "string",
                                "example": "The specialities of the company"
                            },
                            "size": {
                                "type": "string",
                                "example": "The size of the company"
                            },
                            "image": {
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "example": "https://cloud.notactivelylooking.com/1234"
                                    },
                                    "color": {
                                        "type": "string",
                                        "example": "#12AB12"
                                    }
                                },
                                "type": "object"
                            },
                            "phone": {
                                "type": "string",
                                "example": "+123 456 789"
                            },
                            "email": {
                                "type": "string",
                                "example": "me@example.com"
                            },
                            "industries": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/api.industry"
                                }
                            },
                            "addresses": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/api.address"
                                }
                            },
                            "links": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/api.link"
                                }
                            },
                            "relationships": {
                                "properties": {
                                    "contacts": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1234
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Jane Doe"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "projects": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1234
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Chief Technology Officer - London"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "opportunities": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1234
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "New Opportunity"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "createdAt": {
                                "type": "string",
                                "example": "2021-04-30T08:53:20.000000Z"
                            },
                            "updatedAt": {
                                "type": "string",
                                "example": "2021-04-30T08:53:20.000000Z"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "api.v2.company.manager": {
                "title": "Company Manager Items",
                "properties": {
                    "pendingTasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.task"
                        }
                    },
                    "meetings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting"
                        }
                    },
                    "upcomingMeetings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting.simple"
                        }
                    },
                    "researchNotes": {
                        "$ref": "#/components/schemas/api.notesCollection"
                    },
                    "systemNotes": {
                        "$ref": "#/components/schemas/api.notesCollection"
                    },
                    "customValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.customValue"
                        }
                    },
                    "documents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.document"
                        }
                    },
                    "status": {
                        "$ref": "#/components/schemas/api.status.simple"
                    }
                },
                "type": "object"
            },
            "api.v2.company.meta": {
                "title": "Company Meta Items",
                "properties": {
                    "archived": {
                        "type": "boolean"
                    },
                    "boardexId": {
                        "type": "integer",
                        "example": 1234
                    },
                    "order": {
                        "type": "integer",
                        "example": 3
                    },
                    "offLimitAgreement": {
                        "$ref": "#/components/schemas/api.offLimits.agreement"
                    },
                    "following": {
                        "type": "boolean"
                    },
                    "pinned": {
                        "type": "boolean"
                    },
                    "watching": {
                        "description": "Shows if the authenticated user is watching this company",
                        "type": "boolean"
                    },
                    "permissions": {
                        "$ref": "#/components/schemas/api.v2.company.meta.permission"
                    }
                },
                "type": "object"
            },
            "api.v2.company.meta.permission": {
                "title": "Company Permissions",
                "description": "The permissions for each action that the authenticated user can perform",
                "properties": {
                    "create": {
                        "$ref": "#/components/schemas/api.permission"
                    },
                    "edit": {
                        "$ref": "#/components/schemas/api.permission"
                    },
                    "manage": {
                        "$ref": "#/components/schemas/api.permission"
                    },
                    "delete": {
                        "$ref": "#/components/schemas/api.permission"
                    }
                },
                "type": "object"
            },
            "api.v2.company.countableFields": {
                "title": "Company Counts",
                "type": "string",
                "enum": [
                    "links",
                    "manager.researchNotes",
                    "manager.pendingTasks",
                    "manager.tasks",
                    "manager.doneTasks",
                    "manager.meetings",
                    "manager.upcomingMeetings",
                    "manager.pastMeetings",
                    "manager.documents",
                    "manager.customValues",
                    "manager.articles",
                    "relationships.contacts",
                    "relationships.opportunities",
                    "relationships.projects"
                ]
            },
            "api.v2.company.field": {
                "title": "Company Fields",
                "type": "string",
                "enum": [
                    "consultants.users",
                    "consultants.office_groups",
                    "consultants.regions",
                    "manager.pendingTasks",
                    "manager.upcomingTask",
                    "manager.meetings",
                    "manager.upcomingMeetings",
                    "manager.upcomingMeeting",
                    "manager.researchNotes",
                    "manager.systemNotes",
                    "manager.documents",
                    "manager.customValues",
                    "manager.status",
                    "relationships.contacts",
                    "relationships.projects",
                    "relationships.opportunities"
                ]
            },
            "api.v2.assignmentInfo": {
                "title": "Assignment Info",
                "properties": {
                    "id": {
                        "description": "Class AssignmentInfoResource",
                        "type": "integer",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "example": "CTO"
                    },
                    "projectId": {
                        "type": "string",
                        "example": "123abc"
                    },
                    "company": {
                        "type": "string",
                        "example": "Amazon"
                    },
                    "owner": {
                        "type": "string",
                        "example": "Jane Doe"
                    },
                    "status": {
                        "$ref": "#/components/schemas/api.status"
                    },
                    "meta": {
                        "properties": {
                            "dateAdded": {
                                "type": "string",
                                "example": "2021-04-30T08:53:20.000000Z"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/api.status"
                                }
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "api.v2.person.default": {
                "title": "Person Default",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "dataType": {
                        "type": "string",
                        "example": "person"
                    },
                    "label": {
                        "type": "string",
                        "example": "person"
                    },
                    "name": {
                        "type": "string",
                        "example": "Jane Doe"
                    },
                    "honorific": {
                        "type": "string",
                        "example": "Ms."
                    },
                    "firstName": {
                        "type": "string",
                        "example": "Jane"
                    },
                    "lastName": {
                        "type": "string",
                        "example": "Doe"
                    },
                    "fullName": {
                        "type": "string",
                        "example": "Jane Doe"
                    },
                    "summary": {
                        "type": "string",
                        "example": "Jane Doe has previously worked for ..."
                    },
                    "profilePicture": {
                        "type": "string",
                        "example": "https://cloud.notactivelylooking.com/123"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/api.researcher"
                    },
                    "emails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.email"
                        }
                    },
                    "phones": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.phone"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.link"
                        }
                    },
                    "addresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.address"
                        }
                    },
                    "profile": {
                        "description": "The person profile",
                        "properties": {
                            "positions": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/api.person.position"
                                }
                            }
                        },
                        "type": "object"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    }
                },
                "type": "object"
            },
            "api.v2.person.nal": {
                "title": "Person NAL",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/api.person.default"
                    },
                    {
                        "properties": {
                            "linkedinIdentifier": {
                                "type": "string"
                            },
                            "xingIdentifier": {
                                "type": "string"
                            },
                            "profile": {
                                "$ref": "#/components/schemas/api.person.profile"
                            },
                            "meta": {
                                "$ref": "#/components/schemas/api.person.meta.nal"
                            },
                            "counts": {
                                "$ref": "#/components/schemas/api.person.counts.nal"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "api.v2.person.full": {
                "title": "Person Full",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/api.person.default"
                    },
                    {
                        "properties": {
                            "linkedinIdentifier": {
                                "type": "string"
                            },
                            "xingIdentifier": {
                                "type": "string"
                            },
                            "profile": {
                                "$ref": "#/components/schemas/api.v2.person.profile"
                            },
                            "relationships": {
                                "$ref": "#/components/schemas/api.person.relationships"
                            },
                            "manager": {
                                "$ref": "#/components/schemas/api.person.manager"
                            },
                            "meta": {
                                "$ref": "#/components/schemas/api.person.meta"
                            },
                            "counts": {
                                "$ref": "#/components/schemas/api.person.counts"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "api.v2.person": {
                "title": "Person",
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/api.v2.person.default"
                    },
                    {
                        "$ref": "#/components/schemas/api.v2.person.full"
                    }
                ]
            },
            "api.v2.person.countableFields": {
                "title": "Person Counts",
                "type": "string",
                "enum": [
                    "emails",
                    "addresses",
                    "phones",
                    "links",
                    "profile.positions",
                    "profile.education",
                    "profile.documents",
                    "profile.languages",
                    "relationships.lists",
                    "relationships.opportunities",
                    "relationships.assignments",
                    "relationships.candidatesLists",
                    "relationships.billings",
                    "manager.tags",
                    "manager.pendingTasks",
                    "manager.tasks",
                    "manager.doneTasks",
                    "manager.meetings",
                    "manager.upcomingMeetings",
                    "manager.pastMeetings",
                    "manager.attendeeMeetings",
                    "manager.researchNotes",
                    "manager.attachments",
                    "manager.customValues"
                ]
            },
            "api.v2.person.field": {
                "title": "Person Fields",
                "type": "string",
                "enum": [
                    "profile.aspirations",
                    "profile.confidential",
                    "profile.currentStatus",
                    "profile.positions",
                    "profile.education",
                    "profile.documents",
                    "profile.languages",
                    "profile.headline",
                    "relationships.lists",
                    "relationships.opportunities",
                    "relationships.assignments",
                    "relationships.candidatesLists",
                    "relationships.billings",
                    "manager.tags",
                    "manager.pendingTasks",
                    "manager.tasks",
                    "manager.doneTasks",
                    "manager.meetings",
                    "manager.upcomingMeetings",
                    "manager.pastMeetings",
                    "manager.attendeeMeetings",
                    "manager.researchNotes",
                    "manager.attachments",
                    "manager.customValues"
                ]
            },
            "api.v2.person.candidate": {
                "title": "Person Fields",
                "type": "string",
                "enum": [
                    "meta.candidate"
                ]
            },
            "api.v2.person.fieldWithCandidate": {
                "title": "Person Full",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/api.v2.person.field"
                    },
                    {
                        "$ref": "#/components/schemas/api.v2.person.candidate"
                    }
                ]
            },
            "api.v2.person.profile": {
                "title": "Person Profile",
                "properties": {
                    "aspirations": {
                        "$ref": "#/components/schemas/api.person.aspiration"
                    },
                    "currentStatus": {
                        "$ref": "#/components/schemas/api.v2.person.currentStatus"
                    },
                    "confidential": {
                        "$ref": "#/components/schemas/api.person.confidential"
                    },
                    "positions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.person.position"
                        }
                    },
                    "education": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.person.education"
                        }
                    },
                    "languages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.person.language"
                        }
                    },
                    "headline": {
                        "type": "string",
                        "example": "Candidate Headline"
                    }
                },
                "type": "object"
            },
            "api.v2.person.relationships": {
                "title": "Person Relationships",
                "properties": {
                    "lists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.person.list"
                        }
                    },
                    "billings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.person.billing"
                        }
                    },
                    "assignments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.person.project"
                        }
                    },
                    "opportunities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.person.project"
                        }
                    },
                    "candidatesLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v2.assignmentInfo"
                        }
                    }
                },
                "type": "object"
            },
            "api.v2.person.list": {
                "title": "Person Bucket Relationship",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "example": "Potential Clients"
                    },
                    "health": {
                        "type": "integer",
                        "example": 55
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    }
                },
                "type": "object"
            },
            "api.v2.person.billing": {
                "title": "Person Billing Relationship",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "meta": {
                        "properties": {
                            "archived": {
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "api.v2.person.project": {
                "title": "Person Project Relationship",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "example": "CTO"
                    },
                    "meta": {
                        "properties": {
                            "archived": {
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "api.v2.person.manager": {
                "title": "Person Manager Items",
                "properties": {
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.status"
                        }
                    },
                    "pendingTasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.task.simple"
                        }
                    },
                    "tasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.task.simple"
                        }
                    },
                    "doneTasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.task.simple"
                        }
                    },
                    "meetings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting.simple"
                        }
                    },
                    "upcomingMeetings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting.simple"
                        }
                    },
                    "pastMeetings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting.simple"
                        }
                    },
                    "attendeeMeetings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting.simple"
                        }
                    },
                    "researchNotes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.note"
                        }
                    },
                    "systemNotes": {
                        "$ref": "#/components/schemas/api.notesCollection"
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.person.document"
                        }
                    },
                    "customValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.customValue"
                        }
                    }
                },
                "type": "object"
            },
            "api.v2.person.meta": {
                "title": "Person Meta Info",
                "properties": {
                    "watching": {
                        "description": "Shows if the authenticated user is watching this person",
                        "type": "boolean"
                    },
                    "sameCandidateOnAssignments": {
                        "description": "Shows if the person exists on an assignment",
                        "type": "boolean"
                    },
                    "completion": {
                        "$ref": "#/components/schemas/api.person.meta.completion"
                    },
                    "permissions": {
                        "$ref": "#/components/schemas/api.person.meta.permission"
                    },
                    "archived": {
                        "type": "boolean"
                    },
                    "offLimitAgreements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.offLimits.agreement"
                        }
                    }
                },
                "type": "object"
            },
            "api.v2.person.meta.candidate": {
                "title": "Person Meta Info In Assignment Context",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/api.person.meta"
                    },
                    {
                        "properties": {
                            "candidate": {
                                "$ref": "#/components/schemas/api.person.meta.candidateInfo"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "api.v2.person.meta.completion": {
                "title": "Person Completion Info",
                "description": "Information on how complete the profile information is",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "score": {
                        "description": "A percentage score indicating how complete the profile is",
                        "type": "integer"
                    },
                    "ignored": {
                        "description": "Indicates if the incomplete status should be ignored",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "api.v2.person.meta.candidateInfo": {
                "title": "Person Candidate Info",
                "description": "Information of the person in the context of an assignment.",
                "properties": {
                    "rank": {
                        "description": "Where the person has been manually ranked in the assignment",
                        "type": "integer",
                        "example": 1
                    },
                    "addedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "addedBy": {
                        "type": "string",
                        "example": "Jane Doe"
                    },
                    "pipelineTags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.status"
                        }
                    }
                },
                "type": "object"
            },
            "api.v2.person.meta.permission": {
                "title": "Person Permissions",
                "description": "The permissions for each action that the authenticated user can perform",
                "properties": {
                    "create": {
                        "$ref": "#/components/schemas/api.permission"
                    },
                    "edit": {
                        "$ref": "#/components/schemas/api.permission"
                    },
                    "manage": {
                        "$ref": "#/components/schemas/api.permission"
                    },
                    "delete": {
                        "$ref": "#/components/schemas/api.permission"
                    }
                },
                "type": "object"
            },
            "api.v2.person.meta.nal": {
                "title": "Person Meta Info",
                "properties": {
                    "connected": {
                        "description": "Whether or not the person is connected to the authenticated firm.",
                        "type": "boolean"
                    },
                    "lastLogin": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "firmLink": {
                        "description": "The ID of the copy owned by the firm if exists.",
                        "type": "integer",
                        "example": 1234
                    },
                    "offLimitAgreement": {
                        "$ref": "#/components/schemas/api.offLimits.agreement"
                    }
                },
                "type": "object"
            },
            "api.v2.person.counts.nal": {
                "title": "Person Counts NAL",
                "properties": {
                    "profile": {
                        "properties": {
                            "positions": {
                                "type": "integer"
                            },
                            "education": {
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "emails": {
                        "type": "integer"
                    },
                    "phones": {
                        "type": "integer"
                    },
                    "addresses": {
                        "type": "integer"
                    },
                    "links": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "api.v2.person.counts": {
                "title": "Person Counts",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/api.person.counts.nal"
                    },
                    {
                        "properties": {
                            "researchNotes": {
                                "type": "integer"
                            },
                            "systemNotes": {
                                "type": "integer"
                            },
                            "gdprNotes": {
                                "type": "integer"
                            },
                            "tasks": {
                                "type": "integer"
                            },
                            "pendingTasks": {
                                "type": "integer"
                            },
                            "doneTasks": {
                                "type": "integer"
                            },
                            "meetings": {
                                "type": "integer"
                            },
                            "upcomingMeetings": {
                                "type": "integer"
                            },
                            "pastMeetings": {
                                "type": "integer"
                            },
                            "attachments": {
                                "type": "integer"
                            },
                            "customValues": {
                                "type": "integer"
                            },
                            "tags": {
                                "type": "integer"
                            },
                            "emails": {
                                "type": "integer"
                            },
                            "forms": {
                                "type": "integer"
                            }
                        },
                        "type": "object",
                        "property": "manager"
                    },
                    {
                        "properties": {
                            "companies": {
                                "type": "integer"
                            },
                            "lists": {
                                "type": "integer"
                            },
                            "custom": {
                                "type": "integer"
                            },
                            "billings": {
                                "type": "integer"
                            },
                            "assignments": {
                                "type": "integer"
                            },
                            "opportunities": {
                                "type": "integer"
                            },
                            "candidatesLists": {
                                "type": "integer"
                            }
                        },
                        "type": "object",
                        "property": "relationships"
                    }
                ]
            },
            "api.v3.person.basic": {
                "title": "Person Object",
                "properties": {
                    "id": {
                        "description": "Class CandidatePosition",
                        "type": "integer",
                        "example": 1234
                    },
                    "firstname": {
                        "type": "string",
                        "example": "Jane"
                    },
                    "lastname": {
                        "type": "string",
                        "example": "Doe"
                    },
                    "fullname": {
                        "type": "string",
                        "example": "Jane Doe"
                    }
                },
                "type": "object"
            },
            "api.v3.person.position": {
                "title": "Person Position",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "title": {
                        "type": "string",
                        "example": "Director of Communication"
                    },
                    "career": {
                        "$ref": "#/components/schemas/api.career"
                    },
                    "classification": {
                        "$ref": "#/components/schemas/api.classification"
                    },
                    "company": {
                        "description": "The company that the person works for. If they are not linked to an existing record this object will just contain the `name` of the company",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 1234
                            },
                            "name": {
                                "type": "string",
                                "example": "Amazon"
                            },
                            "image": {
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "example": "https://cloud.notactivelylooking.com/1234"
                                    },
                                    "color": {
                                        "type": "string",
                                        "example": "#12AB12"
                                    }
                                },
                                "type": "object"
                            },
                            "phone": {
                                "type": "string",
                                "example": "+123 456 789"
                            },
                            "email": {
                                "type": "string",
                                "example": "me@example.com"
                            },
                            "addresses": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/api.address"
                                }
                            },
                            "createdAt": {
                                "type": "string",
                                "example": "2021-04-30T08:53:20.000000Z"
                            },
                            "updatedAt": {
                                "type": "string",
                                "example": "2021-04-30T08:53:20.000000Z"
                            }
                        },
                        "type": "object"
                    },
                    "location": {
                        "$ref": "#/components/schemas/api.location"
                    },
                    "teamSize": {
                        "$ref": "#/components/schemas/api.teamSize"
                    },
                    "teamSizeId": {
                        "$ref": "#/components/schemas/api.teamSizeId"
                    },
                    "industry": {
                        "$ref": "#/components/schemas/api.industry"
                    },
                    "department": {
                        "type": "string",
                        "example": "Finance"
                    },
                    "companyTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.companyType"
                        }
                    },
                    "startDate": {
                        "type": "string",
                        "example": "2011-08-14"
                    },
                    "endDate": {
                        "type": "string",
                        "example": "2018-03-25"
                    },
                    "skills": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "Good at managing finances."
                        }
                    },
                    "achievements": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "Managed all the finances."
                        }
                    },
                    "summary": {
                        "type": "string",
                        "example": "Summary of the position"
                    },
                    "positionType": {
                        "$ref": "#/components/schemas/api.positionType"
                    },
                    "primary": {
                        "type": "boolean"
                    },
                    "tense": {
                        "description": "`true` if the position is current",
                        "type": "boolean"
                    },
                    "startMonthUnknown": {
                        "description": "If this is `true` then ignore the month and day part of the `startDate` field",
                        "type": "boolean"
                    },
                    "endMonthUnknown": {
                        "description": "If this is `true` then ignore the month and day part of the `endDate` field",
                        "type": "boolean"
                    },
                    "updatedAt": {
                        "description": "updated date returned person last updated",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "api.v3.person.currentStatus": {
                "title": "Current Status",
                "properties": {
                    "careers": {
                        "description": "Class CandidateCurrentStatus",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.career"
                        }
                    },
                    "industries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.industry"
                        }
                    },
                    "classification": {
                        "$ref": "#/components/schemas/api.classification"
                    },
                    "positionType": {
                        "$ref": "#/components/schemas/api.positionType"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.location"
                        }
                    },
                    "status": {
                        "properties": {
                            "value": {
                                "$ref": "#/components/schemas/api.aspiration.status.value"
                            },
                            "name": {
                                "$ref": "#/components/schemas/api.aspiration.status.text"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "api.v3.company": {
                "title": "Company",
                "type": "object",
                "allOf": [
                    {
                        "properties": {
                            "meta": {
                                "$ref": "#/components/schemas/api.v3.company.meta"
                            },
                            "manager": {
                                "$ref": "#/components/schemas/api.v3.company.manager"
                            },
                            "id": {
                                "type": "integer",
                                "example": 1234
                            },
                            "dataType": {
                                "type": "string",
                                "example": "company"
                            },
                            "name": {
                                "type": "string",
                                "example": "Amazon"
                            },
                            "aliases": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "example": "amzn"
                                }
                            },
                            "owner": {
                                "$ref": "#/components/schemas/api.researcher"
                            },
                            "consultants": {
                                "type": "object"
                            },
                            "users": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/api.researcher"
                                }
                            },
                            "officeGroups": {
                                "$ref": "#/components/schemas/api.list.officeGroup"
                            },
                            "regions": {
                                "$ref": "#/components/schemas/api.list.region"
                            },
                            "label": {
                                "type": "string",
                                "example": "company"
                            },
                            "division": {
                                "type": "string",
                                "example": "The division or subsidiary of the company"
                            },
                            "description": {
                                "type": "string",
                                "example": "The description of the company"
                            },
                            "speciality": {
                                "type": "string",
                                "example": "The specialities of the company"
                            },
                            "size": {
                                "type": "string",
                                "example": "The size of the company"
                            },
                            "image": {
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "example": "https://cloud.notactivelylooking.com/1234"
                                    },
                                    "color": {
                                        "type": "string",
                                        "example": "#12AB12"
                                    }
                                },
                                "type": "object"
                            },
                            "phone": {
                                "type": "string",
                                "example": "+123 456 789"
                            },
                            "email": {
                                "type": "string",
                                "example": "me@example.com"
                            },
                            "industries": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/api.industry"
                                }
                            },
                            "addresses": {
                                "$ref": "#/components/schemas/api.address"
                            },
                            "links": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/api.link"
                                }
                            },
                            "relationships": {
                                "properties": {
                                    "contacts": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1234
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Jane Doe"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "projects": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1234
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Chief Technology Officer - London"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "opportunities": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1234
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "New Opportunity"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "createdAt": {
                                "type": "string",
                                "example": "2021-04-30T08:53:20.000000Z"
                            },
                            "updatedAt": {
                                "type": "string",
                                "example": "2021-04-30T08:53:20.000000Z"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "api.v3.company.manager": {
                "title": "Company Manager Items",
                "properties": {
                    "pendingTasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.task"
                        }
                    },
                    "meetings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting"
                        }
                    },
                    "upcomingMeetings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting.simple"
                        }
                    },
                    "researchNotes": {
                        "$ref": "#/components/schemas/api.notesCollection"
                    },
                    "systemNotes": {
                        "$ref": "#/components/schemas/api.notesCollection"
                    },
                    "customValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.customValue"
                        }
                    },
                    "documents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.document"
                        }
                    },
                    "status": {
                        "$ref": "#/components/schemas/api.status.simple"
                    }
                },
                "type": "object"
            },
            "api.v3.company.meta": {
                "title": "Company Meta Items",
                "properties": {
                    "archived": {
                        "type": "boolean"
                    },
                    "boardexId": {
                        "type": "integer",
                        "example": 1234
                    },
                    "order": {
                        "type": "integer",
                        "example": 3
                    },
                    "offLimitAgreement": {
                        "$ref": "#/components/schemas/api.offLimits.agreement"
                    },
                    "following": {
                        "type": "boolean"
                    },
                    "pinned": {
                        "type": "boolean"
                    },
                    "watching": {
                        "description": "Shows if the authenticated user is watching this company",
                        "type": "boolean"
                    },
                    "permissions": {
                        "$ref": "#/components/schemas/api.company.meta.permission"
                    }
                },
                "type": "object"
            },
            "api.v3.company.meta.permission": {
                "title": "Company Permissions",
                "description": "The permissions for each action that the authenticated user can perform",
                "properties": {
                    "create": {
                        "$ref": "#/components/schemas/api.permission"
                    },
                    "edit": {
                        "$ref": "#/components/schemas/api.permission"
                    },
                    "manage": {
                        "$ref": "#/components/schemas/api.permission"
                    },
                    "delete": {
                        "$ref": "#/components/schemas/api.permission"
                    }
                },
                "type": "object"
            },
            "api.v3.company.countableFields": {
                "title": "Company Counts",
                "type": "string",
                "enum": [
                    "links",
                    "manager.researchNotes",
                    "manager.pendingTasks",
                    "manager.tasks",
                    "manager.doneTasks",
                    "manager.meetings",
                    "manager.upcomingMeetings",
                    "manager.pastMeetings",
                    "manager.documents",
                    "manager.customValues",
                    "manager.articles",
                    "relationships.contacts",
                    "relationships.opportunities",
                    "relationships.projects"
                ]
            },
            "api.v3.company.field": {
                "title": "Company Fields",
                "type": "string",
                "enum": [
                    "consultants.users",
                    "consultants.office_groups",
                    "consultants.regions",
                    "manager.pendingTasks",
                    "manager.upcomingTask",
                    "manager.meetings",
                    "manager.upcomingMeetings",
                    "manager.upcomingMeeting",
                    "manager.researchNotes",
                    "manager.systemNotes",
                    "manager.documents",
                    "manager.customValues",
                    "manager.status",
                    "relationships.contacts",
                    "relationships.projects",
                    "relationships.opportunities"
                ]
            },
            "api.v3.person.default": {
                "title": "Person Default",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "dataType": {
                        "type": "string",
                        "example": "person"
                    },
                    "label": {
                        "type": "string",
                        "example": "person"
                    },
                    "name": {
                        "type": "string",
                        "example": "Jane Doe"
                    },
                    "honorific": {
                        "type": "string",
                        "example": "Ms."
                    },
                    "firstName": {
                        "type": "string",
                        "example": "Jane"
                    },
                    "lastName": {
                        "type": "string",
                        "example": "Doe"
                    },
                    "fullName": {
                        "type": "string",
                        "example": "Jane Doe"
                    },
                    "summary": {
                        "type": "string",
                        "example": "Jane Doe has previously worked for ..."
                    },
                    "profilePicture": {
                        "type": "string",
                        "example": "https://cloud.notactivelylooking.com/123"
                    },
                    "aliases": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "Doey"
                        }
                    },
                    "owner": {
                        "$ref": "#/components/schemas/api.researcher"
                    },
                    "emails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.email"
                        }
                    },
                    "phones": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.phone"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.link"
                        }
                    },
                    "addresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.address"
                        }
                    },
                    "profile": {
                        "description": "The person profile",
                        "properties": {
                            "positions": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/api.person.position"
                                }
                            }
                        },
                        "type": "object"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    }
                },
                "type": "object"
            },
            "api.v3.person.nal": {
                "title": "Person NAL",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/api.person.default"
                    },
                    {
                        "properties": {
                            "linkedinIdentifier": {
                                "type": "string"
                            },
                            "xingIdentifier": {
                                "type": "string"
                            },
                            "profile": {
                                "$ref": "#/components/schemas/api.person.profile"
                            },
                            "meta": {
                                "$ref": "#/components/schemas/api.person.meta.nal"
                            },
                            "counts": {
                                "$ref": "#/components/schemas/api.person.counts.nal"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "api.v3.person.full": {
                "title": "Person Full",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/api.person.default"
                    },
                    {
                        "properties": {
                            "linkedinIdentifier": {
                                "type": "string"
                            },
                            "xingIdentifier": {
                                "type": "string"
                            },
                            "profile": {
                                "$ref": "#/components/schemas/api.v3.person.profile"
                            },
                            "relationships": {
                                "$ref": "#/components/schemas/api.v3.person.relationships"
                            },
                            "manager": {
                                "$ref": "#/components/schemas/api.v3.person.manager"
                            },
                            "meta": {
                                "$ref": "#/components/schemas/api.person.meta"
                            },
                            "counts": {
                                "$ref": "#/components/schemas/api.person.counts"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "api.v3.person": {
                "title": "Person",
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/api.v3.person.default"
                    },
                    {
                        "$ref": "#/components/schemas/api.v3.person.full"
                    }
                ]
            },
            "api.v3.person.countableFields": {
                "title": "Person Counts",
                "type": "string",
                "enum": [
                    "emails",
                    "addresses",
                    "phones",
                    "links",
                    "profile.positions",
                    "profile.education",
                    "profile.documents",
                    "profile.languages",
                    "relationships.listsAsContact",
                    "relationships.opportunitiesAsContact",
                    "relationships.assignmentsAsContact",
                    "relationships.listsAsCandidate",
                    "relationships.opportunitiesAsCandidate",
                    "relationships.assignmentsAsCandidate",
                    "relationships.billings",
                    "manager.tags",
                    "manager.pendingTasks",
                    "manager.tasks",
                    "manager.doneTasks",
                    "manager.meetings",
                    "manager.upcomingMeetings",
                    "manager.pastMeetings",
                    "manager.attendeeMeetings",
                    "manager.researchNotes",
                    "manager.attachments",
                    "manager.customValues"
                ]
            },
            "api.v3.person.field": {
                "title": "Person Fields",
                "type": "string",
                "enum": [
                    "aliases",
                    "profile.aspirations",
                    "profile.confidential",
                    "profile.currentStatus",
                    "profile.positions",
                    "profile.education",
                    "profile.documents",
                    "profile.languages",
                    "profile.headline",
                    "relationships.listsAsContact",
                    "relationships.opportunitiesAsContact",
                    "relationships.assignmentsAsContact",
                    "relationships.listsAsCandidate",
                    "relationships.opportunitiesAsCandidate",
                    "relationships.assignmentsAsCandidate",
                    "relationships.billings",
                    "manager.tags",
                    "manager.pendingTasks",
                    "manager.tasks",
                    "manager.doneTasks",
                    "manager.meetings",
                    "manager.upcomingMeetings",
                    "manager.pastMeetings",
                    "manager.attendeeMeetings",
                    "manager.researchNotes",
                    "manager.attachments",
                    "manager.customValues"
                ]
            },
            "api.v3.person.candidate": {
                "title": "Person Fields",
                "type": "string",
                "enum": [
                    "meta.candidate"
                ]
            },
            "api.v3.person.fieldWithCandidate": {
                "title": "Person Full",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/api.v3.person.field"
                    },
                    {
                        "$ref": "#/components/schemas/api.v3.person.candidate"
                    }
                ]
            },
            "api.v3.person.profile": {
                "title": "Person Profile",
                "properties": {
                    "aspirations": {
                        "$ref": "#/components/schemas/api.person.aspiration"
                    },
                    "currentStatus": {
                        "$ref": "#/components/schemas/api.v3.person.currentStatus"
                    },
                    "confidential": {
                        "$ref": "#/components/schemas/api.person.confidential"
                    },
                    "positions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.person.position"
                        }
                    },
                    "education": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.person.education"
                        }
                    },
                    "languages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.person.language"
                        }
                    },
                    "headline": {
                        "type": "string",
                        "example": "Candidate Headline"
                    }
                },
                "type": "object"
            },
            "api.v3.person.relationships": {
                "title": "Person Relationships",
                "properties": {
                    "billings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.person.billing"
                        }
                    },
                    "listsAsContact": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v3.listInfo"
                        }
                    },
                    "assignmentsAsContact": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v3.assignmentInfo"
                        }
                    },
                    "opportunitiesAsContact": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v3.opportunityInfo"
                        }
                    },
                    "listsAsCandidate": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v3.listInfo"
                        }
                    },
                    "assignmentsAsCandidate": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v3.assignmentInfo"
                        }
                    },
                    "opportunitiesAsCandidate": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v3.opportunityInfo"
                        }
                    }
                },
                "type": "object"
            },
            "api.v3.person.billing": {
                "title": "Person Billing Relationship",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "meta": {
                        "properties": {
                            "archived": {
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "api.v3.person.manager": {
                "title": "Person Manager Items",
                "properties": {
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.status"
                        }
                    },
                    "pendingTasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.task.simple"
                        }
                    },
                    "tasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.task.simple"
                        }
                    },
                    "doneTasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.task.simple"
                        }
                    },
                    "meetings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting.simple"
                        }
                    },
                    "upcomingMeetings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting.simple"
                        }
                    },
                    "pastMeetings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting.simple"
                        }
                    },
                    "attendeeMeetings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting.simple"
                        }
                    },
                    "researchNotes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.note"
                        }
                    },
                    "systemNotes": {
                        "$ref": "#/components/schemas/api.notesCollection"
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.person.document"
                        }
                    },
                    "customValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.customValue"
                        }
                    }
                },
                "type": "object"
            },
            "api.v3.person.meta": {
                "title": "Person Meta Info",
                "properties": {
                    "watching": {
                        "description": "Shows if the authenticated user is watching this person",
                        "type": "boolean"
                    },
                    "completion": {
                        "$ref": "#/components/schemas/api.person.meta.completion"
                    },
                    "permissions": {
                        "$ref": "#/components/schemas/api.person.meta.permission"
                    },
                    "archived": {
                        "type": "boolean"
                    },
                    "offLimitAgreements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.offLimits.agreement"
                        }
                    }
                },
                "type": "object"
            },
            "api.v3.person.meta.candidate": {
                "title": "Person Meta Info In Assignment Context",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/api.person.meta"
                    },
                    {
                        "properties": {
                            "candidate": {
                                "$ref": "#/components/schemas/api.v3.person.meta.candidateInfo"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "api.v3.person.meta.completion": {
                "title": "Person Completion Info",
                "description": "Information on how complete the profile information is",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "score": {
                        "description": "A percentage score indicating how complete the profile is",
                        "type": "integer"
                    },
                    "ignored": {
                        "description": "Indicates if the incomplete status should be ignored",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "api.v3.person.meta.candidateInfo": {
                "title": "Person Candidate Info",
                "description": "Information of the person in the context of an project.",
                "properties": {
                    "rank": {
                        "description": "Where the person has been manually ranked in the project",
                        "type": "integer",
                        "example": 1
                    },
                    "addedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "addedBy": {
                        "type": "string",
                        "example": "Jane Doe"
                    },
                    "pipelineTags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.status"
                        }
                    }
                },
                "type": "object"
            },
            "api.v3.person.meta.permission": {
                "title": "Person Permissions",
                "description": "The permissions for each action that the authenticated user can perform",
                "properties": {
                    "create": {
                        "$ref": "#/components/schemas/api.permission"
                    },
                    "edit": {
                        "$ref": "#/components/schemas/api.permission"
                    },
                    "manage": {
                        "$ref": "#/components/schemas/api.permission"
                    },
                    "delete": {
                        "$ref": "#/components/schemas/api.permission"
                    }
                },
                "type": "object"
            },
            "api.v3.person.meta.nal": {
                "title": "Person Meta Info",
                "properties": {
                    "connected": {
                        "description": "Whether or not the person is connected to the authenticated firm.",
                        "type": "boolean"
                    },
                    "lastLogin": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "firmLink": {
                        "description": "The ID of the copy owned by the firm if exists.",
                        "type": "integer",
                        "example": 1234
                    },
                    "offLimitAgreement": {
                        "$ref": "#/components/schemas/api.offLimits.agreement"
                    }
                },
                "type": "object"
            },
            "api.v3.person.counts.nal": {
                "title": "Person Counts NAL",
                "properties": {
                    "profile": {
                        "properties": {
                            "positions": {
                                "type": "integer"
                            },
                            "education": {
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "emails": {
                        "type": "integer"
                    },
                    "phones": {
                        "type": "integer"
                    },
                    "addresses": {
                        "type": "integer"
                    },
                    "links": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "api.v3.person.counts": {
                "title": "Person Counts",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/api.person.counts.nal"
                    },
                    {
                        "properties": {
                            "researchNotes": {
                                "type": "integer"
                            },
                            "systemNotes": {
                                "type": "integer"
                            },
                            "gdprNotes": {
                                "type": "integer"
                            },
                            "tasks": {
                                "type": "integer"
                            },
                            "pendingTasks": {
                                "type": "integer"
                            },
                            "doneTasks": {
                                "type": "integer"
                            },
                            "meetings": {
                                "type": "integer"
                            },
                            "upcomingMeetings": {
                                "type": "integer"
                            },
                            "pastMeetings": {
                                "type": "integer"
                            },
                            "attachments": {
                                "type": "integer"
                            },
                            "customValues": {
                                "type": "integer"
                            },
                            "tags": {
                                "type": "integer"
                            },
                            "emails": {
                                "type": "integer"
                            },
                            "forms": {
                                "type": "integer"
                            }
                        },
                        "type": "object",
                        "property": "manager"
                    },
                    {
                        "properties": {
                            "companies": {
                                "type": "integer"
                            },
                            "lists": {
                                "type": "integer"
                            },
                            "custom": {
                                "type": "integer"
                            },
                            "billings": {
                                "type": "integer"
                            },
                            "assignments": {
                                "type": "integer"
                            },
                            "opportunities": {
                                "type": "integer"
                            },
                            "candidatesLists": {
                                "type": "integer"
                            }
                        },
                        "type": "object",
                        "property": "relationships"
                    }
                ]
            },
            "api.v3.project.actions": {
                "title": "Project Action Tags",
                "properties": {
                    "id": {
                        "description": "Class ProjectActionResource",
                        "type": "integer",
                        "example": 1234
                    },
                    "days": {
                        "description": "Number of days before the task needs to be repeated",
                        "type": "integer",
                        "example": 22
                    },
                    "repeating": {
                        "type": "boolean"
                    },
                    "emailAlert": {
                        "description": "Alert assignees of the task when it is completed/deleted",
                        "type": "boolean"
                    },
                    "taskName": {
                        "type": "string",
                        "example": "Follow up email"
                    },
                    "color": {
                        "type": "string",
                        "example": "#12ab12"
                    },
                    "tag": {
                        "$ref": "#/components/schemas/api.status.simple"
                    },
                    "assignee": {
                        "$ref": "#/components/schemas/api.researcher"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    }
                },
                "type": "object"
            },
            "api.v3.assignmentInfo": {
                "title": "Project Info",
                "properties": {
                    "id": {
                        "description": "Class ProjectInfoResource",
                        "type": "integer",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "example": "CTO"
                    },
                    "projectId": {
                        "type": "string",
                        "example": "123abc"
                    },
                    "dataType": {
                        "type": "string",
                        "example": "Assignment"
                    },
                    "label": {
                        "type": "string",
                        "example": "Assignment"
                    },
                    "company": {
                        "type": "string",
                        "example": "Amazon"
                    },
                    "owner": {
                        "type": "string",
                        "example": "Jane Doe"
                    },
                    "status": {
                        "$ref": "#/components/schemas/api.status"
                    },
                    "meta": {
                        "properties": {
                            "dateAdded": {
                                "type": "string",
                                "example": "2021-04-30T08:53:20.000000Z"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/api.status"
                                }
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "api.v3.opportunityInfo": {
                "title": "Project Info",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "example": "CTO"
                    },
                    "projectId": {
                        "type": "string",
                        "example": "123abc"
                    },
                    "dataType": {
                        "type": "string",
                        "example": "Opportunity"
                    },
                    "label": {
                        "type": "string",
                        "example": "Opportunity"
                    },
                    "company": {
                        "type": "string",
                        "example": "Amazon"
                    },
                    "owner": {
                        "type": "string",
                        "example": "Jane Doe"
                    },
                    "status": {
                        "$ref": "#/components/schemas/api.status"
                    },
                    "meta": {
                        "properties": {
                            "dateAdded": {
                                "type": "string",
                                "example": "2021-04-30T08:53:20.000000Z"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/api.status"
                                }
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "api.v3.listInfo": {
                "title": "Project Info",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "example": "CTO"
                    },
                    "projectId": {
                        "type": "string",
                        "example": "123abc"
                    },
                    "dataType": {
                        "type": "string",
                        "example": "List"
                    },
                    "label": {
                        "type": "string",
                        "example": "List"
                    },
                    "company": {
                        "type": "string",
                        "example": "Amazon"
                    },
                    "owner": {
                        "type": "string",
                        "example": "Jane Doe"
                    },
                    "status": {
                        "$ref": "#/components/schemas/api.status"
                    },
                    "meta": {
                        "properties": {
                            "dateAdded": {
                                "type": "string",
                                "example": "2021-04-30T08:53:20.000000Z"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/api.status"
                                }
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "api.v3.project.default": {
                "title": "Project",
                "properties": {
                    "id": {
                        "description": "Class ProjectResource",
                        "type": "integer",
                        "example": 1234
                    },
                    "label": {
                        "type": "string",
                        "example": "assignment"
                    },
                    "dataType": {
                        "type": "string",
                        "example": "assignment"
                    },
                    "title": {
                        "type": "string",
                        "example": "Chief Technology Officer - London"
                    },
                    "projectId": {
                        "type": "string",
                        "example": "project123"
                    },
                    "description": {
                        "type": "string",
                        "example": "project description"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/api.researcher"
                    },
                    "industries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.industry"
                        }
                    },
                    "manager": {
                        "$ref": "#/components/schemas/api.v3.project.manager"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/api.v3.project.meta"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "start_date": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "end_date": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "relationships": {
                        "properties": {
                            "company": {
                                "$ref": "#/components/schemas/api.company.simple"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "api.v3.project.countableFields": {
                "title": "Project Counts",
                "type": "string",
                "enum": [
                    "manager.researchNotes",
                    "manager.systemNotes",
                    "manager.tasks",
                    "manager.pendingTasks",
                    "manager.doneTasks",
                    "manager.meetings",
                    "manager.upcomingMeetings",
                    "manager.pastMeetings",
                    "manager.attachments",
                    "manager.customValues",
                    "relationships.candidates",
                    "relationships.people",
                    "relationships.custom"
                ]
            },
            "api.v3.project.field": {
                "title": "Project Fields",
                "type": "string",
                "enum": [
                    "consultants.users",
                    "consultants.office_groups",
                    "consultants.regions",
                    "completion",
                    "industries",
                    "manager.researchNotes",
                    "manager.mostRecentResearcherNote",
                    "manager.systemNotes",
                    "manager.tasks",
                    "manager.pendingTasks",
                    "manager.doneTasks",
                    "manager.meetings",
                    "manager.upcomingMeetings",
                    "manager.upcomingMeeting",
                    "manager.pastMeetings",
                    "manager.attachments",
                    "manager.customValues",
                    "relationships.candidates",
                    "relationships.people",
                    "relationships.custom"
                ]
            },
            "api.v3.company.simple": {
                "title": "Simple Company",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "example": "Amazon"
                    },
                    "image": {
                        "properties": {
                            "url": {
                                "type": "string",
                                "example": "https://cloud.notactivelylooking.com/123"
                            },
                            "color": {
                                "type": "string",
                                "example": "#abcabc"
                            }
                        },
                        "type": "object"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    }
                },
                "type": "object"
            },
            "api.v3.project.manager": {
                "title": "Project Manager Items",
                "properties": {
                    "status": {
                        "$ref": "#/components/schemas/api.status"
                    },
                    "pendingTasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.task.simple"
                        }
                    },
                    "tasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.task"
                        }
                    },
                    "doneTasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.task.simple"
                        }
                    },
                    "meetings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting"
                        }
                    },
                    "upcomingMeetings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting.simple"
                        }
                    },
                    "pastMeetings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting.simple"
                        }
                    },
                    "attendedMeetings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.meeting.simple"
                        }
                    },
                    "researchNotes": {
                        "$ref": "#/components/schemas/api.notesCollection"
                    },
                    "mostRecentResearcherNote": {
                        "$ref": "#/components/schemas/api.notesCollection"
                    },
                    "systemNotes": {
                        "$ref": "#/components/schemas/api.notesCollection"
                    },
                    "customValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.customValue"
                        }
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.person.document"
                        }
                    }
                },
                "type": "object"
            },
            "api.v3.project.meta": {
                "title": "Project Meta Items",
                "properties": {
                    "watching": {
                        "type": "boolean"
                    },
                    "following": {
                        "type": "boolean"
                    },
                    "pinned": {
                        "type": "boolean"
                    },
                    "archived": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "api.v3.task": {
                "title": "Task Object",
                "properties": {
                    "id": {
                        "description": "Class TaskResource",
                        "type": "integer",
                        "example": 1234
                    },
                    "userId": {
                        "type": "integer",
                        "example": 1234
                    },
                    "title": {
                        "type": "string",
                        "example": "Do the task"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/api.researcher"
                    },
                    "note": {
                        "type": "string",
                        "example": "Task Note"
                    },
                    "timezone": {
                        "type": "string",
                        "example": "Europe/London"
                    },
                    "tag": {
                        "$ref": "#/components/schemas/api.status.simple"
                    },
                    "date": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "done": {
                        "type": "boolean",
                        "example": true
                    },
                    "priority": {
                        "type": "integer",
                        "example": 2
                    },
                    "private": {
                        "type": "boolean",
                        "example": true
                    },
                    "pinned": {
                        "type": "boolean",
                        "example": true
                    },
                    "lastPinned": {
                        "type": "boolean",
                        "example": true
                    },
                    "recursion": {
                        "description": "How the task repeats",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.task.recursion"
                        }
                    },
                    "action": {
                        "description": "Only relevant for tasks on leads",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v3.task.action"
                        }
                    },
                    "channels": {
                        "description": "An array of channels that belong to the task",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.calendarable"
                        }
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2022-07-31T00:00:00.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2022-07-31T00:00:00.000000Z"
                    }
                },
                "type": "object"
            },
            "api.v3.task.field": {
                "title": "Task Fields",
                "type": "string",
                "enum": [
                    "feedbacks",
                    "action"
                ]
            },
            "api.v3.task.action": {
                "title": "Task Action",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "project": {
                        "type": "integer",
                        "example": 1234
                    }
                },
                "type": "object"
            },
            "api.v3.officeGroup": {
                "title": "Office Group",
                "properties": {
                    "id": {
                        "description": "Class OfficeGroupResource",
                        "type": "integer",
                        "example": 1234
                    },
                    "firmId": {
                        "type": "integer",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "example": "An Office Group"
                    },
                    "description": {
                        "type": "string",
                        "example": "A description"
                    },
                    "invoicesCount": {
                        "type": "integer",
                        "example": 1234
                    },
                    "revenuesCount": {
                        "type": "integer",
                        "example": 1234
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v3.officeGroup.user"
                        }
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v3.region"
                        }
                    }
                },
                "type": "object"
            },
            "api.v3.officeGroup.user": {
                "title": "Office Group User",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "example": "Jim Brown"
                    },
                    "email": {
                        "type": "string",
                        "example": "me@example.com"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    }
                },
                "type": "object"
            },
            "api.v3.region": {
                "title": "Region",
                "properties": {
                    "id": {
                        "description": "Class RegionResource",
                        "type": "integer",
                        "example": 1234
                    },
                    "firmId": {
                        "type": "integer",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "example": "A Region"
                    },
                    "description": {
                        "type": "string",
                        "example": "A description"
                    },
                    "officeGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v3.officeGroup"
                        }
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v3.region.user"
                        }
                    }
                },
                "type": "object"
            },
            "api.v3.region.user": {
                "title": "Region User",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "example": "Jim Brown"
                    },
                    "email": {
                        "type": "string",
                        "example": "me@example.com"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    }
                },
                "type": "object"
            },
            "api.v3.billing": {
                "title": "Billing Object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "brief_id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "client_id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "contact": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v3.person.default"
                        }
                    },
                    "revenues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v3.billing.revenue"
                        }
                    },
                    "invoices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v3.invoice.default"
                        }
                    },
                    "fixedFees": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v3.billing.fixedFee"
                        }
                    }
                },
                "type": "object"
            },
            "api.v3.billing.fixedFee": {
                "title": "Billing Fixed Fee Object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": "1234"
                    },
                    "billingId": {
                        "type": "integer",
                        "example": "1234"
                    },
                    "refNumber": {
                        "type": "string",
                        "example": "ref1234"
                    },
                    "dueDate": {
                        "type": "string",
                        "example": "2022-07-31T00:00:00.000000Z"
                    },
                    "tag": {
                        "$ref": "#/components/schemas/api.status.simple"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/api.billing.recipient"
                    },
                    "creator": {
                        "$ref": "#/components/schemas/api.researcher"
                    },
                    "paidAt": {
                        "type": "string",
                        "example": "2022-07-31T00:00:00.000000Z"
                    },
                    "lockedAt": {
                        "type": "string",
                        "example": "2022-07-31T00:00:00.000000Z"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "project": {
                        "properties": {
                            "label": {
                                "type": "string",
                                "example": "assignment"
                            },
                            "id": {
                                "type": "integer",
                                "example": "123"
                            },
                            "projectId": {
                                "type": "string",
                                "example": "project123"
                            }
                        },
                        "type": "object"
                    },
                    "note": {
                        "type": "string",
                        "example": "This is a note"
                    },
                    "isFixedFee": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "api.v3.invoice.default": {
                "title": "Billing Invoice Object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": "1234"
                    },
                    "billingId": {
                        "type": "integer",
                        "example": "1234"
                    },
                    "invoicedAt": {
                        "type": "string",
                        "example": "2022-07-31T00:00:00.000000Z"
                    },
                    "paidAt": {
                        "type": "string",
                        "example": "2022-07-31T00:00:00.000000Z"
                    },
                    "sentAt": {
                        "type": "string",
                        "example": "2022-07-31T00:00:00.000000Z"
                    },
                    "dueDate": {
                        "type": "string",
                        "example": "2022-07-31T00:00:00.000000Z"
                    },
                    "lockedAt": {
                        "type": "string",
                        "example": "2022-07-31T00:00:00.000000Z"
                    },
                    "refNumber": {
                        "type": "string",
                        "example": "ref1234"
                    },
                    "total": {
                        "properties": {
                            "amount": {
                                "type": "number",
                                "format": "float",
                                "example": "50.30"
                            },
                            "currency": {
                                "$ref": "#/components/schemas/api.currency"
                            }
                        },
                        "type": "object"
                    },
                    "items": {
                        "$ref": "#/components/schemas/api.invoiceItem"
                    },
                    "tag": {
                        "$ref": "#/components/schemas/api.status.simple"
                    },
                    "template": {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": "1234"
                            },
                            "name": {
                                "type": "string",
                                "example": "Default Template"
                            },
                            "firmName": {
                                "type": "string",
                                "example": "ACME"
                            },
                            "logo": {
                                "type": "string",
                                "example": "https://cloud.notactivelylooking.com/1234"
                            },
                            "address": {
                                "type": "string",
                                "example": "123 Catton Court"
                            },
                            "website": {
                                "type": "string",
                                "example": "https://example.com"
                            },
                            "taxPercent": {
                                "type": "number",
                                "format": "float",
                                "example": "20.0"
                            },
                            "taxType": {
                                "type": "number",
                                "format": "float",
                                "example": "20.0"
                            },
                            "incremental": {
                                "type": "boolean"
                            },
                            "numberPattern": {
                                "type": "string",
                                "example": "EZ0001"
                            },
                            "nextNumber": {
                                "type": "string",
                                "example": "EZ0002"
                            },
                            "lastNumber": {
                                "type": "string",
                                "example": "EZ0001"
                            },
                            "paymentTerms": {
                                "type": "integer",
                                "example": "30"
                            },
                            "footer": {
                                "type": "string",
                                "example": "Invoice footer"
                            },
                            "addedBy": {
                                "type": "string",
                                "example": "John Smith"
                            },
                            "note": {
                                "type": "string",
                                "example": "This is a  note"
                            },
                            "title": {
                                "type": "string",
                                "example": "Invoice"
                            },
                            "altTitle": {
                                "type": "string",
                                "example": "Credit Note"
                            },
                            "createdAt": {
                                "type": "string",
                                "example": "2022-07-31T00:00:00.000000Z"
                            },
                            "updatedAt": {
                                "type": "string",
                                "example": "2022-07-31T00:00:00.000000Z"
                            }
                        },
                        "type": "object"
                    },
                    "taxType": {
                        "type": "string",
                        "example": "VAT"
                    },
                    "taxPercent": {
                        "type": "string",
                        "example": "20"
                    },
                    "filename": {
                        "type": "string",
                        "example": "https://cloud.notactivelylooking.com/123"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/api.researcher"
                    },
                    "creator": {
                        "$ref": "#/components/schemas/api.researcher"
                    },
                    "relationships": {
                        "$ref": "#/components/schemas/api.v3.invoice.relationships"
                    }
                },
                "type": "object"
            },
            "api.v3.invoice.full": {
                "title": "Invoice Full",
                "allOf": [
                    {
                        "properties": {
                            "": {
                                "$ref": "#/components/schemas/api.v3.invoice.default"
                            },
                            "relationships": {
                                "$ref": "#/components/schemas/api.v3.invoice.relationships"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "api.v3.invoice.relationships": {
                "title": "Invoice Relationships",
                "properties": {
                    "revenue": {
                        "$ref": "#/components/schemas/api.v3.billing.revenue"
                    },
                    "contact": {
                        "$ref": "#/components/schemas/api.person.default"
                    },
                    "company": {
                        "$ref": "#/components/schemas/api.company.simple"
                    },
                    "project": {
                        "$ref": "#/components/schemas/api.v1.assignmentInfo"
                    },
                    "percentSplits": {
                        "$ref": "#/components/schemas/api.billing.feeSplit"
                    }
                },
                "type": "object"
            },
            "api.v3.invoice.countableFields": {
                "title": "Invoice Counts",
                "type": "string",
                "enum": [
                    "relationships.percentSplits"
                ]
            },
            "api.v3.invoice.field": {
                "title": "Invoice Fields",
                "type": "string",
                "enum": [
                    "relationships.contact",
                    "relationships.company",
                    "relationships.project",
                    "relationships.percentSplit",
                    "relationships.revenue"
                ]
            },
            "api.v3.billing.revenue": {
                "title": "Billing Revenue Object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": "1234"
                    },
                    "date": {
                        "type": "string",
                        "example": "2022-07-31T00:00:00.000000Z"
                    },
                    "total": {
                        "properties": {
                            "amount": {
                                "type": "number",
                                "format": "float",
                                "example": "50.30"
                            },
                            "currency": {
                                "$ref": "#/components/schemas/api.currency"
                            }
                        },
                        "type": "object"
                    },
                    "tag": {
                        "$ref": "#/components/schemas/api.status.simple"
                    },
                    "probability": {
                        "type": "integer",
                        "example": "30"
                    },
                    "refNumber": {
                        "type": "string"
                    },
                    "note": {
                        "type": "string"
                    },
                    "lockedAt": {
                        "type": "string",
                        "example": "2022-07-31T00:00:00.000000Z"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/api.researcher"
                    },
                    "creator": {
                        "$ref": "#/components/schemas/api.researcher"
                    },
                    "relationships": {
                        "$ref": "#/components/schemas/api.revenue.relationships"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    }
                },
                "type": "object"
            },
            "api.v3.revenue.relationships": {
                "title": "Revenue Relationships",
                "properties": {
                    "company": {
                        "$ref": "#/components/schemas/api.company.simple"
                    },
                    "project": {
                        "$ref": "#/components/schemas/api.v1.assignmentInfo"
                    },
                    "percentSplits": {
                        "$ref": "#/components/schemas/api.billing.feeSplit"
                    }
                },
                "type": "object"
            },
            "api.v3.revenue.field": {
                "title": "Revenue Fields",
                "type": "string",
                "enum": [
                    "relationships.company",
                    "relationships.project",
                    "relationships.percentSplits"
                ]
            },
            "api.v3.search.user": {
                "title": "Search Firm User Object",
                "properties": {
                    "id": {
                        "description": "Class SearchFirmUserResource",
                        "type": "integer",
                        "example": 1234
                    },
                    "firstName": {
                        "type": "string",
                        "example": "Jane"
                    },
                    "lastName": {
                        "type": "string",
                        "example": "Doe"
                    },
                    "fullName": {
                        "type": "string",
                        "example": "Jane Doe"
                    },
                    "email": {
                        "type": "string",
                        "example": "me@example.com"
                    },
                    "phone": {
                        "type": "string",
                        "example": "01234 567890"
                    },
                    "firstLogin": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "lastLogin": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "label": {
                        "type": "string",
                        "example": "user"
                    },
                    "disabled": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "role": {
                        "type": "string",
                        "example": "search"
                    },
                    "relationships": {
                        "$ref": "#/components/schemas/api.v3.search.user.relationships"
                    },
                    "hasApiTokens": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "api.v3.search.user.relationships": {
                "title": "Search Firm User Relationships",
                "properties": {
                    "assignments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v3.search.user.projects"
                        }
                    },
                    "opportunities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v3.search.user.projects"
                        }
                    },
                    "lists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v3.search.user.projects"
                        }
                    },
                    "companies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v3.search.user.companies"
                        }
                    },
                    "people": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v3.search.user.people"
                        }
                    },
                    "invoices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v3.search.user.invoices"
                        }
                    },
                    "revenues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v3.search.user.revenues"
                        }
                    },
                    "delegates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v3.search.user.delegates"
                        }
                    },
                    "officeGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.v3.officeGroup"
                        }
                    }
                },
                "type": "object"
            },
            "api.v3.search.user.projects": {
                "title": "Search Firm User Projects",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "example": "CTO"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    }
                },
                "type": "object"
            },
            "api.v3.search.user.companies": {
                "title": "Search Firm User Companies",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "example": "Acme Inc"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    }
                },
                "type": "object"
            },
            "api.v3.search.user.people": {
                "title": "Search Firm User People",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "example": "Jim Brown"
                    },
                    "email": {
                        "type": "string",
                        "example": "me@example.com"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    }
                },
                "type": "object"
            },
            "api.v3.search.user.invoices": {
                "title": "Search Firm User Invoices",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "invoiceNumber": {
                        "type": "string",
                        "example": "123456"
                    },
                    "formattedTotal": {
                        "type": "string",
                        "example": "1000.70"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    }
                },
                "type": "object"
            },
            "api.v3.search.user.revenues": {
                "title": "Search Firm User Revenues",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "formattedTotal": {
                        "type": "string",
                        "example": "1000.70"
                    },
                    "assignment": {
                        "type": "string",
                        "example": "Managing Director"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    }
                },
                "type": "object"
            },
            "api.v3.search.user.delegates": {
                "title": "Search Firm User Delegates",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "example": "Jim Brown"
                    },
                    "email": {
                        "type": "string",
                        "example": "me@example.com"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    }
                },
                "type": "object"
            },
            "api.v3.search.user.field": {
                "title": "Search Firm User Fields",
                "type": "string",
                "enum": [
                    "relationships.assignments",
                    "relationships.opportunities",
                    "relationships.lists",
                    "relationships.companies",
                    "relationships.people",
                    "relationships.invoices",
                    "relationships.revenues",
                    "relationships.delegates",
                    "relationships.officeGroups",
                    "hasApiTokens"
                ]
            },
            "api.relationships": {
                "title": "Relationship Object",
                "properties": {
                    "assignments": {
                        "description": "Class Relationship",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.relationships.projects"
                        }
                    },
                    "opportunities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.relationships.projects"
                        }
                    },
                    "companies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.relationships.companies"
                        }
                    },
                    "people": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/api.relationships.people"
                        }
                    }
                },
                "type": "object"
            },
            "api.relationships.single": {
                "title": "Relationship Object",
                "type": "object",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/api.relationships.projects"
                    },
                    {
                        "$ref": "#/components/schemas/api.relationships.companies"
                    },
                    {
                        "$ref": "#/components/schemas/api.relationships.people"
                    }
                ]
            },
            "api.relationships.default": {
                "title": "Relationship Object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "addedAt": {
                        "type": "string",
                        "example": "2021-04-30T08:53:20.000000Z"
                    },
                    "note": {
                        "type": "string",
                        "example": "Relationship Note"
                    },
                    "relationship": {
                        "type": "integer",
                        "example": 1234
                    },
                    "label": {
                        "type": "string",
                        "example": "Related"
                    }
                },
                "type": "object"
            },
            "api.relationships.projects": {
                "title": "Relationship projects",
                "description": "Return an array of projects belonging to the relationship.",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/api.relationships.default"
                    },
                    {
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "Head of Acme Enterprises"
                            },
                            "company": {
                                "type": "string",
                                "example": "Acme Enterprises Ltd"
                            },
                            "image": {
                                "type": "string",
                                "example": "logo.jpg"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "api.relationships.companies": {
                "title": "Relationship companies",
                "description": "Return an array of companies belonging to the relationship.",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/api.relationships.default"
                    },
                    {
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "Acme Enterprises Ltd"
                            },
                            "company": {
                                "type": "string",
                                "example": "Acme Enterprises Ltd"
                            },
                            "image": {
                                "type": "string",
                                "example": "logo.jpg"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "api.relationships.people": {
                "title": "Relationship people",
                "description": "Return an array of people belonging to the relationship.",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/api.relationships.default"
                    },
                    {
                        "properties": {
                            "honorific": {
                                "type": "string",
                                "example": "Dr."
                            },
                            "name": {
                                "type": "string",
                                "example": "Jane Doe"
                            },
                            "firstName": {
                                "type": "string",
                                "example": "Jane"
                            },
                            "lastName": {
                                "type": "string",
                                "example": "Doe"
                            },
                            "fullName": {
                                "type": "string",
                                "example": "Jane Doe"
                            },
                            "summary": {
                                "type": "string",
                                "example": "Jane Doe has previously worked for ..."
                            },
                            "jobTitle": {
                                "type": "string",
                                "example": "Manager"
                            },
                            "company": {
                                "type": "string",
                                "example": "Acme Enterprises Ltd"
                            },
                            "personTags": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/api.status"
                                }
                            },
                            "pipelineTags": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/api.status"
                                }
                            },
                            "assignmentCount": {
                                "type": "integer",
                                "example": "1"
                            },
                            "opportunityCount": {
                                "type": "integer",
                                "example": "1"
                            },
                            "listCount": {
                                "type": "integer",
                                "example": "1"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "api.relationshipLabel": {
                "title": "Relationship Label",
                "properties": {
                    "id": {
                        "description": "Class RelationshipLabel",
                        "type": "integer",
                        "example": 1234
                    },
                    "text": {
                        "type": "string",
                        "example": "Works for"
                    },
                    "default": {
                        "type": "boolean",
                        "example": true
                    },
                    "inverse": {
                        "$ref": "#/components/schemas/api.inverseRelationshipLabel"
                    }
                },
                "type": "object"
            },
            "api.inverseRelationshipLabel": {
                "title": "Inverse Relationship Label",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1234
                    },
                    "text": {
                        "type": "string",
                        "example": "Employee"
                    }
                },
                "type": "object"
            },
            "api.industry": {
                "title": "Industry",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/LocalizationTrait"
                    },
                    {
                        "properties": {
                            "name": {
                                "description": "Class Industry",
                                "type": "string",
                                "example": "Life Sciences"
                            },
                            "value": {
                                "type": "string",
                                "example": "Life Sciences"
                            },
                            "parent_id": {
                                "type": "integer",
                                "example": "1234"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "api.location": {
                "title": "Location",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/LocalizationTrait"
                    },
                    {
                        "properties": {
                            "lat": {
                                "description": "Class Location",
                                "type": "number",
                                "format": "float",
                                "example": 31.3
                            },
                            "long": {
                                "type": "number",
                                "format": "float",
                                "example": 31.3
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "api.422": {
                "title": "Invalid Data Response",
                "properties": {
                    "errors": {
                        "properties": {
                            "[field_with_error]": {
                                "type": "string",
                                "example": "Description of the error"
                            }
                        },
                        "type": "object"
                    },
                    "message": {
                        "type": "string",
                        "example": "The given data was invalid"
                    }
                },
                "type": "object"
            },
            "api.currency": {
                "title": "Supported Currencies",
                "type": "string",
                "enum": [
                    "USD",
                    "EUR",
                    "CAD",
                    "AUD",
                    "CHF",
                    "SEK",
                    "ZAR",
                    "DKK",
                    "MXN",
                    "PLN",
                    "INR",
                    "RUB",
                    "CLP",
                    "CZK",
                    "GBP",
                    "BGN",
                    "COP",
                    "ILS",
                    "QAR",
                    "SAR"
                ]
            },
            "api.currencyAmount": {
                "title": "Currency Amount",
                "properties": {
                    "amount": {
                        "type": "number",
                        "format": "float",
                        "example": 50.3
                    },
                    "currency": {
                        "$ref": "#/components/schemas/api.currency"
                    }
                },
                "type": "object"
            },
            "api.person.storeFile": {
                "title": "Person Store with Resume Body",
                "required": [
                    "resume"
                ],
                "properties": {
                    "resume": {
                        "type": "string",
                        "format": "binary"
                    },
                    "ownerId": {
                        "description": "The ID of the new owner of the person",
                        "type": "integer",
                        "nullable": true
                    },
                    "lists": {
                        "description": "An array of ids of the the lists that the person is in",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true
                    },
                    "projectId": {
                        "description": "The ID of a project that the person will be added to as a candidate",
                        "type": "integer"
                    },
                    "projectType": {
                        "description": "The project type",
                        "type": "string",
                        "enum": [
                            "assignment",
                            "opportunity",
                            "list"
                        ]
                    }
                },
                "type": "object"
            },
            "api.classification": {
                "title": "NED Classification",
                "description": "Class NedClassification",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/LocalizationTrait"
                    }
                ]
            },
            "api.notableInfo": {
                "title": "Basic Item Info",
                "properties": {
                    "id": {
                        "description": "Class Note",
                        "type": "integer",
                        "example": 1234
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "person",
                            "assignment",
                            "opportunity",
                            "list",
                            "client",
                            "company"
                        ]
                    },
                    "name": {
                        "type": "string",
                        "example": "Jane Doe"
                    }
                },
                "type": "object"
            },
            "api.links": {
                "title": "Links",
                "description": "Useful links for accessing other pages.",
                "properties": {
                    "first": {
                        "description": "Fetch the first page of results.",
                        "type": "string",
                        "example": "https://ezekia.com/api"
                    },
                    "last": {
                        "description": "Fetch the last page of results.",
                        "type": "string",
                        "example": "https://ezekia.com/api"
                    },
                    "next": {
                        "description": "Fetch the next page of results.",
                        "type": "string",
                        "example": "https://ezekia.com/api"
                    },
                    "prev": {
                        "description": "Fetch the previous page of results.",
                        "type": "string",
                        "example": "https://ezekia.com/api"
                    }
                },
                "type": "object"
            },
            "api.pageMeta": {
                "title": "Pagination meta data",
                "description": "Meta data about the results and pages",
                "properties": {
                    "currentPage": {
                        "description": "The current page returned.",
                        "type": "integer",
                        "example": 3
                    },
                    "lastPage": {
                        "description": "The last page number.",
                        "type": "integer",
                        "example": 5
                    },
                    "from": {
                        "description": "The index of the first item in this response.",
                        "type": "integer",
                        "example": 31
                    },
                    "to": {
                        "description": "The index of the last item in this response.",
                        "type": "integer",
                        "example": 45
                    },
                    "path": {
                        "description": "The base URL path for this route.",
                        "type": "string",
                        "example": "https://ezekia.com/api"
                    },
                    "perPage": {
                        "description": "The number of items returned in each page.",
                        "type": "integer",
                        "example": 15
                    },
                    "total": {
                        "description": "The total number of results across all pages.",
                        "type": "integer",
                        "example": 66
                    },
                    "unfilteredTotal": {
                        "description": "The total number of available items of this type.",
                        "type": "integer",
                        "example": 145
                    }
                },
                "type": "object"
            },
            "api.customField.value": {
                "title": "Custom Field Value",
                "anyOf": [
                    {
                        "type": "string",
                        "example": "Line or paragraph or single selection"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "Checkboxes"
                        }
                    },
                    {
                        "type": "boolean"
                    },
                    {
                        "type": "integer"
                    }
                ]
            },
            "api.offLimits.agreement.constraint": {
                "title": "Off Limit Agreement Constraint",
                "type": "string",
                "enum": [
                    "begins",
                    "contains",
                    "exact",
                    "containsExact"
                ]
            },
            "api.permission": {
                "title": "Access Level",
                "description": "A string indicating the access level of the authenticated user for a specific item or type of item.\n`always` - can access all items,\n`public` - can access all public items and items shared with the user,\n`shared` - can access only items shared with the user,\n`never` - cannot access any items.",
                "type": "string",
                "enum": [
                    "always",
                    "public",
                    "shared",
                    "never"
                ]
            },
            "api.task.recursion": {
                "title": "Task Recursion",
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/api.task.recursion.type"
                    },
                    "frequency": {
                        "description": "How many times to repeat",
                        "type": "integer",
                        "example": 5
                    },
                    "days": {
                        "description": "An array of days of the week to repeat the task, starting with Sunday as 0",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "maximum": 6,
                            "minimum": 0
                        }
                    }
                },
                "type": "object"
            },
            "api.task.recursion.type": {
                "title": "Recursion Type",
                "type": "string",
                "enum": [
                    "days",
                    "months",
                    "weeks",
                    "years"
                ]
            },
            "api.customValue.store": {
                "title": "Custom Value Request Object",
                "description": "Custom value request object",
                "required": [
                    "fieldId",
                    "value"
                ],
                "properties": {
                    "fieldId": {
                        "type": "integer",
                        "example": 1234
                    },
                    "modelId": {
                        "description": "The model id that the custom value is scoped to",
                        "type": "integer",
                        "example": 1234
                    },
                    "scopedModel": {
                        "description": "The model type that the custom value is scoped to",
                        "type": "string",
                        "enum": [
                            "client",
                            "project"
                        ],
                        "example": "client"
                    },
                    "value": {
                        "type": "string",
                        "example": "Custom value text"
                    }
                },
                "type": "object"
            },
            "api.customValue.update": {
                "title": "Custom Value Request Object",
                "description": "Custom value request object",
                "required": [
                    "id",
                    "fieldId",
                    "value"
                ],
                "properties": {
                    "id": {
                        "description": "The custom value id",
                        "type": "integer",
                        "example": 1234
                    },
                    "fieldId": {
                        "description": "The custom field id",
                        "type": "integer",
                        "example": 1234
                    },
                    "modelId": {
                        "description": "The model id that the custom value is scoped to",
                        "type": "integer",
                        "example": 1234
                    },
                    "scopedModel": {
                        "description": "The model type that the custom value is scoped to",
                        "type": "string",
                        "enum": [
                            "client",
                            "project"
                        ],
                        "example": "client"
                    },
                    "value": {
                        "type": "string",
                        "example": "Custom value text"
                    }
                },
                "type": "object"
            },
            "LocalizationTrait": {
                "title": "Categories",
                "properties": {
                    "id": {
                        "description": "Trait LocalizationTrait",
                        "type": "integer",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "example": "Luxembourg"
                    }
                },
                "type": "object"
            },
            "api.aspiration.status.value": {
                "title": "Aspiration Status Value",
                "description": "A scale from 0 to 4 indicating how actively the individual is looking for a new job. 0 is Not looking, 4 is actively looking.",
                "type": "integer",
                "example": 1
            },
            "api.aspiration.status.text": {
                "title": "Aspiration Status Text",
                "description": "How actively an individual is looking for a new position. (Translated to the specified language).",
                "type": "string",
                "enum": [
                    "Not Looking",
                    "Happy where I am",
                    "Not Actively Looking",
                    "May be interested",
                    "Looking"
                ]
            },
            "api.email.label": {
                "title": "Email Labels",
                "description": "Class UserEmail",
                "type": "string",
                "enum": [
                    "private",
                    "work",
                    "other",
                    "predicted"
                ]
            },
            "api.phone.label": {
                "title": "Phone Labels",
                "description": "Class UserPhone",
                "type": "string",
                "enum": [
                    "assistant",
                    "direct",
                    "home",
                    "manager",
                    "mobile",
                    "mobile-private",
                    "mobile-work",
                    "other",
                    "private",
                    "switchboard",
                    "work",
                    "billing"
                ]
            },
            "api.teamSize": {
                "title": "Team Size",
                "description": "The size of the team (translated into the specified language).",
                "type": "string",
                "enum": [
                    "No Team",
                    "Up to 10 People",
                    "10+ People",
                    "50+ People",
                    "200+ People"
                ]
            },
            "api.teamSizeId": {
                "title": "Team Size ID",
                "description": "A number representing the team size: 1 - 0, 2 - <10, 3 - >10, 4 - >50, 5 - >200",
                "type": "integer",
                "example": 1234
            },
            "api.positionType": {
                "title": "Position Type",
                "type": "string",
                "enum": [
                    "permanent",
                    "interim",
                    "parttime",
                    "contract",
                    "temporary",
                    "ned"
                ]
            }
        },
        "parameters": {
            "api.lead.sortBy": {
                "name": "sortBy",
                "in": "query",
                "description": "The field that should be used to sort the results.\n\nThe direction can be specified with the `sortOrder` parameter.",
                "schema": {
                    "description": "The best match if the `query` parameter is used, otherwise they will be ordered by when they were added to the platform.",
                    "type": "string",
                    "enum": [
                        "taskDate",
                        "addedAt",
                        "lastName",
                        "firstName",
                        "fullName",
                        "company",
                        "createdAt",
                        "updatedAt"
                    ],
                    "example": "createdAt"
                }
            },
            "api.lead.status": {
                "name": "status",
                "in": "query",
                "description": "Filter people with a specified status in the context of the list.\n\n    If more than one status is specified then results matching any of the status will be returned.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "example": 1234
                    }
                }
            },
            "api.list.fields": {
                "name": "fields[]",
                "in": "query",
                "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down request.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.list.field"
                    }
                }
            },
            "api.company.fields": {
                "name": "fields[]",
                "in": "query",
                "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down requests.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.company.field"
                    }
                }
            },
            "api.company.exclude": {
                "name": "exclude[]",
                "in": "query",
                "description": "Fields can be excluded by passing them into the `exclude` query parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.company.field"
                    }
                }
            },
            "api.company.counts": {
                "name": "counts[]",
                "in": "query",
                "description": "The count of any countable field can be included in the `counts` field by added the required fields to the `count` query parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.company.countableFields"
                    }
                }
            },
            "api.person.fields": {
                "name": "fields[]",
                "in": "query",
                "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down requests.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.person.field"
                    }
                }
            },
            "api.person.fieldsWithCandidate": {
                "name": "fieldsWithCandidate",
                "in": "query",
                "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down requests.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.person.fieldWithCandidate"
                    }
                }
            },
            "api.person.exclude": {
                "name": "exclude[]",
                "in": "query",
                "description": "Fields can be excluded by passing them into the `exclude` query parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.person.field"
                    }
                }
            },
            "api.person.counts": {
                "name": "counts[]",
                "in": "query",
                "description": "The count of any countable field can be included in the `counts` field by added the required fields to the `count` query parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.person.countableFields"
                    }
                }
            },
            "api.project.fields": {
                "name": "fields[]",
                "in": "query",
                "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down request.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.project.field"
                    }
                }
            },
            "api.project.exclude": {
                "name": "exclude[]",
                "in": "query",
                "description": "Fields can be excluded by passing them into the `exclude` query parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.project.field"
                    }
                }
            },
            "api.project.counts": {
                "name": "counts[]",
                "in": "query",
                "description": "The count of any countable field can be included in the `counts` field by adding the required fields to the `count` query parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.project.countableFields"
                    }
                }
            },
            "api.task.fields": {
                "name": "fields",
                "in": "query",
                "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down request.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.task.field"
                    }
                }
            },
            "api.invoice.counts": {
                "name": "counts[]",
                "in": "query",
                "description": "The count of any countable field can be included in the `counts` field by added the required fields to the `count` query parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.invoice.countableFields"
                    }
                }
            },
            "api.invoice.fields": {
                "name": "fields[]",
                "in": "query",
                "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down requests.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.invoice.field"
                    }
                }
            },
            "api.invoice.exclude": {
                "name": "exclude[]",
                "in": "query",
                "description": "Fields can be excluded by passing them into the `exclude` query parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.invoice.field"
                    }
                }
            },
            "api.revenue.fields": {
                "name": "fields[]",
                "in": "query",
                "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down request.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.revenue.field"
                    }
                }
            },
            "api.v2.company.fields": {
                "name": "fields",
                "in": "query",
                "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down requests.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.v2.company.field"
                    }
                }
            },
            "api.v2.company.exclude": {
                "name": "exclude",
                "in": "query",
                "description": "Fields can be excluded by passing them into the `exclude` query parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.v2.company.field"
                    }
                }
            },
            "api.v2.company.counts": {
                "name": "counts",
                "in": "query",
                "description": "The count of any countable field can be included in the `counts` field by added the required fields to the `count` query parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.company.countableFields"
                    }
                }
            },
            "api.v2.person.fields": {
                "name": "fields[]",
                "in": "query",
                "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down requests.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.person.field"
                    }
                }
            },
            "api.v2.person.fieldsWithCandidate": {
                "name": "fieldsWithCandidate",
                "in": "query",
                "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down requests.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.v2.person.fieldWithCandidate"
                    }
                }
            },
            "api.v2.person.exclude": {
                "name": "exclude[]",
                "in": "query",
                "description": "Fields can be excluded by passing them into the `exclude` query parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.person.field"
                    }
                }
            },
            "api.v2.person.counts": {
                "name": "counts[]",
                "in": "query",
                "description": "The count of any countable field can be included in the `counts` field by added the required fields to the `count` query parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.person.countableFields"
                    }
                }
            },
            "api.v3.company.fields": {
                "name": "fields",
                "in": "query",
                "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down requests.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.v3.company.field"
                    }
                }
            },
            "api.v3.company.exclude": {
                "name": "exclude",
                "in": "query",
                "description": "Fields can be excluded by passing them into the `exclude` query parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.v3.company.field"
                    }
                }
            },
            "api.v3.company.counts": {
                "name": "counts",
                "in": "query",
                "description": "The count of any countable field can be included in the `counts` field by added the required fields to the `count` query parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.v3.company.countableFields"
                    }
                }
            },
            "api.v3.person.fields": {
                "name": "fields",
                "in": "query",
                "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down requests.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.v3.person.field"
                    }
                }
            },
            "api.v3.person.fieldsWithCandidate": {
                "name": "fieldsWithCandidate",
                "in": "query",
                "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down requests.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.v3.person.fieldWithCandidate"
                    }
                }
            },
            "api.v3.person.exclude": {
                "name": "exclude",
                "in": "query",
                "description": "Fields can be excluded by passing them into the `exclude` query parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.v3.person.field"
                    }
                }
            },
            "api.v3.person.counts": {
                "name": "counts",
                "in": "query",
                "description": "The count of any countable field can be included in the `counts` field by added the required fields to the `count` query parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.v3.person.countableFields"
                    }
                }
            },
            "api.v3.project.fields": {
                "name": "fields",
                "in": "query",
                "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down request.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.project.field"
                    }
                }
            },
            "api.v3.project.exclude": {
                "name": "exclude",
                "in": "query",
                "description": "Fields can be excluded by passing them into the `exclude` query parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.project.field"
                    }
                }
            },
            "api.v3.project.counts": {
                "name": "counts",
                "in": "query",
                "description": "The count of any countable field can be included in the `counts` field by adding the required fields to the `count` query parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.v3.project.countableFields"
                    }
                }
            },
            "api.v3.task.fields": {
                "name": "fields",
                "in": "query",
                "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down request.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.v3.task.field"
                    }
                }
            },
            "api.v3.invoice.counts": {
                "name": "counts[]",
                "in": "query",
                "description": "The count of any countable field can be included in the `counts` field by added the required fields to the `count` query parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.v3.invoice.countableFields"
                    }
                }
            },
            "api.v3.invoice.fields": {
                "name": "fields[]",
                "in": "query",
                "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down requests.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.v3.invoice.field"
                    }
                }
            },
            "api.v3.invoice.exclude": {
                "name": "exclude[]",
                "in": "query",
                "description": "Fields can be excluded by passing them into the `exclude` query parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.v3.invoice.field"
                    }
                }
            },
            "api.v3.revenue.fields": {
                "name": "fields[]",
                "in": "query",
                "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down request.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.v3.revenue.field"
                    }
                }
            },
            "api.v3.search.user.fields": {
                "name": "fields",
                "in": "query",
                "description": "Fields can be included by passing them into the `fields` query parameter. Be careful as this will slow down requests.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/api.v3.search.user.field"
                    }
                }
            },
            "api.person.isCandidate": {
                "name": "isCandidate",
                "in": "query",
                "description": "Include only people that have been added as a candidate to an assignment.",
                "allowEmptyValue": true,
                "schema": {
                    "type": "boolean"
                }
            },
            "api.person.onCompanies": {
                "name": "onCompanies",
                "in": "query",
                "description": "Include only people that work for a company record.",
                "allowEmptyValue": true,
                "schema": {
                    "type": "boolean"
                }
            },
            "api.noteType": {
                "name": "noteType",
                "in": "query",
                "description": "Filter which type of note is returned",
                "schema": {
                    "type": "string",
                    "default": "`user`",
                    "enum": [
                        "`user`",
                        "`system`",
                        "`compliance`",
                        "`linked`"
                    ]
                },
                "example": "user"
            },
            "api.note.contacts": {
                "name": "associatedContacts",
                "in": "query",
                "description": "Filter the results by people associated with user notes. The `noteType` parameter must be `user`\n\nIf more than one context is specified then results matching any of the context will be returned.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "example": 1234
                    }
                }
            },
            "api.note.companies": {
                "name": "associatedCompanies",
                "in": "query",
                "description": "Filter the results by companies associated with user notes. The `noteType` parameter must be `user`\n\nIf more than one context is specified then results matching any of the context will be returned.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "example": 1234
                    }
                }
            },
            "api.note.projects": {
                "name": "associatedProjects",
                "in": "query",
                "description": "Filter the results by projects associated with user notes. The `noteType` parameter must be `user`\n\nIf more than one context is specified then results matching any of the context will be returned.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "example": 1234
                    }
                }
            },
            "api.page": {
                "name": "page",
                "in": "query",
                "description": "Specify the page of items to be returned",
                "schema": {
                    "type": "integer"
                }
            },
            "api.count": {
                "name": "count",
                "in": "query",
                "description": "Specify how many records to be returned per page.",
                "schema": {
                    "type": "integer"
                }
            },
            "api.from": {
                "name": "from",
                "in": "query",
                "description": "Filter results where the id is greater than the value provided. Used together with `to` to retrieve records from a range.",
                "schema": {
                    "type": "integer"
                }
            },
            "api.to": {
                "name": "to",
                "in": "query",
                "description": "Filter results where the id is equal to or less than the value provided. Used together with `from` to retrieve records from a range.",
                "schema": {
                    "type": "integer"
                }
            },
            "api.ids": {
                "name": "ids[]",
                "in": "query",
                "description": "Filter results where the id is in the given array of ids. Should not be used with the `from` or `to` parameters.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "example": 1234
                    }
                }
            },
            "api.since": {
                "name": "since",
                "in": "query",
                "description": "Filter all results where a date (default is time created) is after a specified time.\n\nThe date can be in multiple formats, many human-readable strings are allowed, as well as several date formats (e.g. \"last month\", \"2021-03-02\", \"1620136853\" (epoch time in seconds only), etc.)",
                "schema": {
                    "type": "string"
                }
            },
            "api.before": {
                "name": "before",
                "in": "query",
                "description": "Filter all results where a date (default is time created) is before a specified time.\n\nThe date can be in multiple formats, many human-readable strings are allowed, as well as several date formats (e.g. \"last month\", \"2021-03-02\", \"1620136853\" (epoch time in seconds only), etc.)",
                "schema": {
                    "type": "string"
                }
            },
            "api.between": {
                "name": "between",
                "in": "query",
                "description": "Filter all results where a date (default is time created) is between two dates/times.\n\nThe dates can be in multiple formats, many human-readable strings are allowed, as well as several date formats (e.g. \"last month\", \"2021-03-02\", \"1620136853\" (epoch time in seconds only), etc.)",
                "schema": {
                    "type": "string"
                }
            },
            "api.tags": {
                "name": "tags[]",
                "in": "query",
                "description": "Filter the results with certain tags.\n\nIf more than one tag is specified then results matching any of the tags will be returned.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "example": 1234
                    }
                }
            },
            "api.view": {
                "name": "view",
                "in": "query",
                "description": "Filter results based on how they are associated with the authenticated user.\n\n`region` will return all results that are shared with the authenticated user's regions.",
                "schema": {
                    "type": "string",
                    "enum": [
                        "mine",
                        "following",
                        "associated",
                        "office",
                        "region"
                    ]
                }
            },
            "api.withArchived": {
                "name": "withArchived",
                "in": "query",
                "description": "Archived items are not normally returned in the results. By setting this parameter they will be included.",
                "allowEmptyValue": true,
                "schema": {
                    "type": "boolean"
                }
            },
            "api.archived": {
                "name": "archived",
                "in": "query",
                "description": "Archived items are not normally returned in the results. By setting this parameter the results will only be archived items.",
                "allowEmptyValue": true,
                "schema": {
                    "type": "boolean"
                }
            },
            "api.query": {
                "name": "query",
                "in": "query",
                "description": "A query string to filter the results (the shorthand `q` can be used as well).\n\nThe `filterOn` query parameter allows you to specify the fields that should be affected by the query.",
                "schema": {
                    "type": "string"
                },
                "example": "Jane Doe"
            },
            "api.sortOrder": {
                "name": "sortOrder",
                "in": "query",
                "description": "The direction of the sorted results.",
                "schema": {
                    "type": "string",
                    "default": "asc",
                    "enum": [
                        "asc",
                        "desc"
                    ]
                },
                "example": "asc"
            },
            "api.note.sortOrder": {
                "name": "sortOrder",
                "in": "query",
                "description": "The direction of the sorted results.",
                "schema": {
                    "type": "string",
                    "default": "desc",
                    "enum": [
                        "asc",
                        "desc"
                    ]
                },
                "example": "asc"
            },
            "api.fuzzy": {
                "name": "fuzzy",
                "in": "query",
                "description": "The `query` parameter will filter items that match exactly with the query string.\nBy adding the `fuzzy` parameter the matching will be less strict, accounting for typos.",
                "allowEmptyValue": true,
                "schema": {
                    "type": "boolean"
                }
            },
            "api.company.filterOn": {
                "name": "filterOn[]",
                "in": "query",
                "description": "The fields that should be matched against the `query` parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "name",
                            "alias",
                            "email",
                            "owner",
                            "industry",
                            "division",
                            "specialities",
                            "link",
                            "customFields",
                            "status"
                        ]
                    },
                    "example": "name"
                }
            },
            "api.company.sortBy": {
                "name": "sortBy",
                "in": "query",
                "description": "The field that should be used to sort the results.\n     *     The direction can be specified with the `sortOrder` parameter.",
                "schema": {
                    "description": "The best match if the `query` parameter is used, otherwise they will be ordered by when they were added to the platform.",
                    "type": "string",
                    "enum": [
                        "id",
                        "name",
                        "createdAt",
                        "updatedAt"
                    ],
                    "example": "createdAt"
                }
            },
            "api.feeSplits.filterOn": {
                "name": "filterOn[]",
                "in": "query",
                "description": "The fields that should be matched against in the `query` parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "refNumber",
                            "splitAmount",
                            "recipientAmount",
                            "recipientName",
                            "currency",
                            "tag",
                            "industries",
                            "projectId",
                            "projectName",
                            "companyName",
                            "companyEmail"
                        ]
                    },
                    "example": "tag"
                }
            },
            "api.feeSplits.sortBy": {
                "name": "sortBy",
                "in": "query",
                "description": "The field that should be used to sort the results.\nThe direction can be specified with the `sortOrder` parameter.",
                "schema": {
                    "description": "The best match if the `query` parameter is used, otherwise they will be ordered by when they were added to the platform.",
                    "type": "string",
                    "enum": [
                        "id",
                        "tag",
                        "createdAt",
                        "updatedAt",
                        "refNumber"
                    ],
                    "example": "createdAt"
                }
            },
            "api.invoice.filterOn": {
                "name": "filterOn[]",
                "in": "query",
                "description": "The fields that should be matched against in the `query` parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "invoiceId",
                            "refNumber",
                            "currency",
                            "amount",
                            "tag",
                            "owner",
                            "industries",
                            "projectId",
                            "projectName",
                            "companyName",
                            "companyEmail"
                        ]
                    },
                    "example": "tag"
                }
            },
            "api.invoice.sortBy": {
                "name": "sortBy",
                "in": "query",
                "description": "The field that should be used to sort the results.\nThe direction can be specified with the `sortOrder` parameter.",
                "schema": {
                    "description": "The best match if the `query` parameter is used, otherwise they will be ordered by when they were added to the platform.",
                    "type": "string",
                    "enum": [
                        "id",
                        "tag",
                        "createdAt",
                        "updatedAt",
                        "invoiceId",
                        "refNumber"
                    ],
                    "example": "createdAt"
                }
            },
            "api.list.sortBy": {
                "name": "sortBy",
                "in": "query",
                "description": "The field that should be used to sort the results.\nThe direction can be specified with the `sortOrder` parameter.",
                "schema": {
                    "description": "The best match if the `query` parameter is used, otherwise they will be ordered by when they were added to the platform.",
                    "type": "string",
                    "enum": [
                        "id",
                        "name",
                        "createdAt",
                        "updatedAt"
                    ],
                    "example": "createdAt"
                }
            },
            "api.person.filterOn": {
                "name": "filterOn[]",
                "in": "query",
                "description": "The fields that should be matched against the `query` parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "honorific",
                            "fullName",
                            "aliases",
                            "email",
                            "owner",
                            "company",
                            "currentCompany",
                            "department",
                            "location",
                            "phone",
                            "jobTitle",
                            "currentJobTitle",
                            "link",
                            "tag",
                            "customField",
                            "address"
                        ]
                    },
                    "example": "fullName"
                }
            },
            "api.person.sortBy": {
                "name": "sortBy",
                "in": "query",
                "description": "The field that should be used to sort the results.\n\n    The direction can be specified with the `sortOrder` parameter.",
                "schema": {
                    "description": "The best match if the `query` parameter is used, otherwise they will be ordered by when they were added to the platform.",
                    "type": "string",
                    "enum": [
                        "id",
                        "lastName",
                        "firstName",
                        "fullName",
                        "company",
                        "createdAt",
                        "updatedAt",
                        "salary"
                    ],
                    "example": "createdAt"
                }
            },
            "api.project.filterOn": {
                "name": "filterOn[]",
                "in": "query",
                "description": "The fields that should be matched against the `query` parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "name",
                            "owner",
                            "projectId",
                            "company",
                            "industry",
                            "customField",
                            "status"
                        ]
                    },
                    "default": "name",
                    "example": "name"
                }
            },
            "api.project.sortBy": {
                "name": "sortBy",
                "in": "query",
                "description": "The field that should be used to sort the results.\n\n    The direction can be specified with the `sortOrder` parameter.",
                "schema": {
                    "description": "The best match if the `query` parameter is used, otherwise they will be ordered by when they were added to the platform.",
                    "type": "string",
                    "enum": [
                        "id",
                        "name",
                        "createdAt",
                        "updatedAt",
                        "status",
                        "company",
                        "projectId",
                        "potential"
                    ],
                    "example": "createdAt"
                }
            },
            "api.revenue.filterOn": {
                "name": "filterOn[]",
                "in": "query",
                "description": "The fields that should be matched against in the `query` parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "currency",
                            "amount",
                            "tag",
                            "owner",
                            "industries",
                            "projectId",
                            "projectName",
                            "companyName",
                            "refNumber"
                        ]
                    },
                    "example": "tag"
                }
            },
            "api.revenue.sortBy": {
                "name": "sortBy",
                "in": "query",
                "description": "The field that should be used to sort the results.\nThe direction can be specified with the `sortOrder` parameter.",
                "schema": {
                    "description": "The best match if the `query` parameter is used, otherwise they will be ordered by when they were added to the platform.",
                    "type": "string",
                    "enum": [
                        "id",
                        "tag",
                        "createdAt",
                        "updatedAt",
                        "refNumber"
                    ],
                    "example": "createdAt"
                }
            },
            "api.note.filterOn": {
                "name": "filterOn",
                "in": "query",
                "description": "The fields that should be matched against the `query` parameter.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "`note`",
                            "`owner`"
                        ]
                    },
                    "example": "note"
                }
            },
            "api.note.sortBy": {
                "name": "sortBy",
                "in": "query",
                "description": "The field that should be used to sort the results.\nThe direction can be specified with the `sortOrder` parameter.",
                "schema": {
                    "description": "The best match if the `query` parameter is used, otherwise they will be ordered by when they were added to the platform.",
                    "type": "string",
                    "default": "createdAt",
                    "enum": [
                        "id",
                        "`createdAt`",
                        "`updatedAt`"
                    ],
                    "example": "createdAt"
                }
            }
        },
        "examples": {
            "WithoutMicrosoftGraphIntegration": {
                "summary": "Without Microsoft Graph Integration",
                "value": {
                    "title": "Q3 Target Review",
                    "owners": [
                        {
                            "id": 1234,
                            "type": "candidate",
                            "fullname": "Jane Doe",
                            "email": "me@example.com"
                        }
                    ],
                    "note": "John will attend!",
                    "timezone": "Europe/London",
                    "date": "2023-07-20 13:00:00",
                    "end": "2023-07-20 14:00:00",
                    "address": "London Office",
                    "agenda": "We will discuss progress during Q3",
                    "tag": 1234,
                    "private": true,
                    "sensitivity": true,
                    "allDay": true,
                    "details": "We will review Q3 and discuss Q4",
                    "includeDetails": true,
                    "includeName": true,
                    "microsoftGraphIntegrationId": 2,
                    "channels": [
                        {
                            "id": 1234,
                            "label": "assignment"
                        }
                    ]
                }
            },
            "WithMicrosoftGraphIntegration": {
                "summary": "With Microsoft Graph Integration",
                "value": {
                    "note": "John will attend!",
                    "tag": 1234,
                    "private": true,
                    "channels": [
                        {
                            "id": 1234,
                            "label": "assignment"
                        }
                    ]
                }
            }
        },
        "requestBodies": {
            "api.company.storeRequest": {
                "description": "The body for creating a new company.",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.company.store"
                        }
                    }
                }
            },
            "api.company.updateRequest": {
                "description": "The body for creating a new company.",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.company.update"
                        }
                    }
                }
            },
            "api.person.storeRequest": {
                "description": "The body for creating a new person.",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.person.store"
                        }
                    },
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/api.person.storeFile"
                        }
                    }
                }
            },
            "api.person.updateRequest": {
                "description": "The person details to be updated",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.person.update"
                        }
                    },
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/api.person.storeFile"
                        }
                    }
                }
            },
            "api.project.storeRequest": {
                "description": "The body for creating a new project",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.project.store"
                        }
                    }
                }
            },
            "api.project.updateRequest": {
                "description": "The body for creating a new project",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.project.update"
                        }
                    }
                }
            },
            "api.v2.company.storeRequest": {
                "description": "The body for creating a new company.",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.v2.company.store"
                        }
                    }
                }
            },
            "api.v2.company.updateRequest": {
                "description": "The body for creating a new company.",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.v2.company.update"
                        }
                    }
                }
            },
            "api.v2.person.storeRequest": {
                "description": "The body for creating a new person.",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.v2.person.store"
                        }
                    },
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/api.person.storeFile"
                        }
                    }
                }
            },
            "api.v2.person.updateRequest": {
                "description": "The person details to be updated",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.v2.person.update"
                        }
                    },
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/api.person.storeFile"
                        }
                    }
                }
            },
            "api.v3.company.storeRequest": {
                "description": "The body for creating a new company.",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.v3.company.store"
                        }
                    }
                }
            },
            "api.v3.company.updateRequest": {
                "description": "The body for creating a new company.",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.v3.company.update"
                        }
                    }
                }
            },
            "api.v3.person.storeRequest": {
                "description": "The body for creating a new person.",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.v3.person.store"
                        }
                    },
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/api.person.storeFile"
                        }
                    }
                }
            },
            "api.v3.person.updateRequest": {
                "description": "The person details to be updated",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.person.update"
                        }
                    },
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/api.person.storeFile"
                        }
                    }
                }
            },
            "api.v3.project.storeRequest": {
                "description": "The body for creating a new project",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.v3.project.store"
                        }
                    }
                }
            },
            "api.v3.project.updateRequest": {
                "description": "The body for creating a new project",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.v3.project.update"
                        }
                    }
                }
            },
            "api.fixedFeeStore": {
                "description": "The fixed fee body",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.fixedFee.storeRequest"
                        }
                    }
                }
            },
            "api.invoiceStore": {
                "description": "The invoice body",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.invoice.storeRequest"
                        }
                    }
                }
            },
            "api.lockInvoice": {
                "description": "The body for locking an invoice.",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.invoice.lock"
                        }
                    }
                }
            },
            "api.revenueStore": {
                "description": "The revenue body",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.revenue.storeRequest"
                        }
                    }
                }
            },
            "api.customValue.updateRequest": {
                "description": "The request body for adding/updating custom value on an item.",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.customValue.storeRequest"
                        }
                    }
                }
            },
            "api.documentRequest": {
                "description": "The document request body",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/api.document.default"
                        }
                    }
                }
            },
            "api.importEmailRequest": {
                "description": "The person email body",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/api.importEmail.default"
                                },
                                {
                                    "properties": {
                                        "attachments": {
                                            "description": "An array of binary files",
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "format": "binary"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        }
                    },
                    "application/json": {
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/api.importEmail.default"
                                },
                                {
                                    "properties": {
                                        "attachments": {
                                            "description": "An array of valid document urls",
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "example": "https://www.example.com/mail/attachments/document.pdf"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        }
                    }
                }
            },
            "api.list.storeRequest": {
                "description": "The body for creating a new list.",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.list.storeRequest"
                        }
                    }
                }
            },
            "api.education.storeRequest": {
                "description": "The body for creating and updating a person's education",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.education.storeRequest"
                        }
                    }
                }
            },
            "api.position.storeRequest": {
                "description": "The body for creating and updating a person's position",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.position.storeRequest"
                        }
                    }
                }
            },
            "api.meetingRequestStore": {
                "description": "The meeting request body",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/api.meeting.default"
                                }
                            ]
                        }
                    },
                    "multipart/form-data": {
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/api.meeting.default"
                                },
                                {
                                    "properties": {
                                        "attachments": {
                                            "description": "An array of binary files",
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "format": "binary"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        }
                    }
                }
            },
            "api.meetingRequestUpdate": {
                "description": "The meeting request body",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/api.meeting.default"
                                }
                            ]
                        },
                        "examples": {
                            "WithoutMicrosoftGraphIntegration": {
                                "$ref": "#/components/examples/WithoutMicrosoftGraphIntegration"
                            },
                            "WithMicrosoftGraphIntegration": {
                                "$ref": "#/components/examples/WithMicrosoftGraphIntegration"
                            }
                        }
                    },
                    "multipart/form-data": {
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/api.meeting.default"
                                },
                                {
                                    "properties": {
                                        "attachments": {
                                            "description": "An array of binary files",
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "format": "binary"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        }
                    }
                }
            },
            "api.meetingRequestUpdatePinned": {
                "description": "The meeting pinned request body",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.meeting.updatePinned"
                        }
                    }
                }
            },
            "api.noteRequest": {
                "description": "The note body",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.note.storeRequest"
                        }
                    }
                }
            },
            "api.taskRequestStore": {
                "description": "The task request body",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.task.storeRequest"
                        }
                    }
                }
            },
            "api.taskRequestUpdate": {
                "description": "The task request body",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.task.update"
                        }
                    }
                }
            },
            "api.taskRequestUpdateDone": {
                "description": "The task done request body",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.task.updateDone"
                        }
                    }
                }
            },
            "api.taskRequestUpdatePriority": {
                "description": "The task priority request body",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.task.updatePriority"
                        }
                    }
                }
            },
            "api.taskRequestUpdatePinned": {
                "description": "The task pinned request body",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.task.updatePinned"
                        }
                    }
                }
            },
            "api.v3.billing.fixedFeeStore": {
                "description": "The fixed fee body",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.v3.fixedFee.storeRequest"
                        }
                    }
                }
            },
            "api.v3.invoiceStore": {
                "description": "The invoice body",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.v3.invoice.storeRequest"
                        }
                    }
                }
            },
            "api.v3.revenueStore": {
                "description": "The revenue body",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.v3.revenue.storeRequest"
                        }
                    }
                }
            },
            "api.v3.consultant.storeRequest": {
                "description": "The body for adding a consultant to a model.",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.v3.consultant.request.store"
                        }
                    }
                }
            },
            "api.v3.officeGroup.storeRequest": {
                "description": "The body for adding an office group to a model.",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.v3.officeGroup.request.store"
                        }
                    }
                }
            },
            "api.v3.region.storeRequest": {
                "description": "The body for adding a region to a model.",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.v3.region.request.store"
                        }
                    }
                }
            },
            "api.v3.project.action.update": {
                "description": "The body for creating a new action tag",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.v3.project.action.update"
                        }
                    }
                }
            },
            "api.relationships.storeDeleteRequest": {
                "description": "The body for creating and deleting a relationship",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.relationships.storeDelete"
                        }
                    }
                }
            },
            "api.relationships.updateRequest": {
                "description": "The body for updating a relationship",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/api.relationships.update"
                        }
                    }
                }
            }
        },
        "securitySchemes": {
            "api.bearer": {
                "type": "http",
                "bearerFormat": "string",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "People (Profile)"
        },
        {
            "name": "People (Confidential Details)"
        },
        {
            "name": "People (Aspirations)"
        },
        {
            "name": "People (Current Status)"
        },
        {
            "name": "People (Emails)"
        },
        {
            "name": "People (Phones)"
        },
        {
            "name": "People (Links)"
        },
        {
            "name": "People (Positions)"
        },
        {
            "name": "People (Education/Qualifications)"
        },
        {
            "name": "People (Notes)"
        },
        {
            "name": "People (Lists)"
        },
        {
            "name": "People (Import Emails)"
        },
        {
            "name": "People (Status tags)"
        },
        {
            "name": "Projects"
        },
        {
            "name": "Projects (Candidates)"
        },
        {
            "name": "Projects (Contacts)"
        },
        {
            "name": "Billing"
        },
        {
            "name": "Billing (Invoices)"
        },
        {
            "name": "Billing (Revenues)"
        },
        {
            "name": "Billing (Fixed Fees)"
        },
        {
            "name": "Billing (Percent Splits)"
        },
        {
            "name": "Companies"
        },
        {
            "name": "Companies (Links)"
        },
        {
            "name": "Clients"
        },
        {
            "name": "Lists"
        },
        {
            "name": "Notes"
        },
        {
            "name": "Status tags"
        },
        {
            "name": "Categories"
        },
        {
            "name": "Custom Values"
        },
        {
            "name": "Custom Fields"
        },
        {
            "name": "Search Firm Users"
        },
        {
            "name": "Off-Limits"
        },
        {
            "name": "Documents"
        },
        {
            "name": "Meetings"
        },
        {
            "name": "Tasks"
        },
        {
            "name": "Relationships"
        }
    ],
    "security": [
        {
            "api.bearer": []
        }
    ]
}